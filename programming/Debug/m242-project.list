
m242-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f30  08006f30  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006f30  08006f30  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f30  08006f30  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001b80  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001bf4  20001bf4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ace4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003452  00000000  00000000  0003ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  0003e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a8  00000000  00000000  0003f5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003249  00000000  00000000  00040868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018df5  00000000  00000000  00043ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3924  00000000  00000000  0005c8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001301ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000561c  00000000  00000000  0013021c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006da8 	.word	0x08006da8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006da8 	.word	0x08006da8

080001e0 <WritePort>:
static int actdp;     // Maske f�r den aktuellen Dezimalpunkt
static int actflash;  // noch nicht untertst�zt


void WritePort(int val)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	int i;
	static int out;

	out = val;
 80001e8:	4a1c      	ldr	r2, [pc, #112]	; (800025c <WritePort+0x7c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	6013      	str	r3, [r2, #0]

	for (i=0;i<=7;i++)
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	e02a      	b.n	800024a <WritePort+0x6a>
	{
	  WRITE_SFTCLK_0;
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fe:	f001 f81d 	bl	800123c <HAL_GPIO_WritePin>
	  if (out & 0x01)  WRITE_SDI_Pin_1;  // Daten Bitweise ausgeben
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <WritePort+0x7c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f003 0301 	and.w	r3, r3, #1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d007      	beq.n	800021e <WritePort+0x3e>
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000218:	f001 f810 	bl	800123c <HAL_GPIO_WritePin>
 800021c:	e006      	b.n	800022c <WritePort+0x4c>
	  else             WRITE_SDI_Pin_0;
 800021e:	2200      	movs	r2, #0
 8000220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000228:	f001 f808 	bl	800123c <HAL_GPIO_WritePin>
	  out = out>>1;
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <WritePort+0x7c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	105b      	asrs	r3, r3, #1
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <WritePort+0x7c>)
 8000234:	6013      	str	r3, [r2, #0]
	  WRITE_SFTCLK_1;
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000240:	f000 fffc 	bl	800123c <HAL_GPIO_WritePin>
	for (i=0;i<=7;i++)
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	3301      	adds	r3, #1
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2b07      	cmp	r3, #7
 800024e:	ddd1      	ble.n	80001f4 <WritePort+0x14>
	}
}
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	2000009c 	.word	0x2000009c

08000260 <WriteValue>:


void WriteValue(int digit)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
   static int disable;
   static int flashcount;
   int val = actvalue;
 8000268:	4b6e      	ldr	r3, [pc, #440]	; (8000424 <WriteValue+0x1c4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	60fb      	str	r3, [r7, #12]

   int out;
   int out_dp = 0xFF;
 800026e:	23ff      	movs	r3, #255	; 0xff
 8000270:	613b      	str	r3, [r7, #16]


  switch (digit)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2b03      	cmp	r3, #3
 8000276:	d86a      	bhi.n	800034e <WriteValue+0xee>
 8000278:	a201      	add	r2, pc, #4	; (adr r2, 8000280 <WriteValue+0x20>)
 800027a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027e:	bf00      	nop
 8000280:	08000291 	.word	0x08000291
 8000284:	080002bd 	.word	0x080002bd
 8000288:	080002f5 	.word	0x080002f5
 800028c:	0800032d 	.word	0x0800032d
  {
  case 0:   out = val % 10;               // Stelle 0
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	4b65      	ldr	r3, [pc, #404]	; (8000428 <WriteValue+0x1c8>)
 8000294:	fb83 1302 	smull	r1, r3, r3, r2
 8000298:	1099      	asrs	r1, r3, #2
 800029a:	17d3      	asrs	r3, r2, #31
 800029c:	1ac9      	subs	r1, r1, r3
 800029e:	460b      	mov	r3, r1
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	440b      	add	r3, r1
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	617b      	str	r3, [r7, #20]
            if (actdp & SEG_Driver_DP_1)  out_dp = SEGMENT_DP;
 80002aa:	4b60      	ldr	r3, [pc, #384]	; (800042c <WriteValue+0x1cc>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d04e      	beq.n	8000354 <WriteValue+0xf4>
 80002b6:	23fe      	movs	r3, #254	; 0xfe
 80002b8:	613b      	str	r3, [r7, #16]
            break;
 80002ba:	e04b      	b.n	8000354 <WriteValue+0xf4>
  case 1:   out = (val / 10) % 10;        // Stelle 1
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	4a5a      	ldr	r2, [pc, #360]	; (8000428 <WriteValue+0x1c8>)
 80002c0:	fb82 1203 	smull	r1, r2, r2, r3
 80002c4:	1092      	asrs	r2, r2, #2
 80002c6:	17db      	asrs	r3, r3, #31
 80002c8:	1ad2      	subs	r2, r2, r3
 80002ca:	4b57      	ldr	r3, [pc, #348]	; (8000428 <WriteValue+0x1c8>)
 80002cc:	fb83 1302 	smull	r1, r3, r3, r2
 80002d0:	1099      	asrs	r1, r3, #2
 80002d2:	17d3      	asrs	r3, r2, #31
 80002d4:	1ac9      	subs	r1, r1, r3
 80002d6:	460b      	mov	r3, r1
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	440b      	add	r3, r1
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	617b      	str	r3, [r7, #20]
            if (actdp & SEG_Driver_DP_2)  out_dp = SEGMENT_DP;
 80002e2:	4b52      	ldr	r3, [pc, #328]	; (800042c <WriteValue+0x1cc>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f003 0302 	and.w	r3, r3, #2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d034      	beq.n	8000358 <WriteValue+0xf8>
 80002ee:	23fe      	movs	r3, #254	; 0xfe
 80002f0:	613b      	str	r3, [r7, #16]
            break;
 80002f2:	e031      	b.n	8000358 <WriteValue+0xf8>
  case 2:   out = (val / 100 % 10);       // Stelle 2
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	4a4e      	ldr	r2, [pc, #312]	; (8000430 <WriteValue+0x1d0>)
 80002f8:	fb82 1203 	smull	r1, r2, r2, r3
 80002fc:	1152      	asrs	r2, r2, #5
 80002fe:	17db      	asrs	r3, r3, #31
 8000300:	1ad2      	subs	r2, r2, r3
 8000302:	4b49      	ldr	r3, [pc, #292]	; (8000428 <WriteValue+0x1c8>)
 8000304:	fb83 1302 	smull	r1, r3, r3, r2
 8000308:	1099      	asrs	r1, r3, #2
 800030a:	17d3      	asrs	r3, r2, #31
 800030c:	1ac9      	subs	r1, r1, r3
 800030e:	460b      	mov	r3, r1
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	440b      	add	r3, r1
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	1ad3      	subs	r3, r2, r3
 8000318:	617b      	str	r3, [r7, #20]
            if (actdp & SEG_Driver_DP_3)  out_dp = SEGMENT_DP;
 800031a:	4b44      	ldr	r3, [pc, #272]	; (800042c <WriteValue+0x1cc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f003 0304 	and.w	r3, r3, #4
 8000322:	2b00      	cmp	r3, #0
 8000324:	d01a      	beq.n	800035c <WriteValue+0xfc>
 8000326:	23fe      	movs	r3, #254	; 0xfe
 8000328:	613b      	str	r3, [r7, #16]
            break;
 800032a:	e017      	b.n	800035c <WriteValue+0xfc>
  case 3:   out = val / 1000;             // Stelle 3
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	4a41      	ldr	r2, [pc, #260]	; (8000434 <WriteValue+0x1d4>)
 8000330:	fb82 1203 	smull	r1, r2, r2, r3
 8000334:	1192      	asrs	r2, r2, #6
 8000336:	17db      	asrs	r3, r3, #31
 8000338:	1ad3      	subs	r3, r2, r3
 800033a:	617b      	str	r3, [r7, #20]
            if (actdp & SEG_Driver_DP_4)  out_dp = SEGMENT_DP;
 800033c:	4b3b      	ldr	r3, [pc, #236]	; (800042c <WriteValue+0x1cc>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f003 0308 	and.w	r3, r3, #8
 8000344:	2b00      	cmp	r3, #0
 8000346:	d00b      	beq.n	8000360 <WriteValue+0x100>
 8000348:	23fe      	movs	r3, #254	; 0xfe
 800034a:	613b      	str	r3, [r7, #16]
            break;
 800034c:	e008      	b.n	8000360 <WriteValue+0x100>
  default:  out = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]
 8000352:	e006      	b.n	8000362 <WriteValue+0x102>
            break;
 8000354:	bf00      	nop
 8000356:	e004      	b.n	8000362 <WriteValue+0x102>
            break;
 8000358:	bf00      	nop
 800035a:	e002      	b.n	8000362 <WriteValue+0x102>
            break;
 800035c:	bf00      	nop
 800035e:	e000      	b.n	8000362 <WriteValue+0x102>
            break;
 8000360:	bf00      	nop
  }


  WRITE_LCHCLK_0;                          // Daten starten
 8000362:	2200      	movs	r2, #0
 8000364:	2120      	movs	r1, #32
 8000366:	4834      	ldr	r0, [pc, #208]	; (8000438 <WriteValue+0x1d8>)
 8000368:	f000 ff68 	bl	800123c <HAL_GPIO_WritePin>

  // Blinken bearbeiten
  switch(actflash)
 800036c:	4b33      	ldr	r3, [pc, #204]	; (800043c <WriteValue+0x1dc>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d00a      	beq.n	800038a <WriteValue+0x12a>
 8000374:	2b02      	cmp	r3, #2
 8000376:	d003      	beq.n	8000380 <WriteValue+0x120>
  {
  case SEG_Driver_FLASH_OFF:  // blinken ausgeschaltet
  default:                    disable = 0;
 8000378:	4b31      	ldr	r3, [pc, #196]	; (8000440 <WriteValue+0x1e0>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
	                          break;
 800037e:	e023      	b.n	80003c8 <WriteValue+0x168>
  case SEG_Driver_FLASH_FAST: flashcount =flashcount+3;
 8000380:	4b30      	ldr	r3, [pc, #192]	; (8000444 <WriteValue+0x1e4>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	3303      	adds	r3, #3
 8000386:	4a2f      	ldr	r2, [pc, #188]	; (8000444 <WriteValue+0x1e4>)
 8000388:	6013      	str	r3, [r2, #0]
  case SEG_Driver_FLASH_SLOW: flashcount++;
 800038a:	4b2e      	ldr	r3, [pc, #184]	; (8000444 <WriteValue+0x1e4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	4a2c      	ldr	r2, [pc, #176]	; (8000444 <WriteValue+0x1e4>)
 8000392:	6013      	str	r3, [r2, #0]
                              if (!(flashcount%100))     //   100 * 5ms = 500ms => 1s Periodenzeit = 1Hz für langsames blinken
 8000394:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <WriteValue+0x1e4>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4b25      	ldr	r3, [pc, #148]	; (8000430 <WriteValue+0x1d0>)
 800039a:	fb83 1302 	smull	r1, r3, r3, r2
 800039e:	1159      	asrs	r1, r3, #5
 80003a0:	17d3      	asrs	r3, r2, #31
 80003a2:	1acb      	subs	r3, r1, r3
 80003a4:	2164      	movs	r1, #100	; 0x64
 80003a6:	fb01 f303 	mul.w	r3, r1, r3
 80003aa:	1ad3      	subs	r3, r2, r3
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d10a      	bne.n	80003c6 <WriteValue+0x166>
                              {
                            	 if (disable) disable = 0;
 80003b0:	4b23      	ldr	r3, [pc, #140]	; (8000440 <WriteValue+0x1e0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d003      	beq.n	80003c0 <WriteValue+0x160>
 80003b8:	4b21      	ldr	r3, [pc, #132]	; (8000440 <WriteValue+0x1e0>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
                            	 else         disable = 1;
                              }
                              break;
 80003be:	e002      	b.n	80003c6 <WriteValue+0x166>
                            	 else         disable = 1;
 80003c0:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <WriteValue+0x1e0>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	601a      	str	r2, [r3, #0]
                              break;
 80003c6:	bf00      	nop
  }

  if (actvalue<= 9999 && actvalue >=0 && !disable)   WritePort(SEGMENT_MAP[out] & out_dp);    // LSB = 7-Segment
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <WriteValue+0x1c4>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80003d0:	4293      	cmp	r3, r2
 80003d2:	dc12      	bgt.n	80003fa <WriteValue+0x19a>
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <WriteValue+0x1c4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db0e      	blt.n	80003fa <WriteValue+0x19a>
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <WriteValue+0x1e0>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d10a      	bne.n	80003fa <WriteValue+0x19a>
 80003e4:	4a18      	ldr	r2, [pc, #96]	; (8000448 <WriteValue+0x1e8>)
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	4413      	add	r3, r2
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	4013      	ands	r3, r2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff fef4 	bl	80001e0 <WritePort>
 80003f8:	e004      	b.n	8000404 <WriteValue+0x1a4>
  else                                               WritePort(0xFF & out_dp);                // Anzeige Dunkel
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff feee 	bl	80001e0 <WritePort>
  WritePort(SEGMENT_SELECT[digit]);        // MSB = Anzeigen Select
 8000404:	4a11      	ldr	r2, [pc, #68]	; (800044c <WriteValue+0x1ec>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff fee7 	bl	80001e0 <WritePort>

  WRITE_LCHCLK_1;                          // Alle Daten �bernehmen
 8000412:	2201      	movs	r2, #1
 8000414:	2120      	movs	r1, #32
 8000416:	4808      	ldr	r0, [pc, #32]	; (8000438 <WriteValue+0x1d8>)
 8000418:	f000 ff10 	bl	800123c <HAL_GPIO_WritePin>
}
 800041c:	bf00      	nop
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000090 	.word	0x20000090
 8000428:	66666667 	.word	0x66666667
 800042c:	20000094 	.word	0x20000094
 8000430:	51eb851f 	.word	0x51eb851f
 8000434:	10624dd3 	.word	0x10624dd3
 8000438:	48000400 	.word	0x48000400
 800043c:	20000098 	.word	0x20000098
 8000440:	200000a0 	.word	0x200000a0
 8000444:	200000a4 	.word	0x200000a4
 8000448:	08006e0c 	.word	0x08006e0c
 800044c:	08006e18 	.word	0x08006e18

08000450 <SEG_Driver_Write>:



void SEG_Driver_Write(int value, int dp, int flash)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
 actvalue= value;  // Maximalwert 9999
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <SEG_Driver_Write+0x2c>)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6013      	str	r3, [r2, #0]
 actdp   = dp;
 8000462:	4a07      	ldr	r2, [pc, #28]	; (8000480 <SEG_Driver_Write+0x30>)
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	6013      	str	r3, [r2, #0]
 actflash = flash;
 8000468:	4a06      	ldr	r2, [pc, #24]	; (8000484 <SEG_Driver_Write+0x34>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6013      	str	r3, [r2, #0]

}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	20000090 	.word	0x20000090
 8000480:	20000094 	.word	0x20000094
 8000484:	20000098 	.word	0x20000098

08000488 <SEG_Driver_Task_5ms>:

void SEG_Driver_Task_5ms(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  static int actdigit;

  actdigit++;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <SEG_Driver_Task_5ms+0x2c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <SEG_Driver_Task_5ms+0x2c>)
 8000494:	6013      	str	r3, [r2, #0]
  WriteValue(actdigit % 4);
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <SEG_Driver_Task_5ms+0x2c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	425a      	negs	r2, r3
 800049c:	f003 0303 	and.w	r3, r3, #3
 80004a0:	f002 0203 	and.w	r2, r2, #3
 80004a4:	bf58      	it	pl
 80004a6:	4253      	negpl	r3, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff fed9 	bl	8000260 <WriteValue>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000a8 	.word	0x200000a8

080004b8 <Taster_Treiber_Init_Task>:
//  5.     G L O B A L    F U N C T I O N S
//  ---------------------------------------

// Reads the state of the given taster and saves it to the static variable
void Taster_Treiber_Init_Task(void *argument)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
    // Invert the state because the taster is active low (on = 0, off = 1)
    while (true)
    {
        TASTER_1_STATUS = !HAL_GPIO_ReadPin(GPIOA, TASTER_1_Pin);
 80004c0:	2102      	movs	r1, #2
 80004c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c6:	f000 fea1 	bl	800120c <HAL_GPIO_ReadPin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	bf0c      	ite	eq
 80004d0:	2301      	moveq	r3, #1
 80004d2:	2300      	movne	r3, #0
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <Taster_Treiber_Init_Task+0x5c>)
 80004d8:	701a      	strb	r2, [r3, #0]
        TASTER_2_STATUS = !HAL_GPIO_ReadPin(GPIOA, TASTER_2_Pin);
 80004da:	2110      	movs	r1, #16
 80004dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e0:	f000 fe94 	bl	800120c <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf0c      	ite	eq
 80004ea:	2301      	moveq	r3, #1
 80004ec:	2300      	movne	r3, #0
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <Taster_Treiber_Init_Task+0x60>)
 80004f2:	701a      	strb	r2, [r3, #0]
        TASTER_3_STATUS = !HAL_GPIO_ReadPin(TASTER_3_GPIO_Port, TASTER_3_Pin);
 80004f4:	2101      	movs	r1, #1
 80004f6:	4809      	ldr	r0, [pc, #36]	; (800051c <Taster_Treiber_Init_Task+0x64>)
 80004f8:	f000 fe88 	bl	800120c <HAL_GPIO_ReadPin>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bf0c      	ite	eq
 8000502:	2301      	moveq	r3, #1
 8000504:	2300      	movne	r3, #0
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <Taster_Treiber_Init_Task+0x68>)
 800050a:	701a      	strb	r2, [r3, #0]

        // Wait 50ms to avoid bouncing
        osDelay(50);
 800050c:	2032      	movs	r0, #50	; 0x32
 800050e:	f003 fda5 	bl	800405c <osDelay>
        TASTER_1_STATUS = !HAL_GPIO_ReadPin(GPIOA, TASTER_1_Pin);
 8000512:	e7d5      	b.n	80004c0 <Taster_Treiber_Init_Task+0x8>
 8000514:	200000ac 	.word	0x200000ac
 8000518:	200000ad 	.word	0x200000ad
 800051c:	48000400 	.word	0x48000400
 8000520:	200000ae 	.word	0x200000ae

08000524 <Taster_Get>:
    }
}

// Reads the current state of the given taster and returns it
bool Taster_Get(int taster)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    switch (taster)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b02      	cmp	r3, #2
 8000530:	d00f      	beq.n	8000552 <Taster_Get+0x2e>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b02      	cmp	r3, #2
 8000536:	dc0f      	bgt.n	8000558 <Taster_Get+0x34>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d003      	beq.n	8000546 <Taster_Get+0x22>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d003      	beq.n	800054c <Taster_Get+0x28>
 8000544:	e008      	b.n	8000558 <Taster_Get+0x34>
    {
    case TASTER_1:
        return TASTER_1_STATUS;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <Taster_Get+0x44>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	e006      	b.n	800055a <Taster_Get+0x36>
    case TASTER_2:
        return TASTER_2_STATUS;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <Taster_Get+0x48>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	e003      	b.n	800055a <Taster_Get+0x36>
    case TASTER_3:
        return TASTER_3_STATUS;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <Taster_Get+0x4c>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	e000      	b.n	800055a <Taster_Get+0x36>
    default:
        return false;
 8000558:	2300      	movs	r3, #0
    }
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	200000ac 	.word	0x200000ac
 800056c:	200000ad 	.word	0x200000ad
 8000570:	200000ae 	.word	0x200000ae

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fba6 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f844 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f922 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f8f0 	bl	8000768 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000588:	f000 f8a0 	bl	80006cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058c:	f003 fc54 	bl	8003e38 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of stopwatchTimer */
  stopwatchTimerHandle = osTimerNew(stopwatchCallback, osTimerPeriodic, NULL, &stopwatchTimer_attributes);
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <main+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	2101      	movs	r1, #1
 8000596:	4811      	ldr	r0, [pc, #68]	; (80005dc <main+0x68>)
 8000598:	f003 fda4 	bl	80040e4 <osTimerNew>
 800059c:	4603      	mov	r3, r0
 800059e:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <main+0x6c>)
 80005a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a2:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <main+0x70>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	4810      	ldr	r0, [pc, #64]	; (80005e8 <main+0x74>)
 80005a8:	f003 fcae 	bl	8003f08 <osThreadNew>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <main+0x78>)
 80005b0:	6013      	str	r3, [r2, #0]

  /* creation of tasterTask */
  tasterTaskHandle = osThreadNew(Taster_Treiber_Task, NULL, &tasterTask_attributes);
 80005b2:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <main+0x7c>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	480f      	ldr	r0, [pc, #60]	; (80005f4 <main+0x80>)
 80005b8:	f003 fca6 	bl	8003f08 <osThreadNew>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <main+0x84>)
 80005c0:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <main+0x88>)
 80005c4:	2100      	movs	r1, #0
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <main+0x8c>)
 80005c8:	f003 fc9e 	bl	8003f08 <osThreadNew>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <main+0x90>)
 80005d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d2:	f003 fc65 	bl	8003ea0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <main+0x62>
 80005d8:	08006e88 	.word	0x08006e88
 80005dc:	080009b7 	.word	0x080009b7
 80005e0:	20000190 	.word	0x20000190
 80005e4:	08006e1c 	.word	0x08006e1c
 80005e8:	080008f5 	.word	0x080008f5
 80005ec:	20000184 	.word	0x20000184
 80005f0:	08006e40 	.word	0x08006e40
 80005f4:	0800098d 	.word	0x0800098d
 80005f8:	20000188 	.word	0x20000188
 80005fc:	08006e64 	.word	0x08006e64
 8000600:	080009a3 	.word	0x080009a3
 8000604:	2000018c 	.word	0x2000018c

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b0a6      	sub	sp, #152	; 0x98
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000612:	2228      	movs	r2, #40	; 0x28
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fafc 	bl	8006c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2258      	movs	r2, #88	; 0x58
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f006 faee 	bl	8006c14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000650:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000654:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000658:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fe1a 	bl	80012a0 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000672:	f000 f9bd 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000686:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fe58 	bl	8002348 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800069e:	f000 f9a7 	bl	80009f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM34;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <SystemClock_Config+0xc0>)
 80006a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 f8b1 	bl	8002818 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006bc:	f000 f998 	bl	80009f0 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3798      	adds	r7, #152	; 0x98
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	00200002 	.word	0x00200002

080006cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_TIM3_Init+0x94>)
 80006ec:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <MX_TIM3_Init+0x98>)
 80006ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000-1;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_TIM3_Init+0x94>)
 80006f2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80006f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_TIM3_Init+0x94>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_TIM3_Init+0x94>)
 8000700:	22fa      	movs	r2, #250	; 0xfa
 8000702:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_TIM3_Init+0x94>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_TIM3_Init+0x94>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000710:	4813      	ldr	r0, [pc, #76]	; (8000760 <MX_TIM3_Init+0x94>)
 8000712:	f002 fa9f 	bl	8002c54 <HAL_TIM_Base_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800071c:	f000 f968 	bl	80009f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000724:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4619      	mov	r1, r3
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_TIM3_Init+0x94>)
 800072e:	f002 fc78 	bl	8003022 <HAL_TIM_ConfigClockSource>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000738:	f000 f95a 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_TIM3_Init+0x94>)
 800074a:	f002 fe93 	bl	8003474 <HAL_TIMEx_MasterConfigSynchronization>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000754:	f000 f94c 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000b0 	.word	0x200000b0
 8000764:	40000400 	.word	0x40000400

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800076e:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <MX_USART2_UART_Init+0x5c>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000774:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007ac:	f002 ff0c 	bl	80035c8 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f91b 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000fc 	.word	0x200000fc
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b42      	ldr	r3, [pc, #264]	; (80008e8 <MX_GPIO_Init+0x120>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a41      	ldr	r2, [pc, #260]	; (80008e8 <MX_GPIO_Init+0x120>)
 80007e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b3f      	ldr	r3, [pc, #252]	; (80008e8 <MX_GPIO_Init+0x120>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f6:	4b3c      	ldr	r3, [pc, #240]	; (80008e8 <MX_GPIO_Init+0x120>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a3b      	ldr	r2, [pc, #236]	; (80008e8 <MX_GPIO_Init+0x120>)
 80007fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b39      	ldr	r3, [pc, #228]	; (80008e8 <MX_GPIO_Init+0x120>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <MX_GPIO_Init+0x120>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a35      	ldr	r2, [pc, #212]	; (80008e8 <MX_GPIO_Init+0x120>)
 8000814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b33      	ldr	r3, [pc, #204]	; (80008e8 <MX_GPIO_Init+0x120>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <MX_GPIO_Init+0x120>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <MX_GPIO_Init+0x120>)
 800082c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_GPIO_Init+0x120>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|OUT_7SEG_SFTCLK_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f000 fcf8 	bl	800123c <HAL_GPIO_WritePin>
                          |OUT_7SEG_SDI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_Buzzer_Pin|OUT_7SEGLCHCLK_Pin|LED_4_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2168      	movs	r1, #104	; 0x68
 8000850:	4826      	ldr	r0, [pc, #152]	; (80008ec <MX_GPIO_Init+0x124>)
 8000852:	f000 fcf3 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4820      	ldr	r0, [pc, #128]	; (80008f0 <MX_GPIO_Init+0x128>)
 800086e:	f000 fb43 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TASTER_1_Pin TASTER_2_Pin */
  GPIO_InitStruct.Pin = TASTER_1_Pin|TASTER_2_Pin;
 8000872:	2312      	movs	r3, #18
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f000 fb36 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin OUT_7SEG_SFTCLK_Pin
                           OUT_7SEG_SDI_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|OUT_7SEG_SFTCLK_Pin
 800088c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000890:	617b      	str	r3, [r7, #20]
                          |OUT_7SEG_SDI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f000 fb26 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TASTER_3_Pin */
  GPIO_InitStruct.Pin = TASTER_3_Pin;
 80008ac:	2301      	movs	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TASTER_3_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	480b      	ldr	r0, [pc, #44]	; (80008ec <MX_GPIO_Init+0x124>)
 80008c0:	f000 fb1a 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_Buzzer_Pin OUT_7SEGLCHCLK_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = OUT_Buzzer_Pin|OUT_7SEGLCHCLK_Pin|LED_4_Pin;
 80008c4:	2368      	movs	r3, #104	; 0x68
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_GPIO_Init+0x124>)
 80008dc:	f000 fb0c 	bl	8000ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000400 	.word	0x48000400
 80008f0:	48000800 	.word	0x48000800

080008f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	  HAL_GPIO_TogglePin(OUT_Buzzer_GPIO_Port, OUT_Buzzer_Pin);
 80008fc:	2108      	movs	r1, #8
 80008fe:	4821      	ldr	r0, [pc, #132]	; (8000984 <StartDefaultTask+0x90>)
 8000900:	f000 fcb4 	bl	800126c <HAL_GPIO_TogglePin>
  /* USER CODE BEGIN 5 */
	int timer = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
	int resetBeep = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  while(1)
  {
	  if (Taster_Get(TASTER_3)) {
 800090c:	2002      	movs	r0, #2
 800090e:	f7ff fe09 	bl	8000524 <Taster_Get>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d02e      	beq.n	8000976 <StartDefaultTask+0x82>
		  while(1){
			  if((timer + 400) % 1000 == 0){
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <StartDefaultTask+0x94>)
 8000920:	fb83 1302 	smull	r1, r3, r3, r2
 8000924:	1199      	asrs	r1, r3, #6
 8000926:	17d3      	asrs	r3, r2, #31
 8000928:	1acb      	subs	r3, r1, r3
 800092a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800092e:	fb01 f303 	mul.w	r3, r1, r3
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d109      	bne.n	800094c <StartDefaultTask+0x58>
				  timer += 400;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800093e:	60fb      	str	r3, [r7, #12]
				  HAL_GPIO_TogglePin(OUT_Buzzer_GPIO_Port, OUT_Buzzer_Pin);
 8000940:	2108      	movs	r1, #8
 8000942:	4810      	ldr	r0, [pc, #64]	; (8000984 <StartDefaultTask+0x90>)
 8000944:	f000 fc92 	bl	800126c <HAL_GPIO_TogglePin>
				  resetBeep = 1;
 8000948:	2301      	movs	r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
			  }
			SEG_Driver_Write(timer, SEG_Driver_DP_2 | SEG_Driver_DP_4,0);
 800094c:	2200      	movs	r2, #0
 800094e:	210a      	movs	r1, #10
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff fd7d 	bl	8000450 <SEG_Driver_Write>
			osDelay(100);
 8000956:	2064      	movs	r0, #100	; 0x64
 8000958:	f003 fb80 	bl	800405c <osDelay>

			if(resetBeep == 1){
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d105      	bne.n	800096e <StartDefaultTask+0x7a>
			 HAL_GPIO_TogglePin(OUT_Buzzer_GPIO_Port, OUT_Buzzer_Pin);
 8000962:	2108      	movs	r1, #8
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <StartDefaultTask+0x90>)
 8000966:	f000 fc81 	bl	800126c <HAL_GPIO_TogglePin>
			 resetBeep = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
			}
			timer++;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
			  if((timer + 400) % 1000 == 0){
 8000974:	e7d0      	b.n	8000918 <StartDefaultTask+0x24>
		  }
	  }
	  if (Taster_Get(TASTER_2)) {
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff fdd4 	bl	8000524 <Taster_Get>

	  }

    osDelay(100);
 800097c:	2064      	movs	r0, #100	; 0x64
 800097e:	f003 fb6d 	bl	800405c <osDelay>
	  if (Taster_Get(TASTER_3)) {
 8000982:	e7c3      	b.n	800090c <StartDefaultTask+0x18>
 8000984:	48000400 	.word	0x48000400
 8000988:	10624dd3 	.word	0x10624dd3

0800098c <Taster_Treiber_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Taster_Treiber_Task */
void Taster_Treiber_Task(void *argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Taster_Treiber_Task */
  /* Infinite loop */
	Taster_Treiber_Init_Task(argument);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff fd8f 	bl	80004b8 <Taster_Treiber_Init_Task>
  /* USER CODE END Taster_Treiber_Task */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
	while(true){
	      SEG_Driver_Task_5ms();
 80009aa:	f7ff fd6d 	bl	8000488 <SEG_Driver_Task_5ms>
	      osDelay(5);
 80009ae:	2005      	movs	r0, #5
 80009b0:	f003 fb54 	bl	800405c <osDelay>
	      SEG_Driver_Task_5ms();
 80009b4:	e7f9      	b.n	80009aa <StartDisplayTask+0x8>

080009b6 <stopwatchCallback>:
  /* USER CODE END StartDisplayTask */
}

/* stopwatchCallback function */
void stopwatchCallback(void *argument)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN stopwatchCallback */

  /* USER CODE END stopwatchCallback */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d101      	bne.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009de:	f000 f989 	bl	8000cf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40012c00 	.word	0x40012c00

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6193      	str	r3, [r2, #24]
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	210f      	movs	r1, #15
 8000a36:	f06f 0001 	mvn.w	r0, #1
 8000a3a:	f000 fa33 	bl	8000ea4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_TIM_Base_MspInit+0x44>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d113      	bne.n	8000a86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_TIM_Base_MspInit+0x48>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <HAL_TIM_Base_MspInit+0x48>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_TIM_Base_MspInit+0x48>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2105      	movs	r1, #5
 8000a7a:	201d      	movs	r0, #29
 8000a7c:	f000 fa12 	bl	8000ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a80:	201d      	movs	r0, #29
 8000a82:	f000 fa2b 	bl	8000edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40000400 	.word	0x40000400
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <HAL_UART_MspInit+0x7c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d128      	bne.n	8000b0c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_UART_MspInit+0x80>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <HAL_UART_MspInit+0x80>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_UART_MspInit+0x80>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_UART_MspInit+0x80>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_UART_MspInit+0x80>)
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	6153      	str	r3, [r2, #20]
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_UART_MspInit+0x80>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aea:	230c      	movs	r3, #12
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afa:	2307      	movs	r3, #7
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f000 f9f6 	bl	8000ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <HAL_InitTick+0xcc>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a2d      	ldr	r2, [pc, #180]	; (8000be8 <HAL_InitTick+0xcc>)
 8000b32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <HAL_InitTick+0xcc>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b44:	f107 020c 	add.w	r2, r7, #12
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fe30 	bl	80027b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b54:	f001 fe0c 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 8000b58:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5c:	4a23      	ldr	r2, [pc, #140]	; (8000bec <HAL_InitTick+0xd0>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9b      	lsrs	r3, r3, #18
 8000b64:	3b01      	subs	r3, #1
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b6a:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <HAL_InitTick+0xd8>)
 8000b6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b76:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b8e:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b90:	f002 f860 	bl	8002c54 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d11b      	bne.n	8000bda <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ba2:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000ba4:	f002 f8ae 	bl	8002d04 <HAL_TIM_Base_Start_IT>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d111      	bne.n	8000bda <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bb6:	2019      	movs	r0, #25
 8000bb8:	f000 f990 	bl	8000edc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d808      	bhi.n	8000bd4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	2019      	movs	r0, #25
 8000bc8:	f000 f96c 	bl	8000ea4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	e002      	b.n	8000bda <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3730      	adds	r7, #48	; 0x30
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	20000194 	.word	0x20000194
 8000bf4:	40012c00 	.word	0x40012c00
 8000bf8:	20000004 	.word	0x20000004

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c2e:	f002 f8d9 	bl	8002de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000194 	.word	0x20000194

08000c3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <TIM3_IRQHandler+0x10>)
 8000c42:	f002 f8cf 	bl	8002de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000b0 	.word	0x200000b0

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c78:	f7ff ffea 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	; (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	; (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f005 ff83 	bl	8006bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca6:	f7ff fc65 	bl	8000574 <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cb8:	08006f38 	.word	0x08006f38
  ldr r2, =_sbss
 8000cbc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cc0:	20001bf4 	.word	0x20001bf4

08000cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_2_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x28>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x28>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f8d8 	bl	8000e8e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	200f      	movs	r0, #15
 8000ce0:	f7ff ff1c 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fe8a 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008
 8000d18:	200001e0 	.word	0x200001e0

08000d1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	200001e0 	.word	0x200001e0

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff4c 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb6:	f7ff ff61 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000eba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	6978      	ldr	r0, [r7, #20]
 8000ec2:	f7ff ffb1 	bl	8000e28 <NVIC_EncodePriority>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff80 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff54 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f06:	e160      	b.n	80011ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8152 	beq.w	80011c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d005      	beq.n	8000f38 <HAL_GPIO_Init+0x40>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d130      	bne.n	8000f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6e:	2201      	movs	r2, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 0201 	and.w	r2, r3, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d017      	beq.n	8000fd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d123      	bne.n	800102a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691a      	ldr	r2, [r3, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	6939      	ldr	r1, [r7, #16]
 8001026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0203 	and.w	r2, r3, #3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80ac 	beq.w	80011c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106c:	4b5e      	ldr	r3, [pc, #376]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a5d      	ldr	r2, [pc, #372]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b5b      	ldr	r3, [pc, #364]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001084:	4a59      	ldr	r2, [pc, #356]	; (80011ec <HAL_GPIO_Init+0x2f4>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ae:	d025      	beq.n	80010fc <HAL_GPIO_Init+0x204>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <HAL_GPIO_Init+0x2f8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d01f      	beq.n	80010f8 <HAL_GPIO_Init+0x200>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a4e      	ldr	r2, [pc, #312]	; (80011f4 <HAL_GPIO_Init+0x2fc>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d019      	beq.n	80010f4 <HAL_GPIO_Init+0x1fc>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a4d      	ldr	r2, [pc, #308]	; (80011f8 <HAL_GPIO_Init+0x300>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d013      	beq.n	80010f0 <HAL_GPIO_Init+0x1f8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a4c      	ldr	r2, [pc, #304]	; (80011fc <HAL_GPIO_Init+0x304>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d00d      	beq.n	80010ec <HAL_GPIO_Init+0x1f4>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a4b      	ldr	r2, [pc, #300]	; (8001200 <HAL_GPIO_Init+0x308>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d007      	beq.n	80010e8 <HAL_GPIO_Init+0x1f0>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a4a      	ldr	r2, [pc, #296]	; (8001204 <HAL_GPIO_Init+0x30c>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d101      	bne.n	80010e4 <HAL_GPIO_Init+0x1ec>
 80010e0:	2306      	movs	r3, #6
 80010e2:	e00c      	b.n	80010fe <HAL_GPIO_Init+0x206>
 80010e4:	2307      	movs	r3, #7
 80010e6:	e00a      	b.n	80010fe <HAL_GPIO_Init+0x206>
 80010e8:	2305      	movs	r3, #5
 80010ea:	e008      	b.n	80010fe <HAL_GPIO_Init+0x206>
 80010ec:	2304      	movs	r3, #4
 80010ee:	e006      	b.n	80010fe <HAL_GPIO_Init+0x206>
 80010f0:	2303      	movs	r3, #3
 80010f2:	e004      	b.n	80010fe <HAL_GPIO_Init+0x206>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_Init+0x206>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <HAL_GPIO_Init+0x206>
 80010fc:	2300      	movs	r3, #0
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	f002 0203 	and.w	r2, r2, #3
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	4093      	lsls	r3, r2
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800110e:	4937      	ldr	r1, [pc, #220]	; (80011ec <HAL_GPIO_Init+0x2f4>)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_GPIO_Init+0x310>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001140:	4a31      	ldr	r2, [pc, #196]	; (8001208 <HAL_GPIO_Init+0x310>)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001146:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_GPIO_Init+0x310>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800116a:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_GPIO_Init+0x310>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <HAL_GPIO_Init+0x310>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001194:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <HAL_GPIO_Init+0x310>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_GPIO_Init+0x310>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <HAL_GPIO_Init+0x310>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa22 f303 	lsr.w	r3, r2, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f47f ae97 	bne.w	8000f08 <HAL_GPIO_Init+0x10>
  }
}
 80011da:	bf00      	nop
 80011dc:	bf00      	nop
 80011de:	371c      	adds	r7, #28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010000 	.word	0x40010000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	48000800 	.word	0x48000800
 80011f8:	48000c00 	.word	0x48000c00
 80011fc:	48001000 	.word	0x48001000
 8001200:	48001400 	.word	0x48001400
 8001204:	48001800 	.word	0x48001800
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001258:	e002      	b.n	8001260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4013      	ands	r3, r2
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43d9      	mvns	r1, r3
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	400b      	ands	r3, r1
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f001 b83a 	b.w	800233a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 816f 	beq.w	80015ba <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012dc:	4bb5      	ldr	r3, [pc, #724]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d00c      	beq.n	8001302 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012e8:	4bb2      	ldr	r3, [pc, #712]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d15c      	bne.n	80013ae <HAL_RCC_OscConfig+0x10e>
 80012f4:	4baf      	ldr	r3, [pc, #700]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001300:	d155      	bne.n	80013ae <HAL_RCC_OscConfig+0x10e>
 8001302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001306:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800130e:	fa93 f3a3 	rbit	r3, r3
 8001312:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001316:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	095b      	lsrs	r3, r3, #5
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d102      	bne.n	8001334 <HAL_RCC_OscConfig+0x94>
 800132e:	4ba1      	ldr	r3, [pc, #644]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	e015      	b.n	8001360 <HAL_RCC_OscConfig+0xc0>
 8001334:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001338:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001350:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800135c:	4b95      	ldr	r3, [pc, #596]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001364:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001368:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800136c:	fa92 f2a2 	rbit	r2, r2
 8001370:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001374:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001378:	fab2 f282 	clz	r2, r2
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	f042 0220 	orr.w	r2, r2, #32
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	f002 021f 	and.w	r2, r2, #31
 8001388:	2101      	movs	r1, #1
 800138a:	fa01 f202 	lsl.w	r2, r1, r2
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 8111 	beq.w	80015b8 <HAL_RCC_OscConfig+0x318>
 8001396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800139a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 8108 	bne.w	80015b8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	f000 bfc6 	b.w	800233a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x12e>
 80013c0:	4b7c      	ldr	r3, [pc, #496]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a7b      	ldr	r2, [pc, #492]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 80013c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e036      	b.n	800143c <HAL_RCC_OscConfig+0x19c>
 80013ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x158>
 80013de:	4b75      	ldr	r3, [pc, #468]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a74      	ldr	r2, [pc, #464]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 80013e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b72      	ldr	r3, [pc, #456]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a71      	ldr	r2, [pc, #452]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 80013f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e021      	b.n	800143c <HAL_RCC_OscConfig+0x19c>
 80013f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x184>
 800140a:	4b6a      	ldr	r3, [pc, #424]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a69      	ldr	r2, [pc, #420]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b67      	ldr	r3, [pc, #412]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a66      	ldr	r2, [pc, #408]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0x19c>
 8001424:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a62      	ldr	r2, [pc, #392]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a5f      	ldr	r2, [pc, #380]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001440:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d059      	beq.n	8001500 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fc66 	bl	8000d1c <HAL_GetTick>
 8001450:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001456:	f7ff fc61 	bl	8000d1c <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d902      	bls.n	800146c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	f000 bf67 	b.w	800233a <HAL_RCC_OscConfig+0x109a>
 800146c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001470:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001474:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001480:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001484:	fab3 f383 	clz	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d102      	bne.n	800149e <HAL_RCC_OscConfig+0x1fe>
 8001498:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x22a>
 800149e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80014b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80014ba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ce:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80014d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80014d6:	fa92 f2a2 	rbit	r2, r2
 80014da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80014de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80014e2:	fab2 f282 	clz	r2, r2
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	f042 0220 	orr.w	r2, r2, #32
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	f002 021f 	and.w	r2, r2, #31
 80014f2:	2101      	movs	r1, #1
 80014f4:	fa01 f202 	lsl.w	r2, r1, r2
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0ab      	beq.n	8001456 <HAL_RCC_OscConfig+0x1b6>
 80014fe:	e05c      	b.n	80015ba <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fc0c 	bl	8000d1c <HAL_GetTick>
 8001504:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150a:	f7ff fc07 	bl	8000d1c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d902      	bls.n	8001520 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	f000 bf0d 	b.w	800233a <HAL_RCC_OscConfig+0x109a>
 8001520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001524:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800152c:	fa93 f3a3 	rbit	r3, r3
 8001530:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001534:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d102      	bne.n	8001552 <HAL_RCC_OscConfig+0x2b2>
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	e015      	b.n	800157e <HAL_RCC_OscConfig+0x2de>
 8001552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001556:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001566:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800156a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800156e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_RCC_OscConfig+0x314>)
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001582:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001586:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800158a:	fa92 f2a2 	rbit	r2, r2
 800158e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001592:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001596:	fab2 f282 	clz	r2, r2
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	f042 0220 	orr.w	r2, r2, #32
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	f002 021f 	and.w	r2, r2, #31
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ab      	bne.n	800150a <HAL_RCC_OscConfig+0x26a>
 80015b2:	e002      	b.n	80015ba <HAL_RCC_OscConfig+0x31a>
 80015b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 817f 	beq.w	80018ce <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015d0:	4ba7      	ldr	r3, [pc, #668]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00c      	beq.n	80015f6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015dc:	4ba4      	ldr	r3, [pc, #656]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d173      	bne.n	80016d0 <HAL_RCC_OscConfig+0x430>
 80015e8:	4ba1      	ldr	r3, [pc, #644]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80015f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015f4:	d16c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x430>
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001608:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d102      	bne.n	8001626 <HAL_RCC_OscConfig+0x386>
 8001620:	4b93      	ldr	r3, [pc, #588]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	e013      	b.n	800164e <HAL_RCC_OscConfig+0x3ae>
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800163e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800164a:	4b89      	ldr	r3, [pc, #548]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2202      	movs	r2, #2
 8001650:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001654:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001658:	fa92 f2a2 	rbit	r2, r2
 800165c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001660:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001664:	fab2 f282 	clz	r2, r2
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	f042 0220 	orr.w	r2, r2, #32
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	f002 021f 	and.w	r2, r2, #31
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f202 	lsl.w	r2, r1, r2
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <HAL_RCC_OscConfig+0x3f6>
 8001680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001684:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d002      	beq.n	8001696 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	f000 be52 	b.w	800233a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b76      	ldr	r3, [pc, #472]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	21f8      	movs	r1, #248	; 0xf8
 80016ac:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80016b4:	fa91 f1a1 	rbit	r1, r1
 80016b8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80016bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80016c0:	fab1 f181 	clz	r1, r1
 80016c4:	b2c9      	uxtb	r1, r1
 80016c6:	408b      	lsls	r3, r1
 80016c8:	4969      	ldr	r1, [pc, #420]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	e0fe      	b.n	80018ce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 8088 	beq.w	80017f2 <HAL_RCC_OscConfig+0x552>
 80016e2:	2301      	movs	r3, #1
 80016e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80016f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001702:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	461a      	mov	r2, r3
 800170a:	2301      	movs	r3, #1
 800170c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fb05 	bl	8000d1c <HAL_GetTick>
 8001712:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001716:	e00a      	b.n	800172e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001718:	f7ff fb00 	bl	8000d1c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d902      	bls.n	800172e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	f000 be06 	b.w	800233a <HAL_RCC_OscConfig+0x109a>
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001740:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	fab3 f383 	clz	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d102      	bne.n	800175e <HAL_RCC_OscConfig+0x4be>
 8001758:	4b45      	ldr	r3, [pc, #276]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	e013      	b.n	8001786 <HAL_RCC_OscConfig+0x4e6>
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001776:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001782:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	2202      	movs	r2, #2
 8001788:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800178c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001790:	fa92 f2a2 	rbit	r2, r2
 8001794:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001798:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800179c:	fab2 f282 	clz	r2, r2
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f042 0220 	orr.w	r2, r2, #32
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	f002 021f 	and.w	r2, r2, #31
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f202 	lsl.w	r2, r1, r2
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0af      	beq.n	8001718 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	21f8      	movs	r1, #248	; 0xf8
 80017ce:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80017d6:	fa91 f1a1 	rbit	r1, r1
 80017da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80017de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80017e2:	fab1 f181 	clz	r1, r1
 80017e6:	b2c9      	uxtb	r1, r1
 80017e8:	408b      	lsls	r3, r1
 80017ea:	4921      	ldr	r1, [pc, #132]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
 80017f0:	e06d      	b.n	80018ce <HAL_RCC_OscConfig+0x62e>
 80017f2:	2301      	movs	r3, #1
 80017f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001804:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001812:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	461a      	mov	r2, r3
 800181a:	2300      	movs	r3, #0
 800181c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fa7d 	bl	8000d1c <HAL_GetTick>
 8001822:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001828:	f7ff fa78 	bl	8000d1c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d902      	bls.n	800183e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	f000 bd7e 	b.w	800233a <HAL_RCC_OscConfig+0x109a>
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001850:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <HAL_RCC_OscConfig+0x5d4>
 8001868:	4b01      	ldr	r3, [pc, #4]	; (8001870 <HAL_RCC_OscConfig+0x5d0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e016      	b.n	800189c <HAL_RCC_OscConfig+0x5fc>
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	2302      	movs	r3, #2
 8001876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800188c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001898:	4bbf      	ldr	r3, [pc, #764]	; (8001b98 <HAL_RCC_OscConfig+0x8f8>)
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	2202      	movs	r2, #2
 800189e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80018a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80018a6:	fa92 f2a2 	rbit	r2, r2
 80018aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80018ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018b2:	fab2 f282 	clz	r2, r2
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f042 0220 	orr.w	r2, r2, #32
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f002 021f 	and.w	r2, r2, #31
 80018c2:	2101      	movs	r1, #1
 80018c4:	fa01 f202 	lsl.w	r2, r1, r2
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1ac      	bne.n	8001828 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8113 	beq.w	8001b0a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d07c      	beq.n	80019ee <HAL_RCC_OscConfig+0x74e>
 80018f4:	2301      	movs	r3, #1
 80018f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001906:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	4ba2      	ldr	r3, [pc, #648]	; (8001b9c <HAL_RCC_OscConfig+0x8fc>)
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	461a      	mov	r2, r3
 800191a:	2301      	movs	r3, #1
 800191c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7ff f9fd 	bl	8000d1c <HAL_GetTick>
 8001922:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001928:	f7ff f9f8 	bl	8000d1c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d902      	bls.n	800193e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	f000 bcfe 	b.w	800233a <HAL_RCC_OscConfig+0x109a>
 800193e:	2302      	movs	r3, #2
 8001940:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001948:	fa93 f2a3 	rbit	r2, r3
 800194c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001950:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800195e:	2202      	movs	r2, #2
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	fa93 f2a3 	rbit	r2, r3
 8001970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001982:	2202      	movs	r2, #2
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001998:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800199c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	4b7e      	ldr	r3, [pc, #504]	; (8001b98 <HAL_RCC_OscConfig+0x8f8>)
 80019a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019aa:	2102      	movs	r1, #2
 80019ac:	6019      	str	r1, [r3, #0]
 80019ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	fa93 f1a3 	rbit	r1, r3
 80019bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019c4:	6019      	str	r1, [r3, #0]
  return result;
 80019c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d09d      	beq.n	8001928 <HAL_RCC_OscConfig+0x688>
 80019ec:	e08d      	b.n	8001b0a <HAL_RCC_OscConfig+0x86a>
 80019ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a10:	601a      	str	r2, [r3, #0]
  return result;
 8001a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a1a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1c:	fab3 f383 	clz	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_RCC_OscConfig+0x8fc>)
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a30:	f7ff f974 	bl	8000d1c <HAL_GetTick>
 8001a34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3a:	f7ff f96f 	bl	8000d1c <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d902      	bls.n	8001a50 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f000 bc75 	b.w	800233a <HAL_RCC_OscConfig+0x109a>
 8001a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a54:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a58:	2202      	movs	r2, #2
 8001a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	fa93 f2a3 	rbit	r2, r3
 8001a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001aba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x8f8>)
 8001abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ac8:	2102      	movs	r1, #2
 8001aca:	6019      	str	r1, [r3, #0]
 8001acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	fa93 f1a3 	rbit	r1, r3
 8001ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ade:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ae2:	6019      	str	r1, [r3, #0]
  return result;
 8001ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2101      	movs	r1, #1
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d197      	bne.n	8001a3a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 81a5 	beq.w	8001e6a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_RCC_OscConfig+0x8f8>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d116      	bne.n	8001b60 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_OscConfig+0x8f8>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <HAL_RCC_OscConfig+0x8f8>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <HAL_RCC_OscConfig+0x8f8>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_RCC_OscConfig+0x900>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d121      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_RCC_OscConfig+0x900>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_RCC_OscConfig+0x900>)
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b78:	f7ff f8d0 	bl	8000d1c <HAL_GetTick>
 8001b7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	e010      	b.n	8001ba4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b82:	f7ff f8cb 	bl	8000d1c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d908      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e3d1      	b.n	800233a <HAL_RCC_OscConfig+0x109a>
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	10908120 	.word	0x10908120
 8001ba0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b8d      	ldr	r3, [pc, #564]	; (8001ddc <HAL_RCC_OscConfig+0xb3c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0e8      	beq.n	8001b82 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x92e>
 8001bc0:	4b87      	ldr	r3, [pc, #540]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a86      	ldr	r2, [pc, #536]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	e035      	b.n	8001c3a <HAL_RCC_OscConfig+0x99a>
 8001bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x958>
 8001bde:	4b80      	ldr	r3, [pc, #512]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a7f      	ldr	r2, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	4b7d      	ldr	r3, [pc, #500]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a7c      	ldr	r2, [pc, #496]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	e020      	b.n	8001c3a <HAL_RCC_OscConfig+0x99a>
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d10c      	bne.n	8001c22 <HAL_RCC_OscConfig+0x982>
 8001c08:	4b75      	ldr	r3, [pc, #468]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a74      	ldr	r2, [pc, #464]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	4b72      	ldr	r3, [pc, #456]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a71      	ldr	r2, [pc, #452]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6213      	str	r3, [r2, #32]
 8001c20:	e00b      	b.n	8001c3a <HAL_RCC_OscConfig+0x99a>
 8001c22:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a6e      	ldr	r2, [pc, #440]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6213      	str	r3, [r2, #32]
 8001c2e:	4b6c      	ldr	r3, [pc, #432]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a6b      	ldr	r2, [pc, #428]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8081 	beq.w	8001d4e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4c:	f7ff f866 	bl	8000d1c <HAL_GetTick>
 8001c50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c54:	e00b      	b.n	8001c6e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff f861 	bl	8000d1c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e365      	b.n	800233a <HAL_RCC_OscConfig+0x109a>
 8001c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c72:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c76:	2202      	movs	r2, #2
 8001c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	fa93 f2a3 	rbit	r2, r3
 8001c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c96:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001cb4:	601a      	str	r2, [r3, #0]
  return result;
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001cbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	f043 0302 	orr.w	r3, r3, #2
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d102      	bne.n	8001cda <HAL_RCC_OscConfig+0xa3a>
 8001cd4:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	e013      	b.n	8001d02 <HAL_RCC_OscConfig+0xa62>
 8001cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cde:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	fa93 f2a3 	rbit	r2, r3
 8001cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d06:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	6011      	str	r1, [r2, #0]
 8001d0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	fa92 f1a2 	rbit	r1, r2
 8001d1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d20:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001d24:	6011      	str	r1, [r2, #0]
  return result;
 8001d26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d2a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f002 021f 	and.w	r2, r2, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d084      	beq.n	8001c56 <HAL_RCC_OscConfig+0x9b6>
 8001d4c:	e083      	b.n	8001e56 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7fe ffe5 	bl	8000d1c <HAL_GetTick>
 8001d52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d58:	f7fe ffe0 	bl	8000d1c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e2e4      	b.n	800233a <HAL_RCC_OscConfig+0x109a>
 8001d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d74:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d78:	2202      	movs	r2, #2
 8001d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	fa93 f2a3 	rbit	r2, r3
 8001d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d98:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fa93 f2a3 	rbit	r2, r3
 8001dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001db6:	601a      	str	r2, [r3, #0]
  return result;
 8001db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001dc0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	095b      	lsrs	r3, r3, #5
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d106      	bne.n	8001de4 <HAL_RCC_OscConfig+0xb44>
 8001dd6:	4b02      	ldr	r3, [pc, #8]	; (8001de0 <HAL_RCC_OscConfig+0xb40>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	e017      	b.n	8001e0c <HAL_RCC_OscConfig+0xb6c>
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	40021000 	.word	0x40021000
 8001de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001dec:	2202      	movs	r2, #2
 8001dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	fa93 f2a3 	rbit	r2, r3
 8001dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e02:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	4bb3      	ldr	r3, [pc, #716]	; (80020d8 <HAL_RCC_OscConfig+0xe38>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e14:	2102      	movs	r1, #2
 8001e16:	6011      	str	r1, [r2, #0]
 8001e18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	fa92 f1a2 	rbit	r1, r2
 8001e26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e2a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001e2e:	6011      	str	r1, [r2, #0]
  return result;
 8001e30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e34:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	fab2 f282 	clz	r2, r2
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f002 021f 	and.w	r2, r2, #31
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d180      	bne.n	8001d58 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e56:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5e:	4b9e      	ldr	r3, [pc, #632]	; (80020d8 <HAL_RCC_OscConfig+0xe38>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a9d      	ldr	r2, [pc, #628]	; (80020d8 <HAL_RCC_OscConfig+0xe38>)
 8001e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e68:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 825e 	beq.w	8002338 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7c:	4b96      	ldr	r3, [pc, #600]	; (80020d8 <HAL_RCC_OscConfig+0xe38>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	f000 821f 	beq.w	80022c8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	f040 8170 	bne.w	800217c <HAL_RCC_OscConfig+0xedc>
 8001e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ec0:	601a      	str	r2, [r3, #0]
  return result;
 8001ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001eca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ed6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	461a      	mov	r2, r3
 8001ede:	2300      	movs	r3, #0
 8001ee0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7fe ff1b 	bl	8000d1c <HAL_GetTick>
 8001ee6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eea:	e009      	b.n	8001f00 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe ff16 	bl	8000d1c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e21c      	b.n	800233a <HAL_RCC_OscConfig+0x109a>
 8001f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f12:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f2a3 	rbit	r2, r3
 8001f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f20:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f24:	601a      	str	r2, [r3, #0]
  return result;
 8001f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d102      	bne.n	8001f4a <HAL_RCC_OscConfig+0xcaa>
 8001f44:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <HAL_RCC_OscConfig+0xe38>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	e027      	b.n	8001f9a <HAL_RCC_OscConfig+0xcfa>
 8001f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fa93 f2a3 	rbit	r2, r3
 8001f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f82:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f2a3 	rbit	r2, r3
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	4b50      	ldr	r3, [pc, #320]	; (80020d8 <HAL_RCC_OscConfig+0xe38>)
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f9e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001fa2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fa6:	6011      	str	r1, [r2, #0]
 8001fa8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	fa92 f1a2 	rbit	r1, r2
 8001fb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fba:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001fbe:	6011      	str	r1, [r2, #0]
  return result;
 8001fc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fc4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	fab2 f282 	clz	r2, r2
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	f042 0220 	orr.w	r2, r2, #32
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	f002 021f 	and.w	r2, r2, #31
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d182      	bne.n	8001eec <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <HAL_RCC_OscConfig+0xe38>)
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	f023 020f 	bic.w	r2, r3, #15
 8001fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	4937      	ldr	r1, [pc, #220]	; (80020d8 <HAL_RCC_OscConfig+0xe38>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002000:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <HAL_RCC_OscConfig+0xe38>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a19      	ldr	r1, [r3, #32]
 8002014:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002018:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	430b      	orrs	r3, r1
 8002022:	492d      	ldr	r1, [pc, #180]	; (80020d8 <HAL_RCC_OscConfig+0xe38>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
 8002028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002048:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800204c:	601a      	str	r2, [r3, #0]
  return result;
 800204e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002052:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002056:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002062:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	461a      	mov	r2, r3
 800206a:	2301      	movs	r3, #1
 800206c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7fe fe55 	bl	8000d1c <HAL_GetTick>
 8002072:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002076:	e009      	b.n	800208c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe fe50 	bl	8000d1c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e156      	b.n	800233a <HAL_RCC_OscConfig+0x109a>
 800208c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002090:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	fa93 f2a3 	rbit	r2, r3
 80020a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80020b0:	601a      	str	r2, [r3, #0]
  return result;
 80020b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80020ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d105      	bne.n	80020dc <HAL_RCC_OscConfig+0xe3c>
 80020d0:	4b01      	ldr	r3, [pc, #4]	; (80020d8 <HAL_RCC_OscConfig+0xe38>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	e02a      	b.n	800212c <HAL_RCC_OscConfig+0xe8c>
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80020e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	fa93 f2a3 	rbit	r2, r3
 80020f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002106:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800210a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002114:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f2a3 	rbit	r2, r3
 800211e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002122:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	4b86      	ldr	r3, [pc, #536]	; (8002344 <HAL_RCC_OscConfig+0x10a4>)
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002130:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002134:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002138:	6011      	str	r1, [r2, #0]
 800213a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800213e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	fa92 f1a2 	rbit	r1, r2
 8002148:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800214c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002150:	6011      	str	r1, [r2, #0]
  return result;
 8002152:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002156:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f002 021f 	and.w	r2, r2, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f202 	lsl.w	r2, r1, r2
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	f43f af7f 	beq.w	8002078 <HAL_RCC_OscConfig+0xdd8>
 800217a:	e0dd      	b.n	8002338 <HAL_RCC_OscConfig+0x1098>
 800217c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002180:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	fa93 f2a3 	rbit	r2, r3
 8002198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021a0:	601a      	str	r2, [r3, #0]
  return result;
 80021a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	461a      	mov	r2, r3
 80021be:	2300      	movs	r3, #0
 80021c0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7fe fdab 	bl	8000d1c <HAL_GetTick>
 80021c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ca:	e009      	b.n	80021e0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021cc:	f7fe fda6 	bl	8000d1c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0ac      	b.n	800233a <HAL_RCC_OscConfig+0x109a>
 80021e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80021e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fa93 f2a3 	rbit	r2, r3
 80021fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002200:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002204:	601a      	str	r2, [r3, #0]
  return result;
 8002206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800220e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d102      	bne.n	800222a <HAL_RCC_OscConfig+0xf8a>
 8002224:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCC_OscConfig+0x10a4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	e027      	b.n	800227a <HAL_RCC_OscConfig+0xfda>
 800222a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002232:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002262:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002270:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_RCC_OscConfig+0x10a4>)
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800227e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002282:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002286:	6011      	str	r1, [r2, #0]
 8002288:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800228c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	fa92 f1a2 	rbit	r1, r2
 8002296:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800229a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800229e:	6011      	str	r1, [r2, #0]
  return result;
 80022a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022a4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	fab2 f282 	clz	r2, r2
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	f042 0220 	orr.w	r2, r2, #32
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	f002 021f 	and.w	r2, r2, #31
 80022ba:	2101      	movs	r1, #1
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d182      	bne.n	80021cc <HAL_RCC_OscConfig+0xf2c>
 80022c6:	e037      	b.n	8002338 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e02e      	b.n	800233a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_OscConfig+0x10a4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <HAL_RCC_OscConfig+0x10a4>)
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80022f0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80022f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	429a      	cmp	r2, r3
 8002302:	d117      	bne.n	8002334 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002304:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002308:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800230c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002310:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002318:	429a      	cmp	r2, r3
 800231a:	d10b      	bne.n	8002334 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800231c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002320:	f003 020f 	and.w	r2, r3, #15
 8002324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002328:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000

08002348 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b09e      	sub	sp, #120	; 0x78
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e162      	b.n	8002626 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b90      	ldr	r3, [pc, #576]	; (80025a4 <HAL_RCC_ClockConfig+0x25c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d910      	bls.n	8002390 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b8d      	ldr	r3, [pc, #564]	; (80025a4 <HAL_RCC_ClockConfig+0x25c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0207 	bic.w	r2, r3, #7
 8002376:	498b      	ldr	r1, [pc, #556]	; (80025a4 <HAL_RCC_ClockConfig+0x25c>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b89      	ldr	r3, [pc, #548]	; (80025a4 <HAL_RCC_ClockConfig+0x25c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e14a      	b.n	8002626 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b82      	ldr	r3, [pc, #520]	; (80025a8 <HAL_RCC_ClockConfig+0x260>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	497f      	ldr	r1, [pc, #508]	; (80025a8 <HAL_RCC_ClockConfig+0x260>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80dc 	beq.w	8002574 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d13c      	bne.n	800243e <HAL_RCC_ClockConfig+0xf6>
 80023c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d102      	bne.n	80023ee <HAL_RCC_ClockConfig+0xa6>
 80023e8:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_RCC_ClockConfig+0x260>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	e00f      	b.n	800240e <HAL_RCC_ClockConfig+0xc6>
 80023ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	667b      	str	r3, [r7, #100]	; 0x64
 80023fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002400:	663b      	str	r3, [r7, #96]	; 0x60
 8002402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <HAL_RCC_ClockConfig+0x260>)
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002412:	65ba      	str	r2, [r7, #88]	; 0x58
 8002414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002416:	fa92 f2a2 	rbit	r2, r2
 800241a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800241c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800241e:	fab2 f282 	clz	r2, r2
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f042 0220 	orr.w	r2, r2, #32
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	f002 021f 	and.w	r2, r2, #31
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d17b      	bne.n	8002532 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0f3      	b.n	8002626 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d13c      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x178>
 8002446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_RCC_ClockConfig+0x128>
 800246a:	4b4f      	ldr	r3, [pc, #316]	; (80025a8 <HAL_RCC_ClockConfig+0x260>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	e00f      	b.n	8002490 <HAL_RCC_ClockConfig+0x148>
 8002470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002474:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	647b      	str	r3, [r7, #68]	; 0x44
 800247e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248c:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <HAL_RCC_ClockConfig+0x260>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002494:	63ba      	str	r2, [r7, #56]	; 0x38
 8002496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002498:	fa92 f2a2 	rbit	r2, r2
 800249c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800249e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a0:	fab2 f282 	clz	r2, r2
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	f042 0220 	orr.w	r2, r2, #32
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	f002 021f 	and.w	r2, r2, #31
 80024b0:	2101      	movs	r1, #1
 80024b2:	fa01 f202 	lsl.w	r2, r1, r2
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d13a      	bne.n	8002532 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0b2      	b.n	8002626 <HAL_RCC_ClockConfig+0x2de>
 80024c0:	2302      	movs	r3, #2
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d102      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x1a0>
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_RCC_ClockConfig+0x260>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	e00d      	b.n	8002504 <HAL_RCC_ClockConfig+0x1bc>
 80024e8:	2302      	movs	r3, #2
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
 80024f4:	2302      	movs	r3, #2
 80024f6:	623b      	str	r3, [r7, #32]
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_RCC_ClockConfig+0x260>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	2202      	movs	r2, #2
 8002506:	61ba      	str	r2, [r7, #24]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	fa92 f2a2 	rbit	r2, r2
 800250e:	617a      	str	r2, [r7, #20]
  return result;
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	fab2 f282 	clz	r2, r2
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f002 021f 	and.w	r2, r2, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f202 	lsl.w	r2, r1, r2
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e079      	b.n	8002626 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_ClockConfig+0x260>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f023 0203 	bic.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	491a      	ldr	r1, [pc, #104]	; (80025a8 <HAL_RCC_ClockConfig+0x260>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002544:	f7fe fbea 	bl	8000d1c <HAL_GetTick>
 8002548:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7fe fbe6 	bl	8000d1c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e061      	b.n	8002626 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_ClockConfig+0x260>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 020c 	and.w	r2, r3, #12
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	429a      	cmp	r2, r3
 8002572:	d1eb      	bne.n	800254c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_ClockConfig+0x25c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d214      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_RCC_ClockConfig+0x25c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	4906      	ldr	r1, [pc, #24]	; (80025a4 <HAL_RCC_ClockConfig+0x25c>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_RCC_ClockConfig+0x25c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e040      	b.n	8002626 <HAL_RCC_ClockConfig+0x2de>
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_ClockConfig+0x2e8>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	491a      	ldr	r1, [pc, #104]	; (8002630 <HAL_RCC_ClockConfig+0x2e8>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d6:	4b16      	ldr	r3, [pc, #88]	; (8002630 <HAL_RCC_ClockConfig+0x2e8>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4912      	ldr	r1, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x2e8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025ea:	f000 f829 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025ee:	4601      	mov	r1, r0
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <HAL_RCC_ClockConfig+0x2e8>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025f8:	22f0      	movs	r2, #240	; 0xf0
 80025fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	fa92 f2a2 	rbit	r2, r2
 8002602:	60fa      	str	r2, [r7, #12]
  return result;
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	fab2 f282 	clz	r2, r2
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	40d3      	lsrs	r3, r2
 800260e:	4a09      	ldr	r2, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x2ec>)
 8002610:	5cd3      	ldrb	r3, [r2, r3]
 8002612:	fa21 f303 	lsr.w	r3, r1, r3
 8002616:	4a08      	ldr	r2, [pc, #32]	; (8002638 <HAL_RCC_ClockConfig+0x2f0>)
 8002618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <HAL_RCC_ClockConfig+0x2f4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fa7c 	bl	8000b1c <HAL_InitTick>
  
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3778      	adds	r7, #120	; 0x78
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	08006e98 	.word	0x08006e98
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b08b      	sub	sp, #44	; 0x2c
 8002644:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800265a:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_RCC_GetSysClockFreq+0xc4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b04      	cmp	r3, #4
 8002668:	d002      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x30>
 800266a:	2b08      	cmp	r3, #8
 800266c:	d003      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x36>
 800266e:	e03f      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002672:	623b      	str	r3, [r7, #32]
      break;
 8002674:	e03f      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800267c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002680:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	fa92 f2a2 	rbit	r2, r2
 8002688:	607a      	str	r2, [r7, #4]
  return result;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	fab2 f282 	clz	r2, r2
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	40d3      	lsrs	r3, r2
 8002694:	4a1d      	ldr	r2, [pc, #116]	; (800270c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_RCC_GetSysClockFreq+0xc4>)
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	220f      	movs	r2, #15
 80026a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	fa92 f2a2 	rbit	r2, r2
 80026ac:	60fa      	str	r2, [r7, #12]
  return result;
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	fab2 f282 	clz	r2, r2
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	40d3      	lsrs	r3, r2
 80026b8:	4a15      	ldr	r2, [pc, #84]	; (8002710 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026c8:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
 80026d8:	e007      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026da:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	623b      	str	r3, [r7, #32]
      break;
 80026ee:	e002      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026f2:	623b      	str	r3, [r7, #32]
      break;
 80026f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f6:	6a3b      	ldr	r3, [r7, #32]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	372c      	adds	r7, #44	; 0x2c
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40021000 	.word	0x40021000
 8002708:	007a1200 	.word	0x007a1200
 800270c:	08006eb0 	.word	0x08006eb0
 8002710:	08006ec0 	.word	0x08006ec0

08002714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_RCC_GetHCLKFreq+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000000 	.word	0x20000000

0800272c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002732:	f7ff ffef 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 8002736:	4601      	mov	r1, r0
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002740:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002744:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	fa92 f2a2 	rbit	r2, r2
 800274c:	603a      	str	r2, [r7, #0]
  return result;
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	fab2 f282 	clz	r2, r2
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	40d3      	lsrs	r3, r2
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_RCC_GetPCLK1Freq+0x40>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	08006ea8 	.word	0x08006ea8

08002770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002776:	f7ff ffcd 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 800277a:	4601      	mov	r1, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002784:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002788:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	fa92 f2a2 	rbit	r2, r2
 8002790:	603a      	str	r2, [r7, #0]
  return result;
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	fab2 f282 	clz	r2, r2
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	40d3      	lsrs	r3, r2
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800279e:	5cd3      	ldrb	r3, [r2, r3]
 80027a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	08006ea8 	.word	0x08006ea8

080027b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	220f      	movs	r2, #15
 80027c2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_RCC_GetClockConfig+0x5c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	08db      	lsrs	r3, r3, #3
 80027ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80027f6:	4b07      	ldr	r3, [pc, #28]	; (8002814 <HAL_RCC_GetClockConfig+0x60>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0207 	and.w	r2, r3, #7
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	601a      	str	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	40022000 	.word	0x40022000

08002818 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b092      	sub	sp, #72	; 0x48
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002828:	2300      	movs	r3, #0
 800282a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80d4 	beq.w	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283c:	4b4e      	ldr	r3, [pc, #312]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10e      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	4b4b      	ldr	r3, [pc, #300]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4a4a      	ldr	r2, [pc, #296]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002852:	61d3      	str	r3, [r2, #28]
 8002854:	4b48      	ldr	r3, [pc, #288]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002860:	2301      	movs	r3, #1
 8002862:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b45      	ldr	r3, [pc, #276]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b42      	ldr	r3, [pc, #264]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a41      	ldr	r2, [pc, #260]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fe fa4d 	bl	8000d1c <HAL_GetTick>
 8002882:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7fe fa49 	bl	8000d1c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e1d6      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b38      	ldr	r3, [pc, #224]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028a4:	4b34      	ldr	r3, [pc, #208]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8084 	beq.w	80029be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d07c      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c4:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	461a      	mov	r2, r3
 80028ee:	2301      	movs	r3, #1
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	461a      	mov	r2, r3
 8002912:	2300      	movs	r3, #0
 8002914:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002916:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800291c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d04b      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe f9f9 	bl	8000d1c <HAL_GetTick>
 800292a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe f9f5 	bl	8000d1c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	; 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e180      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002944:	2302      	movs	r3, #2
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
 8002950:	2302      	movs	r3, #2
 8002952:	623b      	str	r3, [r7, #32]
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	61fb      	str	r3, [r7, #28]
  return result;
 800295c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d108      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002972:	4b01      	ldr	r3, [pc, #4]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	e00d      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002978:	40021000 	.word	0x40021000
 800297c:	40007000 	.word	0x40007000
 8002980:	10908100 	.word	0x10908100
 8002984:	2302      	movs	r3, #2
 8002986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	4b9a      	ldr	r3, [pc, #616]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2202      	movs	r2, #2
 8002996:	613a      	str	r2, [r7, #16]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	fa92 f2a2 	rbit	r2, r2
 800299e:	60fa      	str	r2, [r7, #12]
  return result;
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	fab2 f282 	clz	r2, r2
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	f002 021f 	and.w	r2, r2, #31
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f202 	lsl.w	r2, r1, r2
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0b7      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029be:	4b8f      	ldr	r3, [pc, #572]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	498c      	ldr	r1, [pc, #560]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d8:	4b88      	ldr	r3, [pc, #544]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	4a87      	ldr	r2, [pc, #540]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029f0:	4b82      	ldr	r3, [pc, #520]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	f023 0203 	bic.w	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	497f      	ldr	r1, [pc, #508]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a0e:	4b7b      	ldr	r3, [pc, #492]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	4978      	ldr	r1, [pc, #480]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a2c:	4b73      	ldr	r3, [pc, #460]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	4970      	ldr	r1, [pc, #448]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a4a:	4b6c      	ldr	r3, [pc, #432]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f023 0210 	bic.w	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4969      	ldr	r1, [pc, #420]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a68:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	4961      	ldr	r1, [pc, #388]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a86:	4b5d      	ldr	r3, [pc, #372]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f023 0220 	bic.w	r2, r3, #32
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	495a      	ldr	r1, [pc, #360]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aa4:	4b55      	ldr	r3, [pc, #340]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	4952      	ldr	r1, [pc, #328]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ac2:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	494b      	ldr	r1, [pc, #300]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ae0:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	4943      	ldr	r1, [pc, #268]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002afe:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	493c      	ldr	r1, [pc, #240]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b1c:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	4934      	ldr	r1, [pc, #208]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b3a:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	492d      	ldr	r1, [pc, #180]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b64:	4925      	ldr	r1, [pc, #148]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	491e      	ldr	r1, [pc, #120]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	4916      	ldr	r1, [pc, #88]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	490f      	ldr	r1, [pc, #60]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	4907      	ldr	r1, [pc, #28]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00c      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002bee:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	e002      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c02:	4913      	ldr	r1, [pc, #76]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c20:	490b      	ldr	r1, [pc, #44]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3e:	4904      	ldr	r1, [pc, #16]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3748      	adds	r7, #72	; 0x48
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000

08002c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e049      	b.n	8002cfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fd fee6 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f000 fab6 	bl	8003204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d001      	beq.n	8002d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e04f      	b.n	8002dbc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01d      	beq.n	8002d7a <HAL_TIM_Base_Start_IT+0x76>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d46:	d018      	beq.n	8002d7a <HAL_TIM_Base_Start_IT+0x76>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1f      	ldr	r2, [pc, #124]	; (8002dcc <HAL_TIM_Base_Start_IT+0xc8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_TIM_Base_Start_IT+0x76>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00e      	beq.n	8002d7a <HAL_TIM_Base_Start_IT+0x76>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_TIM_Base_Start_IT+0x76>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_TIM_Base_Start_IT+0x76>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_TIM_Base_Start_IT+0xd8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d115      	bne.n	8002da6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b06      	cmp	r3, #6
 8002d8a:	d015      	beq.n	8002db8 <HAL_TIM_Base_Start_IT+0xb4>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d92:	d011      	beq.n	8002db8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da4:	e008      	b.n	8002db8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e000      	b.n	8002dba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800
 8002dd4:	40013400 	.word	0x40013400
 8002dd8:	40014000 	.word	0x40014000
 8002ddc:	40015000 	.word	0x40015000
 8002de0:	00010007 	.word	0x00010007

08002de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d122      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d11b      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0202 	mvn.w	r2, #2
 8002e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f9ce 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8002e2c:	e005      	b.n	8002e3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f9c0 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f9d1 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d122      	bne.n	8002e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d11b      	bne.n	8002e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0204 	mvn.w	r2, #4
 8002e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f9a4 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8002e80:	e005      	b.n	8002e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f996 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f9a7 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d122      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d11b      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0208 	mvn.w	r2, #8
 8002eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f97a 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8002ed4:	e005      	b.n	8002ee2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f96c 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f97d 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d122      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d11b      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0210 	mvn.w	r2, #16
 8002f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2208      	movs	r2, #8
 8002f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f950 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f942 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f953 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10e      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d107      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0201 	mvn.w	r2, #1
 8002f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd fd32 	bl	80009cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b80      	cmp	r3, #128	; 0x80
 8002f74:	d10e      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f80:	2b80      	cmp	r3, #128	; 0x80
 8002f82:	d107      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fb06 	bl	80035a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa2:	d10e      	bne.n	8002fc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b80      	cmp	r3, #128	; 0x80
 8002fb0:	d107      	bne.n	8002fc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 faf9 	bl	80035b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d10e      	bne.n	8002fee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fda:	2b40      	cmp	r3, #64	; 0x40
 8002fdc:	d107      	bne.n	8002fee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f901 	bl	80031f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d10e      	bne.n	800301a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b20      	cmp	r3, #32
 8003008:	d107      	bne.n	800301a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f06f 0220 	mvn.w	r2, #32
 8003012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fab9 	bl	800358c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_TIM_ConfigClockSource+0x1c>
 800303a:	2302      	movs	r3, #2
 800303c:	e0b6      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x18a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003060:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003068:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307a:	d03e      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0xd8>
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003080:	f200 8087 	bhi.w	8003192 <HAL_TIM_ConfigClockSource+0x170>
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003088:	f000 8086 	beq.w	8003198 <HAL_TIM_ConfigClockSource+0x176>
 800308c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003090:	d87f      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x170>
 8003092:	2b70      	cmp	r3, #112	; 0x70
 8003094:	d01a      	beq.n	80030cc <HAL_TIM_ConfigClockSource+0xaa>
 8003096:	2b70      	cmp	r3, #112	; 0x70
 8003098:	d87b      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x170>
 800309a:	2b60      	cmp	r3, #96	; 0x60
 800309c:	d050      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0x11e>
 800309e:	2b60      	cmp	r3, #96	; 0x60
 80030a0:	d877      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x170>
 80030a2:	2b50      	cmp	r3, #80	; 0x50
 80030a4:	d03c      	beq.n	8003120 <HAL_TIM_ConfigClockSource+0xfe>
 80030a6:	2b50      	cmp	r3, #80	; 0x50
 80030a8:	d873      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x170>
 80030aa:	2b40      	cmp	r3, #64	; 0x40
 80030ac:	d058      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x13e>
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	d86f      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x170>
 80030b2:	2b30      	cmp	r3, #48	; 0x30
 80030b4:	d064      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x15e>
 80030b6:	2b30      	cmp	r3, #48	; 0x30
 80030b8:	d86b      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x170>
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d060      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x15e>
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d867      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x170>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d05c      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x15e>
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d05a      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x15e>
 80030ca:	e062      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6899      	ldr	r1, [r3, #8]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f000 f9aa 	bl	8003434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	609a      	str	r2, [r3, #8]
      break;
 80030f8:	e04f      	b.n	800319a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6899      	ldr	r1, [r3, #8]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f000 f993 	bl	8003434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800311c:	609a      	str	r2, [r3, #8]
      break;
 800311e:	e03c      	b.n	800319a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	461a      	mov	r2, r3
 800312e:	f000 f907 	bl	8003340 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2150      	movs	r1, #80	; 0x50
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f960 	bl	80033fe <TIM_ITRx_SetConfig>
      break;
 800313e:	e02c      	b.n	800319a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	461a      	mov	r2, r3
 800314e:	f000 f926 	bl	800339e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2160      	movs	r1, #96	; 0x60
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f950 	bl	80033fe <TIM_ITRx_SetConfig>
      break;
 800315e:	e01c      	b.n	800319a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	461a      	mov	r2, r3
 800316e:	f000 f8e7 	bl	8003340 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2140      	movs	r1, #64	; 0x40
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f940 	bl	80033fe <TIM_ITRx_SetConfig>
      break;
 800317e:	e00c      	b.n	800319a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f000 f937 	bl	80033fe <TIM_ITRx_SetConfig>
      break;
 8003190:	e003      	b.n	800319a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
      break;
 8003196:	e000      	b.n	800319a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003198:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a42      	ldr	r2, [pc, #264]	; (8003320 <TIM_Base_SetConfig+0x11c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003222:	d00f      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3f      	ldr	r2, [pc, #252]	; (8003324 <TIM_Base_SetConfig+0x120>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00b      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3e      	ldr	r2, [pc, #248]	; (8003328 <TIM_Base_SetConfig+0x124>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d007      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3d      	ldr	r2, [pc, #244]	; (800332c <TIM_Base_SetConfig+0x128>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3c      	ldr	r2, [pc, #240]	; (8003330 <TIM_Base_SetConfig+0x12c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d108      	bne.n	8003256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a31      	ldr	r2, [pc, #196]	; (8003320 <TIM_Base_SetConfig+0x11c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01f      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d01b      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a2e      	ldr	r2, [pc, #184]	; (8003324 <TIM_Base_SetConfig+0x120>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d017      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <TIM_Base_SetConfig+0x124>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2c      	ldr	r2, [pc, #176]	; (800332c <TIM_Base_SetConfig+0x128>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00f      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2c      	ldr	r2, [pc, #176]	; (8003334 <TIM_Base_SetConfig+0x130>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2b      	ldr	r2, [pc, #172]	; (8003338 <TIM_Base_SetConfig+0x134>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2a      	ldr	r2, [pc, #168]	; (800333c <TIM_Base_SetConfig+0x138>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x9a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a25      	ldr	r2, [pc, #148]	; (8003330 <TIM_Base_SetConfig+0x12c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a12      	ldr	r2, [pc, #72]	; (8003320 <TIM_Base_SetConfig+0x11c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <TIM_Base_SetConfig+0x100>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a13      	ldr	r2, [pc, #76]	; (800332c <TIM_Base_SetConfig+0x128>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00f      	beq.n	8003304 <TIM_Base_SetConfig+0x100>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <TIM_Base_SetConfig+0x130>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00b      	beq.n	8003304 <TIM_Base_SetConfig+0x100>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a12      	ldr	r2, [pc, #72]	; (8003338 <TIM_Base_SetConfig+0x134>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d007      	beq.n	8003304 <TIM_Base_SetConfig+0x100>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a11      	ldr	r2, [pc, #68]	; (800333c <TIM_Base_SetConfig+0x138>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d003      	beq.n	8003304 <TIM_Base_SetConfig+0x100>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <TIM_Base_SetConfig+0x12c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d103      	bne.n	800330c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	615a      	str	r2, [r3, #20]
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800
 800332c:	40013400 	.word	0x40013400
 8003330:	40015000 	.word	0x40015000
 8003334:	40014000 	.word	0x40014000
 8003338:	40014400 	.word	0x40014400
 800333c:	40014800 	.word	0x40014800

08003340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f023 0201 	bic.w	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800336a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f023 030a 	bic.w	r3, r3, #10
 800337c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	621a      	str	r2, [r3, #32]
}
 8003392:	bf00      	nop
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800339e:	b480      	push	{r7}
 80033a0:	b087      	sub	sp, #28
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0210 	bic.w	r2, r3, #16
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	031b      	lsls	r3, r3, #12
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	621a      	str	r2, [r3, #32]
}
 80033f2:	bf00      	nop
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033fe:	b480      	push	{r7}
 8003400:	b085      	sub	sp, #20
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	f043 0307 	orr.w	r3, r3, #7
 8003420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	609a      	str	r2, [r3, #8]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800344e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	021a      	lsls	r2, r3, #8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	431a      	orrs	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	609a      	str	r2, [r3, #8]
}
 8003468:	bf00      	nop
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003488:	2302      	movs	r3, #2
 800348a:	e06d      	b.n	8003568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a30      	ldr	r2, [pc, #192]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d009      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2f      	ldr	r2, [pc, #188]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d004      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2d      	ldr	r2, [pc, #180]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d108      	bne.n	80034dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d01d      	beq.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003508:	d018      	beq.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d013      	beq.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00e      	beq.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a15      	ldr	r2, [pc, #84]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d009      	beq.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a16      	ldr	r2, [pc, #88]	; (8003588 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d004      	beq.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a11      	ldr	r2, [pc, #68]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d10c      	bne.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	4313      	orrs	r3, r2
 800354c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40013400 	.word	0x40013400
 800357c:	40015000 	.word	0x40015000
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40014000 	.word	0x40014000

0800358c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e040      	b.n	800365c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd fa54 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	; 0x24
 80035f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f82c 	bl	8003664 <UART_SetConfig>
 800360c:	4603      	mov	r3, r0
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e022      	b.n	800365c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f9f4 	bl	8003a0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fa7b 	bl	8003b50 <UART_CheckIdleState>
 800365a:	4603      	mov	r3, r0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4b92      	ldr	r3, [pc, #584]	; (80038d8 <UART_SetConfig+0x274>)
 8003690:	4013      	ands	r3, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	6979      	ldr	r1, [r7, #20]
 8003698:	430b      	orrs	r3, r1
 800369a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a80      	ldr	r2, [pc, #512]	; (80038dc <UART_SetConfig+0x278>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d120      	bne.n	8003722 <UART_SetConfig+0xbe>
 80036e0:	4b7f      	ldr	r3, [pc, #508]	; (80038e0 <UART_SetConfig+0x27c>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d817      	bhi.n	800371c <UART_SetConfig+0xb8>
 80036ec:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <UART_SetConfig+0x90>)
 80036ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f2:	bf00      	nop
 80036f4:	08003705 	.word	0x08003705
 80036f8:	08003711 	.word	0x08003711
 80036fc:	08003717 	.word	0x08003717
 8003700:	0800370b 	.word	0x0800370b
 8003704:	2301      	movs	r3, #1
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e0b5      	b.n	8003876 <UART_SetConfig+0x212>
 800370a:	2302      	movs	r3, #2
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	e0b2      	b.n	8003876 <UART_SetConfig+0x212>
 8003710:	2304      	movs	r3, #4
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	e0af      	b.n	8003876 <UART_SetConfig+0x212>
 8003716:	2308      	movs	r3, #8
 8003718:	77fb      	strb	r3, [r7, #31]
 800371a:	e0ac      	b.n	8003876 <UART_SetConfig+0x212>
 800371c:	2310      	movs	r3, #16
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e0a9      	b.n	8003876 <UART_SetConfig+0x212>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6f      	ldr	r2, [pc, #444]	; (80038e4 <UART_SetConfig+0x280>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d124      	bne.n	8003776 <UART_SetConfig+0x112>
 800372c:	4b6c      	ldr	r3, [pc, #432]	; (80038e0 <UART_SetConfig+0x27c>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003734:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003738:	d011      	beq.n	800375e <UART_SetConfig+0xfa>
 800373a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800373e:	d817      	bhi.n	8003770 <UART_SetConfig+0x10c>
 8003740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003744:	d011      	beq.n	800376a <UART_SetConfig+0x106>
 8003746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800374a:	d811      	bhi.n	8003770 <UART_SetConfig+0x10c>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <UART_SetConfig+0xf4>
 8003750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003754:	d006      	beq.n	8003764 <UART_SetConfig+0x100>
 8003756:	e00b      	b.n	8003770 <UART_SetConfig+0x10c>
 8003758:	2300      	movs	r3, #0
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e08b      	b.n	8003876 <UART_SetConfig+0x212>
 800375e:	2302      	movs	r3, #2
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e088      	b.n	8003876 <UART_SetConfig+0x212>
 8003764:	2304      	movs	r3, #4
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e085      	b.n	8003876 <UART_SetConfig+0x212>
 800376a:	2308      	movs	r3, #8
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e082      	b.n	8003876 <UART_SetConfig+0x212>
 8003770:	2310      	movs	r3, #16
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e07f      	b.n	8003876 <UART_SetConfig+0x212>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a5b      	ldr	r2, [pc, #364]	; (80038e8 <UART_SetConfig+0x284>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d124      	bne.n	80037ca <UART_SetConfig+0x166>
 8003780:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <UART_SetConfig+0x27c>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003788:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800378c:	d011      	beq.n	80037b2 <UART_SetConfig+0x14e>
 800378e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003792:	d817      	bhi.n	80037c4 <UART_SetConfig+0x160>
 8003794:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003798:	d011      	beq.n	80037be <UART_SetConfig+0x15a>
 800379a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800379e:	d811      	bhi.n	80037c4 <UART_SetConfig+0x160>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <UART_SetConfig+0x148>
 80037a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037a8:	d006      	beq.n	80037b8 <UART_SetConfig+0x154>
 80037aa:	e00b      	b.n	80037c4 <UART_SetConfig+0x160>
 80037ac:	2300      	movs	r3, #0
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e061      	b.n	8003876 <UART_SetConfig+0x212>
 80037b2:	2302      	movs	r3, #2
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e05e      	b.n	8003876 <UART_SetConfig+0x212>
 80037b8:	2304      	movs	r3, #4
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e05b      	b.n	8003876 <UART_SetConfig+0x212>
 80037be:	2308      	movs	r3, #8
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e058      	b.n	8003876 <UART_SetConfig+0x212>
 80037c4:	2310      	movs	r3, #16
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e055      	b.n	8003876 <UART_SetConfig+0x212>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a47      	ldr	r2, [pc, #284]	; (80038ec <UART_SetConfig+0x288>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d124      	bne.n	800381e <UART_SetConfig+0x1ba>
 80037d4:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <UART_SetConfig+0x27c>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80037dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037e0:	d011      	beq.n	8003806 <UART_SetConfig+0x1a2>
 80037e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037e6:	d817      	bhi.n	8003818 <UART_SetConfig+0x1b4>
 80037e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ec:	d011      	beq.n	8003812 <UART_SetConfig+0x1ae>
 80037ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037f2:	d811      	bhi.n	8003818 <UART_SetConfig+0x1b4>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <UART_SetConfig+0x19c>
 80037f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037fc:	d006      	beq.n	800380c <UART_SetConfig+0x1a8>
 80037fe:	e00b      	b.n	8003818 <UART_SetConfig+0x1b4>
 8003800:	2300      	movs	r3, #0
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e037      	b.n	8003876 <UART_SetConfig+0x212>
 8003806:	2302      	movs	r3, #2
 8003808:	77fb      	strb	r3, [r7, #31]
 800380a:	e034      	b.n	8003876 <UART_SetConfig+0x212>
 800380c:	2304      	movs	r3, #4
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e031      	b.n	8003876 <UART_SetConfig+0x212>
 8003812:	2308      	movs	r3, #8
 8003814:	77fb      	strb	r3, [r7, #31]
 8003816:	e02e      	b.n	8003876 <UART_SetConfig+0x212>
 8003818:	2310      	movs	r3, #16
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e02b      	b.n	8003876 <UART_SetConfig+0x212>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a33      	ldr	r2, [pc, #204]	; (80038f0 <UART_SetConfig+0x28c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d124      	bne.n	8003872 <UART_SetConfig+0x20e>
 8003828:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <UART_SetConfig+0x27c>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003830:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003834:	d011      	beq.n	800385a <UART_SetConfig+0x1f6>
 8003836:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800383a:	d817      	bhi.n	800386c <UART_SetConfig+0x208>
 800383c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003840:	d011      	beq.n	8003866 <UART_SetConfig+0x202>
 8003842:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003846:	d811      	bhi.n	800386c <UART_SetConfig+0x208>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <UART_SetConfig+0x1f0>
 800384c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003850:	d006      	beq.n	8003860 <UART_SetConfig+0x1fc>
 8003852:	e00b      	b.n	800386c <UART_SetConfig+0x208>
 8003854:	2300      	movs	r3, #0
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e00d      	b.n	8003876 <UART_SetConfig+0x212>
 800385a:	2302      	movs	r3, #2
 800385c:	77fb      	strb	r3, [r7, #31]
 800385e:	e00a      	b.n	8003876 <UART_SetConfig+0x212>
 8003860:	2304      	movs	r3, #4
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e007      	b.n	8003876 <UART_SetConfig+0x212>
 8003866:	2308      	movs	r3, #8
 8003868:	77fb      	strb	r3, [r7, #31]
 800386a:	e004      	b.n	8003876 <UART_SetConfig+0x212>
 800386c:	2310      	movs	r3, #16
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e001      	b.n	8003876 <UART_SetConfig+0x212>
 8003872:	2310      	movs	r3, #16
 8003874:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387e:	d16b      	bne.n	8003958 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003880:	7ffb      	ldrb	r3, [r7, #31]
 8003882:	2b08      	cmp	r3, #8
 8003884:	d838      	bhi.n	80038f8 <UART_SetConfig+0x294>
 8003886:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0x228>)
 8003888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038f9 	.word	0x080038f9
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038f9 	.word	0x080038f9
 80038a4:	080038f9 	.word	0x080038f9
 80038a8:	080038f9 	.word	0x080038f9
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7fe ff3c 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e024      	b.n	8003902 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7fe ff5a 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e020      	b.n	8003902 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <UART_SetConfig+0x290>)
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e01d      	b.n	8003902 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe febb 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80038ca:	61b8      	str	r0, [r7, #24]
        break;
 80038cc:	e019      	b.n	8003902 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e015      	b.n	8003902 <UART_SetConfig+0x29e>
 80038d6:	bf00      	nop
 80038d8:	efff69f3 	.word	0xefff69f3
 80038dc:	40013800 	.word	0x40013800
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40004400 	.word	0x40004400
 80038e8:	40004800 	.word	0x40004800
 80038ec:	40004c00 	.word	0x40004c00
 80038f0:	40005000 	.word	0x40005000
 80038f4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	77bb      	strb	r3, [r7, #30]
        break;
 8003900:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d073      	beq.n	80039f0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	005a      	lsls	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	441a      	add	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b0f      	cmp	r3, #15
 8003922:	d916      	bls.n	8003952 <UART_SetConfig+0x2ee>
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392a:	d212      	bcs.n	8003952 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	b29b      	uxth	r3, r3
 8003930:	f023 030f 	bic.w	r3, r3, #15
 8003934:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	b29b      	uxth	r3, r3
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	b29a      	uxth	r2, r3
 8003942:	89fb      	ldrh	r3, [r7, #14]
 8003944:	4313      	orrs	r3, r2
 8003946:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	89fa      	ldrh	r2, [r7, #14]
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	e04e      	b.n	80039f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	77bb      	strb	r3, [r7, #30]
 8003956:	e04b      	b.n	80039f0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003958:	7ffb      	ldrb	r3, [r7, #31]
 800395a:	2b08      	cmp	r3, #8
 800395c:	d827      	bhi.n	80039ae <UART_SetConfig+0x34a>
 800395e:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <UART_SetConfig+0x300>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	08003989 	.word	0x08003989
 8003968:	08003991 	.word	0x08003991
 800396c:	08003999 	.word	0x08003999
 8003970:	080039af 	.word	0x080039af
 8003974:	0800399f 	.word	0x0800399f
 8003978:	080039af 	.word	0x080039af
 800397c:	080039af 	.word	0x080039af
 8003980:	080039af 	.word	0x080039af
 8003984:	080039a7 	.word	0x080039a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003988:	f7fe fed0 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 800398c:	61b8      	str	r0, [r7, #24]
        break;
 800398e:	e013      	b.n	80039b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003990:	f7fe feee 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 8003994:	61b8      	str	r0, [r7, #24]
        break;
 8003996:	e00f      	b.n	80039b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <UART_SetConfig+0x3a4>)
 800399a:	61bb      	str	r3, [r7, #24]
        break;
 800399c:	e00c      	b.n	80039b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800399e:	f7fe fe4f 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80039a2:	61b8      	str	r0, [r7, #24]
        break;
 80039a4:	e008      	b.n	80039b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039aa:	61bb      	str	r3, [r7, #24]
        break;
 80039ac:	e004      	b.n	80039b8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	77bb      	strb	r3, [r7, #30]
        break;
 80039b6:	bf00      	nop
    }

    if (pclk != 0U)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d018      	beq.n	80039f0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	085a      	lsrs	r2, r3, #1
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	441a      	add	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b0f      	cmp	r3, #15
 80039d6:	d909      	bls.n	80039ec <UART_SetConfig+0x388>
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039de:	d205      	bcs.n	80039ec <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	e001      	b.n	80039f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	007a1200 	.word	0x007a1200

08003a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01a      	beq.n	8003b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0a:	d10a      	bne.n	8003b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b098      	sub	sp, #96	; 0x60
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b60:	f7fd f8dc 	bl	8000d1c <HAL_GetTick>
 8003b64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d12e      	bne.n	8003bd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f88c 	bl	8003ca0 <UART_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d021      	beq.n	8003bd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bac:	647b      	str	r3, [r7, #68]	; 0x44
 8003bae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bb4:	e841 2300 	strex	r3, r2, [r1]
 8003bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e6      	bne.n	8003b8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e062      	b.n	8003c98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d149      	bne.n	8003c74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be8:	2200      	movs	r2, #0
 8003bea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f856 	bl	8003ca0 <UART_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d03c      	beq.n	8003c74 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	623b      	str	r3, [r7, #32]
   return(result);
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c18:	633b      	str	r3, [r7, #48]	; 0x30
 8003c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e6      	bne.n	8003bfa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c4c:	61fa      	str	r2, [r7, #28]
 8003c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	69b9      	ldr	r1, [r7, #24]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	617b      	str	r3, [r7, #20]
   return(result);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e5      	bne.n	8003c2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e011      	b.n	8003c98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3758      	adds	r7, #88	; 0x58
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	4613      	mov	r3, r2
 8003cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb0:	e049      	b.n	8003d46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb8:	d045      	beq.n	8003d46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cba:	f7fd f82f 	bl	8000d1c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d302      	bcc.n	8003cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e048      	b.n	8003d66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d031      	beq.n	8003d46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d110      	bne.n	8003d12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f838 	bl	8003d6e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2208      	movs	r2, #8
 8003d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e029      	b.n	8003d66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d20:	d111      	bne.n	8003d46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f81e 	bl	8003d6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e00f      	b.n	8003d66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	bf0c      	ite	eq
 8003d56:	2301      	moveq	r3, #1
 8003d58:	2300      	movne	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d0a6      	beq.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b095      	sub	sp, #84	; 0x54
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d94:	643b      	str	r3, [r7, #64]	; 0x40
 8003d96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e6      	bne.n	8003d76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3308      	adds	r3, #8
 8003dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d118      	bne.n	8003e16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f023 0310 	bic.w	r3, r3, #16
 8003df8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6979      	ldr	r1, [r7, #20]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e6      	bne.n	8003de4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e2a:	bf00      	nop
 8003e2c:	3754      	adds	r7, #84	; 0x54
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
	...

08003e38 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e3e:	f3ef 8305 	mrs	r3, IPSR
 8003e42:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4e:	607b      	str	r3, [r7, #4]
  return(result);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <osKernelInitialize+0x32>
 8003e56:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <osKernelInitialize+0x64>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d109      	bne.n	8003e72 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e5e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e62:	603b      	str	r3, [r7, #0]
  return(result);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003e6a:	f06f 0305 	mvn.w	r3, #5
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	e00c      	b.n	8003e8c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <osKernelInitialize+0x64>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d105      	bne.n	8003e86 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003e7a:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <osKernelInitialize+0x64>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e002      	b.n	8003e8c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	200001e4 	.word	0x200001e4

08003ea0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ea6:	f3ef 8305 	mrs	r3, IPSR
 8003eaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb6:	607b      	str	r3, [r7, #4]
  return(result);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <osKernelStart+0x32>
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <osKernelStart+0x64>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d109      	bne.n	8003eda <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8003eca:	603b      	str	r3, [r7, #0]
  return(result);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <osKernelStart+0x3a>
    stat = osErrorISR;
 8003ed2:	f06f 0305 	mvn.w	r3, #5
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e00e      	b.n	8003ef8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <osKernelStart+0x64>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d107      	bne.n	8003ef2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003ee2:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <osKernelStart+0x64>)
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003ee8:	f001 f932 	bl	8005150 <vTaskStartScheduler>
      stat = osOK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e002      	b.n	8003ef8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ef6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200001e4 	.word	0x200001e4

08003f08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b092      	sub	sp, #72	; 0x48
 8003f0c:	af04      	add	r7, sp, #16
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f18:	f3ef 8305 	mrs	r3, IPSR
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8094 	bne.w	800404e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f26:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2a:	623b      	str	r3, [r7, #32]
  return(result);
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 808d 	bne.w	800404e <osThreadNew+0x146>
 8003f34:	4b48      	ldr	r3, [pc, #288]	; (8004058 <osThreadNew+0x150>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d106      	bne.n	8003f4a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8003f40:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f040 8082 	bne.w	800404e <osThreadNew+0x146>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d07e      	beq.n	800404e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003f54:	2318      	movs	r3, #24
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003f58:	2300      	movs	r3, #0
 8003f5a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003f5c:	f107 031b 	add.w	r3, r7, #27
 8003f60:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d045      	beq.n	8003ffa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <osThreadNew+0x74>
        name = attr->name;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <osThreadNew+0x9a>
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	2b38      	cmp	r3, #56	; 0x38
 8003f94:	d805      	bhi.n	8003fa2 <osThreadNew+0x9a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <osThreadNew+0x9e>
        return (NULL);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e054      	b.n	8004050 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00e      	beq.n	8003fdc <osThreadNew+0xd4>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2bbb      	cmp	r3, #187	; 0xbb
 8003fc4:	d90a      	bls.n	8003fdc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <osThreadNew+0xd4>
        mem = 1;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fda:	e010      	b.n	8003ffe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10c      	bne.n	8003ffe <osThreadNew+0xf6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d108      	bne.n	8003ffe <osThreadNew+0xf6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <osThreadNew+0xf6>
          mem = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff8:	e001      	b.n	8003ffe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	2b01      	cmp	r3, #1
 8004002:	d110      	bne.n	8004026 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800400c:	9202      	str	r2, [sp, #8]
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004018:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 feb4 	bl	8004d88 <xTaskCreateStatic>
 8004020:	4603      	mov	r3, r0
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e013      	b.n	800404e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	d110      	bne.n	800404e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	b29a      	uxth	r2, r3
 8004030:	f107 0314 	add.w	r3, r7, #20
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fefe 	bl	8004e40 <xTaskCreate>
 8004044:	4603      	mov	r3, r0
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <osThreadNew+0x146>
          hTask = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800404e:	697b      	ldr	r3, [r7, #20]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3738      	adds	r7, #56	; 0x38
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	200001e4 	.word	0x200001e4

0800405c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004064:	f3ef 8305 	mrs	r3, IPSR
 8004068:	613b      	str	r3, [r7, #16]
  return(result);
 800406a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10f      	bne.n	8004090 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004070:	f3ef 8310 	mrs	r3, PRIMASK
 8004074:	60fb      	str	r3, [r7, #12]
  return(result);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <osDelay+0x34>
 800407c:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <osDelay+0x58>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d109      	bne.n	8004098 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004084:	f3ef 8311 	mrs	r3, BASEPRI
 8004088:	60bb      	str	r3, [r7, #8]
  return(result);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <osDelay+0x3c>
    stat = osErrorISR;
 8004090:	f06f 0305 	mvn.w	r3, #5
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e007      	b.n	80040a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f001 f820 	bl	80050e8 <vTaskDelay>
    }
  }

  return (stat);
 80040a8:	697b      	ldr	r3, [r7, #20]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	200001e4 	.word	0x200001e4

080040b8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f002 f92d 	bl	8006320 <pvTimerGetTimerID>
 80040c6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <TimerCallback+0x22>
    callb->func (callb->arg);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	6852      	ldr	r2, [r2, #4]
 80040d6:	4610      	mov	r0, r2
 80040d8:	4798      	blx	r3
  }
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08e      	sub	sp, #56	; 0x38
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	460b      	mov	r3, r1
 80040f2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040f8:	f3ef 8305 	mrs	r3, IPSR
 80040fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80040fe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8004100:	2b00      	cmp	r3, #0
 8004102:	d16a      	bne.n	80041da <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004104:	f3ef 8310 	mrs	r3, PRIMASK
 8004108:	617b      	str	r3, [r7, #20]
  return(result);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d164      	bne.n	80041da <osTimerNew+0xf6>
 8004110:	4b34      	ldr	r3, [pc, #208]	; (80041e4 <osTimerNew+0x100>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d105      	bne.n	8004124 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004118:	f3ef 8311 	mrs	r3, BASEPRI
 800411c:	613b      	str	r3, [r7, #16]
  return(result);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d15a      	bne.n	80041da <osTimerNew+0xf6>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d057      	beq.n	80041da <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800412a:	2008      	movs	r0, #8
 800412c:	f002 fb64 	bl	80067f8 <pvPortMalloc>
 8004130:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d050      	beq.n	80041da <osTimerNew+0xf6>
      callb->func = func;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004144:	7afb      	ldrb	r3, [r7, #11]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <osTimerNew+0x6c>
        reload = pdFALSE;
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
 800414e:	e001      	b.n	8004154 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8004150:	2301      	movs	r3, #1
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8004154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004158:	623b      	str	r3, [r7, #32]
      name = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01c      	beq.n	800419e <osTimerNew+0xba>
        if (attr->name != NULL) {
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <osTimerNew+0x8e>
          name = attr->name;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d006      	beq.n	8004188 <osTimerNew+0xa4>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b2f      	cmp	r3, #47	; 0x2f
 8004180:	d902      	bls.n	8004188 <osTimerNew+0xa4>
          mem = 1;
 8004182:	2301      	movs	r3, #1
 8004184:	623b      	str	r3, [r7, #32]
 8004186:	e00c      	b.n	80041a2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d108      	bne.n	80041a2 <osTimerNew+0xbe>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <osTimerNew+0xbe>
            mem = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	e001      	b.n	80041a2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10c      	bne.n	80041c2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <osTimerNew+0x104>)
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b6:	2101      	movs	r1, #1
 80041b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041ba:	f001 fd78 	bl	8005cae <xTimerCreateStatic>
 80041be:	62b8      	str	r0, [r7, #40]	; 0x28
 80041c0:	e00b      	b.n	80041da <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d108      	bne.n	80041da <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80041c8:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <osTimerNew+0x104>)
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d0:	2101      	movs	r1, #1
 80041d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041d4:	f001 fd4a 	bl	8005c6c <xTimerCreate>
 80041d8:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3730      	adds	r7, #48	; 0x30
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	200001e4 	.word	0x200001e4
 80041e8:	080040b9 	.word	0x080040b9

080041ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4a07      	ldr	r2, [pc, #28]	; (8004218 <vApplicationGetIdleTaskMemory+0x2c>)
 80041fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4a06      	ldr	r2, [pc, #24]	; (800421c <vApplicationGetIdleTaskMemory+0x30>)
 8004202:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2280      	movs	r2, #128	; 0x80
 8004208:	601a      	str	r2, [r3, #0]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	200001e8 	.word	0x200001e8
 800421c:	200002a4 	.word	0x200002a4

08004220 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a07      	ldr	r2, [pc, #28]	; (800424c <vApplicationGetTimerTaskMemory+0x2c>)
 8004230:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4a06      	ldr	r2, [pc, #24]	; (8004250 <vApplicationGetTimerTaskMemory+0x30>)
 8004236:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	200004a4 	.word	0x200004a4
 8004250:	20000560 	.word	0x20000560

08004254 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f103 0208 	add.w	r2, r3, #8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800426c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f103 0208 	add.w	r2, r3, #8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f103 0208 	add.w	r2, r3, #8
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042f6:	b480      	push	{r7}
 80042f8:	b085      	sub	sp, #20
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800430c:	d103      	bne.n	8004316 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	e00c      	b.n	8004330 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3308      	adds	r3, #8
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e002      	b.n	8004324 <vListInsert+0x2e>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	d2f6      	bcs.n	800431e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	601a      	str	r2, [r3, #0]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6892      	ldr	r2, [r2, #8]
 800437e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6852      	ldr	r2, [r2, #4]
 8004388:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d103      	bne.n	800439c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	1e5a      	subs	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043e6:	f002 f8e5 	bl	80065b4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	441a      	add	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	3b01      	subs	r3, #1
 8004418:	68f9      	ldr	r1, [r7, #12]
 800441a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	441a      	add	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	22ff      	movs	r2, #255	; 0xff
 800442a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	22ff      	movs	r2, #255	; 0xff
 8004432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d114      	bne.n	8004466 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01a      	beq.n	800447a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3310      	adds	r3, #16
 8004448:	4618      	mov	r0, r3
 800444a:	f001 f91f 	bl	800568c <xTaskRemoveFromEventList>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d012      	beq.n	800447a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <xQueueGenericReset+0xcc>)
 8004456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	e009      	b.n	800447a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3310      	adds	r3, #16
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fef2 	bl	8004254 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3324      	adds	r3, #36	; 0x24
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff feed 	bl	8004254 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800447a:	f002 f8cb 	bl	8006614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800447e:	2301      	movs	r3, #1
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08e      	sub	sp, #56	; 0x38
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <xQueueGenericCreateStatic+0x52>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <xQueueGenericCreateStatic+0x56>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <xQueueGenericCreateStatic+0x58>
 80044e2:	2300      	movs	r3, #0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	623b      	str	r3, [r7, #32]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <xQueueGenericCreateStatic+0x7e>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <xQueueGenericCreateStatic+0x82>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueGenericCreateStatic+0x84>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	61fb      	str	r3, [r7, #28]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800452a:	2350      	movs	r3, #80	; 0x50
 800452c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b50      	cmp	r3, #80	; 0x50
 8004532:	d00a      	beq.n	800454a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	61bb      	str	r3, [r7, #24]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00d      	beq.n	8004570 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800455c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f805 	bl	800457a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004572:	4618      	mov	r0, r3
 8004574:	3730      	adds	r7, #48	; 0x30
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e002      	b.n	800459c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045a8:	2101      	movs	r1, #1
 80045aa:	69b8      	ldr	r0, [r7, #24]
 80045ac:	f7ff ff06 	bl	80043bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08e      	sub	sp, #56	; 0x38
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045ce:	2300      	movs	r3, #0
 80045d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <xQueueGenericSend+0x32>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d103      	bne.n	8004600 <xQueueGenericSend+0x40>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <xQueueGenericSend+0x44>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <xQueueGenericSend+0x46>
 8004604:	2300      	movs	r3, #0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <xQueueGenericSend+0x60>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d103      	bne.n	800462e <xQueueGenericSend+0x6e>
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <xQueueGenericSend+0x72>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <xQueueGenericSend+0x74>
 8004632:	2300      	movs	r3, #0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <xQueueGenericSend+0x8e>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	623b      	str	r3, [r7, #32]
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800464e:	f001 f9e5 	bl	8005a1c <xTaskGetSchedulerState>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <xQueueGenericSend+0x9e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <xQueueGenericSend+0xa2>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <xQueueGenericSend+0xa4>
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <xQueueGenericSend+0xbe>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	61fb      	str	r3, [r7, #28]
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800467e:	f001 ff99 	bl	80065b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	429a      	cmp	r2, r3
 800468c:	d302      	bcc.n	8004694 <xQueueGenericSend+0xd4>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d129      	bne.n	80046e8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800469a:	f000 fa07 	bl	8004aac <prvCopyDataToQueue>
 800469e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d010      	beq.n	80046ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	3324      	adds	r3, #36	; 0x24
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 ffed 	bl	800568c <xTaskRemoveFromEventList>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d013      	beq.n	80046e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046b8:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <xQueueGenericSend+0x1f8>)
 80046ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	e00a      	b.n	80046e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046d0:	4b39      	ldr	r3, [pc, #228]	; (80047b8 <xQueueGenericSend+0x1f8>)
 80046d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046e0:	f001 ff98 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e063      	b.n	80047b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046ee:	f001 ff91 	bl	8006614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e05c      	b.n	80047b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	4618      	mov	r0, r3
 8004702:	f001 f827 	bl	8005754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004706:	2301      	movs	r3, #1
 8004708:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800470a:	f001 ff83 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800470e:	f000 fd8f 	bl	8005230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004712:	f001 ff4f 	bl	80065b4 <vPortEnterCritical>
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800471c:	b25b      	sxtb	r3, r3
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004722:	d103      	bne.n	800472c <xQueueGenericSend+0x16c>
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004732:	b25b      	sxtb	r3, r3
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004738:	d103      	bne.n	8004742 <xQueueGenericSend+0x182>
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004742:	f001 ff67 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004746:	1d3a      	adds	r2, r7, #4
 8004748:	f107 0314 	add.w	r3, r7, #20
 800474c:	4611      	mov	r1, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f001 f816 	bl	8005780 <xTaskCheckForTimeOut>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d124      	bne.n	80047a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800475a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800475c:	f000 fa9e 	bl	8004c9c <prvIsQueueFull>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d018      	beq.n	8004798 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	3310      	adds	r3, #16
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f000 ff3c 	bl	80055ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004776:	f000 fa29 	bl	8004bcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800477a:	f000 fd67 	bl	800524c <xTaskResumeAll>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	f47f af7c 	bne.w	800467e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <xQueueGenericSend+0x1f8>)
 8004788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	e772      	b.n	800467e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800479a:	f000 fa17 	bl	8004bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800479e:	f000 fd55 	bl	800524c <xTaskResumeAll>
 80047a2:	e76c      	b.n	800467e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a6:	f000 fa11 	bl	8004bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047aa:	f000 fd4f 	bl	800524c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047ae:	2300      	movs	r3, #0
		}
	}
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3738      	adds	r7, #56	; 0x38
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	e000ed04 	.word	0xe000ed04

080047bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08e      	sub	sp, #56	; 0x38
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d103      	bne.n	80047f8 <xQueueGenericSendFromISR+0x3c>
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <xQueueGenericSendFromISR+0x40>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <xQueueGenericSendFromISR+0x42>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	623b      	str	r3, [r7, #32]
}
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d103      	bne.n	8004826 <xQueueGenericSendFromISR+0x6a>
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <xQueueGenericSendFromISR+0x6e>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <xQueueGenericSendFromISR+0x70>
 800482a:	2300      	movs	r3, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	61fb      	str	r3, [r7, #28]
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004846:	f001 ff97 	bl	8006778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800484a:	f3ef 8211 	mrs	r2, BASEPRI
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	61ba      	str	r2, [r7, #24]
 8004860:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004862:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	429a      	cmp	r2, r3
 8004870:	d302      	bcc.n	8004878 <xQueueGenericSendFromISR+0xbc>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d12c      	bne.n	80048d2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004888:	f000 f910 	bl	8004aac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800488c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004894:	d112      	bne.n	80048bc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d016      	beq.n	80048cc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	3324      	adds	r3, #36	; 0x24
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fef2 	bl	800568c <xTaskRemoveFromEventList>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00e      	beq.n	80048cc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e007      	b.n	80048cc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048c0:	3301      	adds	r3, #1
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	b25a      	sxtb	r2, r3
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048cc:	2301      	movs	r3, #1
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80048d0:	e001      	b.n	80048d6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3738      	adds	r7, #56	; 0x38
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08c      	sub	sp, #48	; 0x30
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048f8:	2300      	movs	r3, #0
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <xQueueReceive+0x30>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	623b      	str	r3, [r7, #32]
}
 8004918:	bf00      	nop
 800491a:	e7fe      	b.n	800491a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <xQueueReceive+0x3e>
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <xQueueReceive+0x42>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <xQueueReceive+0x44>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <xQueueReceive+0x5e>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	61fb      	str	r3, [r7, #28]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800494a:	f001 f867 	bl	8005a1c <xTaskGetSchedulerState>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <xQueueReceive+0x6e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <xQueueReceive+0x72>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <xQueueReceive+0x74>
 800495e:	2300      	movs	r3, #0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <xQueueReceive+0x8e>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	61bb      	str	r3, [r7, #24]
}
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800497a:	f001 fe1b 	bl	80065b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01f      	beq.n	80049ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800498e:	f000 f8f7 	bl	8004b80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	1e5a      	subs	r2, r3, #1
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00f      	beq.n	80049c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	3310      	adds	r3, #16
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fe70 	bl	800568c <xTaskRemoveFromEventList>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049b2:	4b3d      	ldr	r3, [pc, #244]	; (8004aa8 <xQueueReceive+0x1bc>)
 80049b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049c2:	f001 fe27 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e069      	b.n	8004a9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d103      	bne.n	80049d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049d0:	f001 fe20 	bl	8006614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e062      	b.n	8004a9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049de:	f107 0310 	add.w	r3, r7, #16
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 feb6 	bl	8005754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049ec:	f001 fe12 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049f0:	f000 fc1e 	bl	8005230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049f4:	f001 fdde 	bl	80065b4 <vPortEnterCritical>
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049fe:	b25b      	sxtb	r3, r3
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a04:	d103      	bne.n	8004a0e <xQueueReceive+0x122>
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a1a:	d103      	bne.n	8004a24 <xQueueReceive+0x138>
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a24:	f001 fdf6 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a28:	1d3a      	adds	r2, r7, #4
 8004a2a:	f107 0310 	add.w	r3, r7, #16
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fea5 	bl	8005780 <xTaskCheckForTimeOut>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d123      	bne.n	8004a84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3e:	f000 f917 	bl	8004c70 <prvIsQueueEmpty>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d017      	beq.n	8004a78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	3324      	adds	r3, #36	; 0x24
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fdcb 	bl	80055ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a58:	f000 f8b8 	bl	8004bcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a5c:	f000 fbf6 	bl	800524c <xTaskResumeAll>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d189      	bne.n	800497a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a66:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <xQueueReceive+0x1bc>)
 8004a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	e780      	b.n	800497a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a7a:	f000 f8a7 	bl	8004bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a7e:	f000 fbe5 	bl	800524c <xTaskResumeAll>
 8004a82:	e77a      	b.n	800497a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a86:	f000 f8a1 	bl	8004bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a8a:	f000 fbdf 	bl	800524c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a90:	f000 f8ee 	bl	8004c70 <prvIsQueueEmpty>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f43f af6f 	beq.w	800497a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3730      	adds	r7, #48	; 0x30
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10d      	bne.n	8004ae6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d14d      	bne.n	8004b6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 ffbe 	bl	8005a58 <xTaskPriorityDisinherit>
 8004adc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	605a      	str	r2, [r3, #4]
 8004ae4:	e043      	b.n	8004b6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d119      	bne.n	8004b20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6898      	ldr	r0, [r3, #8]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	461a      	mov	r2, r3
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	f002 f87e 	bl	8006bf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	441a      	add	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d32b      	bcc.n	8004b6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	609a      	str	r2, [r3, #8]
 8004b1e:	e026      	b.n	8004b6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68d8      	ldr	r0, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	f002 f864 	bl	8006bf8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	425b      	negs	r3, r3
 8004b3a:	441a      	add	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d207      	bcs.n	8004b5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	425b      	negs	r3, r3
 8004b56:	441a      	add	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d105      	bne.n	8004b6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b76:	697b      	ldr	r3, [r7, #20]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d018      	beq.n	8004bc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	441a      	add	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d303      	bcc.n	8004bb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68d9      	ldr	r1, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6838      	ldr	r0, [r7, #0]
 8004bc0:	f002 f81a 	bl	8006bf8 <memcpy>
	}
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bd4:	f001 fcee 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004be0:	e011      	b.n	8004c06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d012      	beq.n	8004c10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3324      	adds	r3, #36	; 0x24
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fd4c 	bl	800568c <xTaskRemoveFromEventList>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bfa:	f000 fe23 	bl	8005844 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	dce9      	bgt.n	8004be2 <prvUnlockQueue+0x16>
 8004c0e:	e000      	b.n	8004c12 <prvUnlockQueue+0x46>
					break;
 8004c10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	22ff      	movs	r2, #255	; 0xff
 8004c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c1a:	f001 fcfb 	bl	8006614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c1e:	f001 fcc9 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c2a:	e011      	b.n	8004c50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d012      	beq.n	8004c5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3310      	adds	r3, #16
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fd27 	bl	800568c <xTaskRemoveFromEventList>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c44:	f000 fdfe 	bl	8005844 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c48:	7bbb      	ldrb	r3, [r7, #14]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	dce9      	bgt.n	8004c2c <prvUnlockQueue+0x60>
 8004c58:	e000      	b.n	8004c5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	22ff      	movs	r2, #255	; 0xff
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c64:	f001 fcd6 	bl	8006614 <vPortExitCritical>
}
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c78:	f001 fc9c 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c84:	2301      	movs	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e001      	b.n	8004c8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c8e:	f001 fcc1 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004c92:	68fb      	ldr	r3, [r7, #12]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ca4:	f001 fc86 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d102      	bne.n	8004cba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e001      	b.n	8004cbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cbe:	f001 fca9 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	e014      	b.n	8004d06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cdc:	4a0f      	ldr	r2, [pc, #60]	; (8004d1c <vQueueAddToRegistry+0x50>)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ce8:	490c      	ldr	r1, [pc, #48]	; (8004d1c <vQueueAddToRegistry+0x50>)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <vQueueAddToRegistry+0x50>)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cfe:	e006      	b.n	8004d0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3301      	adds	r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b07      	cmp	r3, #7
 8004d0a:	d9e7      	bls.n	8004cdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000960 	.word	0x20000960

08004d20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d30:	f001 fc40 	bl	80065b4 <vPortEnterCritical>
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d3a:	b25b      	sxtb	r3, r3
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d40:	d103      	bne.n	8004d4a <vQueueWaitForMessageRestricted+0x2a>
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d50:	b25b      	sxtb	r3, r3
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d56:	d103      	bne.n	8004d60 <vQueueWaitForMessageRestricted+0x40>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d60:	f001 fc58 	bl	8006614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	3324      	adds	r3, #36	; 0x24
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fc5d 	bl	8005634 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d7a:	6978      	ldr	r0, [r7, #20]
 8004d7c:	f7ff ff26 	bl	8004bcc <prvUnlockQueue>
	}
 8004d80:	bf00      	nop
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08e      	sub	sp, #56	; 0x38
 8004d8c:	af04      	add	r7, sp, #16
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	623b      	str	r3, [r7, #32]
}
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <xTaskCreateStatic+0x46>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	61fb      	str	r3, [r7, #28]
}
 8004dca:	bf00      	nop
 8004dcc:	e7fe      	b.n	8004dcc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dce:	23bc      	movs	r3, #188	; 0xbc
 8004dd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2bbc      	cmp	r3, #188	; 0xbc
 8004dd6:	d00a      	beq.n	8004dee <xTaskCreateStatic+0x66>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	61bb      	str	r3, [r7, #24]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01e      	beq.n	8004e32 <xTaskCreateStatic+0xaa>
 8004df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01b      	beq.n	8004e32 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9303      	str	r3, [sp, #12]
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	9302      	str	r3, [sp, #8]
 8004e14:	f107 0314 	add.w	r3, r7, #20
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f851 	bl	8004ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e2c:	f000 f8ec 	bl	8005008 <prvAddNewTaskToReadyList>
 8004e30:	e001      	b.n	8004e36 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e36:	697b      	ldr	r3, [r7, #20]
	}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3728      	adds	r7, #40	; 0x28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08c      	sub	sp, #48	; 0x30
 8004e44:	af04      	add	r7, sp, #16
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f001 fccf 	bl	80067f8 <pvPortMalloc>
 8004e5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00e      	beq.n	8004e80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004e62:	20bc      	movs	r0, #188	; 0xbc
 8004e64:	f001 fcc8 	bl	80067f8 <pvPortMalloc>
 8004e68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
 8004e76:	e005      	b.n	8004e84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e78:	6978      	ldr	r0, [r7, #20]
 8004e7a:	f001 fd81 	bl	8006980 <vPortFree>
 8004e7e:	e001      	b.n	8004e84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d017      	beq.n	8004eba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e92:	88fa      	ldrh	r2, [r7, #6]
 8004e94:	2300      	movs	r3, #0
 8004e96:	9303      	str	r3, [sp, #12]
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	9302      	str	r3, [sp, #8]
 8004e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f80f 	bl	8004ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eae:	69f8      	ldr	r0, [r7, #28]
 8004eb0:	f000 f8aa 	bl	8005008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	e002      	b.n	8004ec0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ebe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
	}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	21a5      	movs	r1, #165	; 0xa5
 8004ee6:	f001 fe95 	bl	8006c14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f023 0307 	bic.w	r3, r3, #7
 8004f02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	617b      	str	r3, [r7, #20]
}
 8004f20:	bf00      	nop
 8004f22:	e7fe      	b.n	8004f22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f24:	2300      	movs	r3, #0
 8004f26:	61fb      	str	r3, [r7, #28]
 8004f28:	e012      	b.n	8004f50 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	7819      	ldrb	r1, [r3, #0]
 8004f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	4413      	add	r3, r2
 8004f38:	3334      	adds	r3, #52	; 0x34
 8004f3a:	460a      	mov	r2, r1
 8004f3c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	4413      	add	r3, r2
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d006      	beq.n	8004f58 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b0f      	cmp	r3, #15
 8004f54:	d9e9      	bls.n	8004f2a <prvInitialiseNewTask+0x5e>
 8004f56:	e000      	b.n	8004f5a <prvInitialiseNewTask+0x8e>
		{
			break;
 8004f58:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	2b37      	cmp	r3, #55	; 0x37
 8004f66:	d901      	bls.n	8004f6c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f68:	2337      	movs	r3, #55	; 0x37
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	3304      	adds	r3, #4
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff f986 	bl	8004294 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	3318      	adds	r3, #24
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff f981 	bl	8004294 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	3354      	adds	r3, #84	; 0x54
 8004fbc:	2260      	movs	r2, #96	; 0x60
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 fe27 	bl	8006c14 <memset>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <prvInitialiseNewTask+0x130>)
 8004fca:	659a      	str	r2, [r3, #88]	; 0x58
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	4a0c      	ldr	r2, [pc, #48]	; (8005000 <prvInitialiseNewTask+0x134>)
 8004fd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	4a0b      	ldr	r2, [pc, #44]	; (8005004 <prvInitialiseNewTask+0x138>)
 8004fd6:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	69b8      	ldr	r0, [r7, #24]
 8004fde:	f001 f9bf 	bl	8006360 <pxPortInitialiseStack>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ff4:	bf00      	nop
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	08006ef0 	.word	0x08006ef0
 8005000:	08006f10 	.word	0x08006f10
 8005004:	08006ed0 	.word	0x08006ed0

08005008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005010:	f001 fad0 	bl	80065b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005014:	4b2d      	ldr	r3, [pc, #180]	; (80050cc <prvAddNewTaskToReadyList+0xc4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <prvAddNewTaskToReadyList+0xc4>)
 800501c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800501e:	4b2c      	ldr	r3, [pc, #176]	; (80050d0 <prvAddNewTaskToReadyList+0xc8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005026:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <prvAddNewTaskToReadyList+0xc8>)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800502c:	4b27      	ldr	r3, [pc, #156]	; (80050cc <prvAddNewTaskToReadyList+0xc4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d110      	bne.n	8005056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005034:	f000 fc2a 	bl	800588c <prvInitialiseTaskLists>
 8005038:	e00d      	b.n	8005056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800503a:	4b26      	ldr	r3, [pc, #152]	; (80050d4 <prvAddNewTaskToReadyList+0xcc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005042:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <prvAddNewTaskToReadyList+0xc8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	429a      	cmp	r2, r3
 800504e:	d802      	bhi.n	8005056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005050:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <prvAddNewTaskToReadyList+0xc8>)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005056:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <prvAddNewTaskToReadyList+0xd0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3301      	adds	r3, #1
 800505c:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <prvAddNewTaskToReadyList+0xd0>)
 800505e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <prvAddNewTaskToReadyList+0xd0>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <prvAddNewTaskToReadyList+0xd4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d903      	bls.n	800507c <prvAddNewTaskToReadyList+0x74>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	4a18      	ldr	r2, [pc, #96]	; (80050dc <prvAddNewTaskToReadyList+0xd4>)
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <prvAddNewTaskToReadyList+0xd8>)
 800508a:	441a      	add	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3304      	adds	r3, #4
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f7ff f90b 	bl	80042ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005098:	f001 fabc 	bl	8006614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800509c:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <prvAddNewTaskToReadyList+0xcc>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00e      	beq.n	80050c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050a4:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <prvAddNewTaskToReadyList+0xc8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d207      	bcs.n	80050c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050b2:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <prvAddNewTaskToReadyList+0xdc>)
 80050b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000e74 	.word	0x20000e74
 80050d0:	200009a0 	.word	0x200009a0
 80050d4:	20000e80 	.word	0x20000e80
 80050d8:	20000e90 	.word	0x20000e90
 80050dc:	20000e7c 	.word	0x20000e7c
 80050e0:	200009a4 	.word	0x200009a4
 80050e4:	e000ed04 	.word	0xe000ed04

080050e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d017      	beq.n	800512a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050fa:	4b13      	ldr	r3, [pc, #76]	; (8005148 <vTaskDelay+0x60>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <vTaskDelay+0x30>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60bb      	str	r3, [r7, #8]
}
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005118:	f000 f88a 	bl	8005230 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800511c:	2100      	movs	r1, #0
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fd08 	bl	8005b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005124:	f000 f892 	bl	800524c <xTaskResumeAll>
 8005128:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d107      	bne.n	8005140 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <vTaskDelay+0x64>)
 8005132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000e9c 	.word	0x20000e9c
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	; 0x28
 8005154:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800515e:	463a      	mov	r2, r7
 8005160:	1d39      	adds	r1, r7, #4
 8005162:	f107 0308 	add.w	r3, r7, #8
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff f840 	bl	80041ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	9202      	str	r2, [sp, #8]
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	2300      	movs	r3, #0
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	460a      	mov	r2, r1
 800517e:	4924      	ldr	r1, [pc, #144]	; (8005210 <vTaskStartScheduler+0xc0>)
 8005180:	4824      	ldr	r0, [pc, #144]	; (8005214 <vTaskStartScheduler+0xc4>)
 8005182:	f7ff fe01 	bl	8004d88 <xTaskCreateStatic>
 8005186:	4603      	mov	r3, r0
 8005188:	4a23      	ldr	r2, [pc, #140]	; (8005218 <vTaskStartScheduler+0xc8>)
 800518a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800518c:	4b22      	ldr	r3, [pc, #136]	; (8005218 <vTaskStartScheduler+0xc8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005194:	2301      	movs	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e001      	b.n	800519e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d102      	bne.n	80051aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051a4:	f000 fd1a 	bl	8005bdc <xTimerCreateTimerTask>
 80051a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d11b      	bne.n	80051e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	613b      	str	r3, [r7, #16]
}
 80051c2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051c4:	4b15      	ldr	r3, [pc, #84]	; (800521c <vTaskStartScheduler+0xcc>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3354      	adds	r3, #84	; 0x54
 80051ca:	4a15      	ldr	r2, [pc, #84]	; (8005220 <vTaskStartScheduler+0xd0>)
 80051cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051ce:	4b15      	ldr	r3, [pc, #84]	; (8005224 <vTaskStartScheduler+0xd4>)
 80051d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <vTaskStartScheduler+0xd8>)
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80051dc:	4b13      	ldr	r3, [pc, #76]	; (800522c <vTaskStartScheduler+0xdc>)
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051e2:	f001 f945 	bl	8006470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051e6:	e00e      	b.n	8005206 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ee:	d10a      	bne.n	8005206 <vTaskStartScheduler+0xb6>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60fb      	str	r3, [r7, #12]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <vTaskStartScheduler+0xb4>
}
 8005206:	bf00      	nop
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	08006df4 	.word	0x08006df4
 8005214:	0800585d 	.word	0x0800585d
 8005218:	20000e98 	.word	0x20000e98
 800521c:	200009a0 	.word	0x200009a0
 8005220:	20000010 	.word	0x20000010
 8005224:	20000e94 	.word	0x20000e94
 8005228:	20000e80 	.word	0x20000e80
 800522c:	20000e78 	.word	0x20000e78

08005230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005234:	4b04      	ldr	r3, [pc, #16]	; (8005248 <vTaskSuspendAll+0x18>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3301      	adds	r3, #1
 800523a:	4a03      	ldr	r2, [pc, #12]	; (8005248 <vTaskSuspendAll+0x18>)
 800523c:	6013      	str	r3, [r2, #0]
}
 800523e:	bf00      	nop
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	20000e9c 	.word	0x20000e9c

0800524c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005256:	2300      	movs	r3, #0
 8005258:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800525a:	4b42      	ldr	r3, [pc, #264]	; (8005364 <xTaskResumeAll+0x118>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10a      	bne.n	8005278 <xTaskResumeAll+0x2c>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	603b      	str	r3, [r7, #0]
}
 8005274:	bf00      	nop
 8005276:	e7fe      	b.n	8005276 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005278:	f001 f99c 	bl	80065b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800527c:	4b39      	ldr	r3, [pc, #228]	; (8005364 <xTaskResumeAll+0x118>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3b01      	subs	r3, #1
 8005282:	4a38      	ldr	r2, [pc, #224]	; (8005364 <xTaskResumeAll+0x118>)
 8005284:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005286:	4b37      	ldr	r3, [pc, #220]	; (8005364 <xTaskResumeAll+0x118>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d162      	bne.n	8005354 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800528e:	4b36      	ldr	r3, [pc, #216]	; (8005368 <xTaskResumeAll+0x11c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d05e      	beq.n	8005354 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005296:	e02f      	b.n	80052f8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005298:	4b34      	ldr	r3, [pc, #208]	; (800536c <xTaskResumeAll+0x120>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3318      	adds	r3, #24
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff f85f 	bl	8004368 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3304      	adds	r3, #4
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff f85a 	bl	8004368 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <xTaskResumeAll+0x124>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d903      	bls.n	80052c8 <xTaskResumeAll+0x7c>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <xTaskResumeAll+0x124>)
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4a27      	ldr	r2, [pc, #156]	; (8005374 <xTaskResumeAll+0x128>)
 80052d6:	441a      	add	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f7fe ffe5 	bl	80042ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4b23      	ldr	r3, [pc, #140]	; (8005378 <xTaskResumeAll+0x12c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d302      	bcc.n	80052f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <xTaskResumeAll+0x130>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052f8:	4b1c      	ldr	r3, [pc, #112]	; (800536c <xTaskResumeAll+0x120>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1cb      	bne.n	8005298 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005306:	f000 fb63 	bl	80059d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800530a:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <xTaskResumeAll+0x134>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d010      	beq.n	8005338 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005316:	f000 f847 	bl	80053a8 <xTaskIncrementTick>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005320:	4b16      	ldr	r3, [pc, #88]	; (800537c <xTaskResumeAll+0x130>)
 8005322:	2201      	movs	r2, #1
 8005324:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3b01      	subs	r3, #1
 800532a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f1      	bne.n	8005316 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005332:	4b13      	ldr	r3, [pc, #76]	; (8005380 <xTaskResumeAll+0x134>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005338:	4b10      	ldr	r3, [pc, #64]	; (800537c <xTaskResumeAll+0x130>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d009      	beq.n	8005354 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005340:	2301      	movs	r3, #1
 8005342:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005344:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <xTaskResumeAll+0x138>)
 8005346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005354:	f001 f95e 	bl	8006614 <vPortExitCritical>

	return xAlreadyYielded;
 8005358:	68bb      	ldr	r3, [r7, #8]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000e9c 	.word	0x20000e9c
 8005368:	20000e74 	.word	0x20000e74
 800536c:	20000e34 	.word	0x20000e34
 8005370:	20000e7c 	.word	0x20000e7c
 8005374:	200009a4 	.word	0x200009a4
 8005378:	200009a0 	.word	0x200009a0
 800537c:	20000e88 	.word	0x20000e88
 8005380:	20000e84 	.word	0x20000e84
 8005384:	e000ed04 	.word	0xe000ed04

08005388 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <xTaskGetTickCount+0x1c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005394:	687b      	ldr	r3, [r7, #4]
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20000e78 	.word	0x20000e78

080053a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053b2:	4b51      	ldr	r3, [pc, #324]	; (80054f8 <xTaskIncrementTick+0x150>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f040 808e 	bne.w	80054d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053bc:	4b4f      	ldr	r3, [pc, #316]	; (80054fc <xTaskIncrementTick+0x154>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3301      	adds	r3, #1
 80053c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053c4:	4a4d      	ldr	r2, [pc, #308]	; (80054fc <xTaskIncrementTick+0x154>)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d120      	bne.n	8005412 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053d0:	4b4b      	ldr	r3, [pc, #300]	; (8005500 <xTaskIncrementTick+0x158>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	603b      	str	r3, [r7, #0]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <xTaskIncrementTick+0x46>
 80053f0:	4b43      	ldr	r3, [pc, #268]	; (8005500 <xTaskIncrementTick+0x158>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	4b43      	ldr	r3, [pc, #268]	; (8005504 <xTaskIncrementTick+0x15c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a41      	ldr	r2, [pc, #260]	; (8005500 <xTaskIncrementTick+0x158>)
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4a41      	ldr	r2, [pc, #260]	; (8005504 <xTaskIncrementTick+0x15c>)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b40      	ldr	r3, [pc, #256]	; (8005508 <xTaskIncrementTick+0x160>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3301      	adds	r3, #1
 800540a:	4a3f      	ldr	r2, [pc, #252]	; (8005508 <xTaskIncrementTick+0x160>)
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	f000 fadf 	bl	80059d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005412:	4b3e      	ldr	r3, [pc, #248]	; (800550c <xTaskIncrementTick+0x164>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	429a      	cmp	r2, r3
 800541a:	d34e      	bcc.n	80054ba <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800541c:	4b38      	ldr	r3, [pc, #224]	; (8005500 <xTaskIncrementTick+0x158>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <xTaskIncrementTick+0x82>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xTaskIncrementTick+0x84>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005430:	4b36      	ldr	r3, [pc, #216]	; (800550c <xTaskIncrementTick+0x164>)
 8005432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005436:	601a      	str	r2, [r3, #0]
					break;
 8005438:	e03f      	b.n	80054ba <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800543a:	4b31      	ldr	r3, [pc, #196]	; (8005500 <xTaskIncrementTick+0x158>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	429a      	cmp	r2, r3
 8005450:	d203      	bcs.n	800545a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005452:	4a2e      	ldr	r2, [pc, #184]	; (800550c <xTaskIncrementTick+0x164>)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6013      	str	r3, [r2, #0]
						break;
 8005458:	e02f      	b.n	80054ba <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	3304      	adds	r3, #4
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe ff82 	bl	8004368 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	2b00      	cmp	r3, #0
 800546a:	d004      	beq.n	8005476 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	3318      	adds	r3, #24
 8005470:	4618      	mov	r0, r3
 8005472:	f7fe ff79 	bl	8004368 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	4b25      	ldr	r3, [pc, #148]	; (8005510 <xTaskIncrementTick+0x168>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d903      	bls.n	800548a <xTaskIncrementTick+0xe2>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	4a22      	ldr	r2, [pc, #136]	; (8005510 <xTaskIncrementTick+0x168>)
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4a1f      	ldr	r2, [pc, #124]	; (8005514 <xTaskIncrementTick+0x16c>)
 8005498:	441a      	add	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3304      	adds	r3, #4
 800549e:	4619      	mov	r1, r3
 80054a0:	4610      	mov	r0, r2
 80054a2:	f7fe ff04 	bl	80042ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054aa:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <xTaskIncrementTick+0x170>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d3b3      	bcc.n	800541c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054b4:	2301      	movs	r3, #1
 80054b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054b8:	e7b0      	b.n	800541c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054ba:	4b17      	ldr	r3, [pc, #92]	; (8005518 <xTaskIncrementTick+0x170>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c0:	4914      	ldr	r1, [pc, #80]	; (8005514 <xTaskIncrementTick+0x16c>)
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d907      	bls.n	80054e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80054d2:	2301      	movs	r3, #1
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e004      	b.n	80054e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054d8:	4b10      	ldr	r3, [pc, #64]	; (800551c <xTaskIncrementTick+0x174>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3301      	adds	r3, #1
 80054de:	4a0f      	ldr	r2, [pc, #60]	; (800551c <xTaskIncrementTick+0x174>)
 80054e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054e2:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <xTaskIncrementTick+0x178>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80054ea:	2301      	movs	r3, #1
 80054ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054ee:	697b      	ldr	r3, [r7, #20]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20000e9c 	.word	0x20000e9c
 80054fc:	20000e78 	.word	0x20000e78
 8005500:	20000e2c 	.word	0x20000e2c
 8005504:	20000e30 	.word	0x20000e30
 8005508:	20000e8c 	.word	0x20000e8c
 800550c:	20000e94 	.word	0x20000e94
 8005510:	20000e7c 	.word	0x20000e7c
 8005514:	200009a4 	.word	0x200009a4
 8005518:	200009a0 	.word	0x200009a0
 800551c:	20000e84 	.word	0x20000e84
 8005520:	20000e88 	.word	0x20000e88

08005524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800552a:	4b2a      	ldr	r3, [pc, #168]	; (80055d4 <vTaskSwitchContext+0xb0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005532:	4b29      	ldr	r3, [pc, #164]	; (80055d8 <vTaskSwitchContext+0xb4>)
 8005534:	2201      	movs	r2, #1
 8005536:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005538:	e046      	b.n	80055c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800553a:	4b27      	ldr	r3, [pc, #156]	; (80055d8 <vTaskSwitchContext+0xb4>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005540:	4b26      	ldr	r3, [pc, #152]	; (80055dc <vTaskSwitchContext+0xb8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	e010      	b.n	800556a <vTaskSwitchContext+0x46>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <vTaskSwitchContext+0x40>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vTaskSwitchContext+0x3e>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3b01      	subs	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	491d      	ldr	r1, [pc, #116]	; (80055e0 <vTaskSwitchContext+0xbc>)
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0e4      	beq.n	8005548 <vTaskSwitchContext+0x24>
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4a15      	ldr	r2, [pc, #84]	; (80055e0 <vTaskSwitchContext+0xbc>)
 800558a:	4413      	add	r3, r2
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	605a      	str	r2, [r3, #4]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	3308      	adds	r3, #8
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d104      	bne.n	80055ae <vTaskSwitchContext+0x8a>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4a0b      	ldr	r2, [pc, #44]	; (80055e4 <vTaskSwitchContext+0xc0>)
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	4a08      	ldr	r2, [pc, #32]	; (80055dc <vTaskSwitchContext+0xb8>)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055be:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <vTaskSwitchContext+0xc0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3354      	adds	r3, #84	; 0x54
 80055c4:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <vTaskSwitchContext+0xc4>)
 80055c6:	6013      	str	r3, [r2, #0]
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	20000e9c 	.word	0x20000e9c
 80055d8:	20000e88 	.word	0x20000e88
 80055dc:	20000e7c 	.word	0x20000e7c
 80055e0:	200009a4 	.word	0x200009a4
 80055e4:	200009a0 	.word	0x200009a0
 80055e8:	20000010 	.word	0x20000010

080055ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	60fb      	str	r3, [r7, #12]
}
 800560e:	bf00      	nop
 8005610:	e7fe      	b.n	8005610 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005612:	4b07      	ldr	r3, [pc, #28]	; (8005630 <vTaskPlaceOnEventList+0x44>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3318      	adds	r3, #24
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fe fe6b 	bl	80042f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005620:	2101      	movs	r1, #1
 8005622:	6838      	ldr	r0, [r7, #0]
 8005624:	f000 fa86 	bl	8005b34 <prvAddCurrentTaskToDelayedList>
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	200009a0 	.word	0x200009a0

08005634 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	617b      	str	r3, [r7, #20]
}
 8005658:	bf00      	nop
 800565a:	e7fe      	b.n	800565a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <vTaskPlaceOnEventListRestricted+0x54>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3318      	adds	r3, #24
 8005662:	4619      	mov	r1, r3
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f7fe fe22 	bl	80042ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005674:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	68b8      	ldr	r0, [r7, #8]
 800567a:	f000 fa5b 	bl	8005b34 <prvAddCurrentTaskToDelayedList>
	}
 800567e:	bf00      	nop
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	200009a0 	.word	0x200009a0

0800568c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	60fb      	str	r3, [r7, #12]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3318      	adds	r3, #24
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe fe53 	bl	8004368 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056c2:	4b1e      	ldr	r3, [pc, #120]	; (800573c <xTaskRemoveFromEventList+0xb0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d11d      	bne.n	8005706 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	3304      	adds	r3, #4
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe fe4a 	bl	8004368 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <xTaskRemoveFromEventList+0xb4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d903      	bls.n	80056e8 <xTaskRemoveFromEventList+0x5c>
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	4a16      	ldr	r2, [pc, #88]	; (8005740 <xTaskRemoveFromEventList+0xb4>)
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4a13      	ldr	r2, [pc, #76]	; (8005744 <xTaskRemoveFromEventList+0xb8>)
 80056f6:	441a      	add	r2, r3
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f7fe fdd5 	bl	80042ae <vListInsertEnd>
 8005704:	e005      	b.n	8005712 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3318      	adds	r3, #24
 800570a:	4619      	mov	r1, r3
 800570c:	480e      	ldr	r0, [pc, #56]	; (8005748 <xTaskRemoveFromEventList+0xbc>)
 800570e:	f7fe fdce 	bl	80042ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005716:	4b0d      	ldr	r3, [pc, #52]	; (800574c <xTaskRemoveFromEventList+0xc0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	429a      	cmp	r2, r3
 800571e:	d905      	bls.n	800572c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005720:	2301      	movs	r3, #1
 8005722:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <xTaskRemoveFromEventList+0xc4>)
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e001      	b.n	8005730 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005730:	697b      	ldr	r3, [r7, #20]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000e9c 	.word	0x20000e9c
 8005740:	20000e7c 	.word	0x20000e7c
 8005744:	200009a4 	.word	0x200009a4
 8005748:	20000e34 	.word	0x20000e34
 800574c:	200009a0 	.word	0x200009a0
 8005750:	20000e88 	.word	0x20000e88

08005754 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <vTaskInternalSetTimeOutState+0x24>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <vTaskInternalSetTimeOutState+0x28>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	605a      	str	r2, [r3, #4]
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	20000e8c 	.word	0x20000e8c
 800577c:	20000e78 	.word	0x20000e78

08005780 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	613b      	str	r3, [r7, #16]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10a      	bne.n	80057c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	60fb      	str	r3, [r7, #12]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80057c2:	f000 fef7 	bl	80065b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057c6:	4b1d      	ldr	r3, [pc, #116]	; (800583c <xTaskCheckForTimeOut+0xbc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057de:	d102      	bne.n	80057e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	e023      	b.n	800582e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4b15      	ldr	r3, [pc, #84]	; (8005840 <xTaskCheckForTimeOut+0xc0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d007      	beq.n	8005802 <xTaskCheckForTimeOut+0x82>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057fc:	2301      	movs	r3, #1
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	e015      	b.n	800582e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	429a      	cmp	r2, r3
 800580a:	d20b      	bcs.n	8005824 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	1ad2      	subs	r2, r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff ff9b 	bl	8005754 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	e004      	b.n	800582e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800582a:	2301      	movs	r3, #1
 800582c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800582e:	f000 fef1 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8005832:	69fb      	ldr	r3, [r7, #28]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3720      	adds	r7, #32
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000e78 	.word	0x20000e78
 8005840:	20000e8c 	.word	0x20000e8c

08005844 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005848:	4b03      	ldr	r3, [pc, #12]	; (8005858 <vTaskMissedYield+0x14>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
}
 800584e:	bf00      	nop
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	20000e88 	.word	0x20000e88

0800585c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005864:	f000 f852 	bl	800590c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005868:	4b06      	ldr	r3, [pc, #24]	; (8005884 <prvIdleTask+0x28>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d9f9      	bls.n	8005864 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <prvIdleTask+0x2c>)
 8005872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005880:	e7f0      	b.n	8005864 <prvIdleTask+0x8>
 8005882:	bf00      	nop
 8005884:	200009a4 	.word	0x200009a4
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005892:	2300      	movs	r3, #0
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	e00c      	b.n	80058b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4a12      	ldr	r2, [pc, #72]	; (80058ec <prvInitialiseTaskLists+0x60>)
 80058a4:	4413      	add	r3, r2
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fcd4 	bl	8004254 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3301      	adds	r3, #1
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b37      	cmp	r3, #55	; 0x37
 80058b6:	d9ef      	bls.n	8005898 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058b8:	480d      	ldr	r0, [pc, #52]	; (80058f0 <prvInitialiseTaskLists+0x64>)
 80058ba:	f7fe fccb 	bl	8004254 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058be:	480d      	ldr	r0, [pc, #52]	; (80058f4 <prvInitialiseTaskLists+0x68>)
 80058c0:	f7fe fcc8 	bl	8004254 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058c4:	480c      	ldr	r0, [pc, #48]	; (80058f8 <prvInitialiseTaskLists+0x6c>)
 80058c6:	f7fe fcc5 	bl	8004254 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058ca:	480c      	ldr	r0, [pc, #48]	; (80058fc <prvInitialiseTaskLists+0x70>)
 80058cc:	f7fe fcc2 	bl	8004254 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058d0:	480b      	ldr	r0, [pc, #44]	; (8005900 <prvInitialiseTaskLists+0x74>)
 80058d2:	f7fe fcbf 	bl	8004254 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058d6:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <prvInitialiseTaskLists+0x78>)
 80058d8:	4a05      	ldr	r2, [pc, #20]	; (80058f0 <prvInitialiseTaskLists+0x64>)
 80058da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <prvInitialiseTaskLists+0x7c>)
 80058de:	4a05      	ldr	r2, [pc, #20]	; (80058f4 <prvInitialiseTaskLists+0x68>)
 80058e0:	601a      	str	r2, [r3, #0]
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200009a4 	.word	0x200009a4
 80058f0:	20000e04 	.word	0x20000e04
 80058f4:	20000e18 	.word	0x20000e18
 80058f8:	20000e34 	.word	0x20000e34
 80058fc:	20000e48 	.word	0x20000e48
 8005900:	20000e60 	.word	0x20000e60
 8005904:	20000e2c 	.word	0x20000e2c
 8005908:	20000e30 	.word	0x20000e30

0800590c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005912:	e019      	b.n	8005948 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005914:	f000 fe4e 	bl	80065b4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005918:	4b10      	ldr	r3, [pc, #64]	; (800595c <prvCheckTasksWaitingTermination+0x50>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3304      	adds	r3, #4
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe fd1f 	bl	8004368 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800592a:	4b0d      	ldr	r3, [pc, #52]	; (8005960 <prvCheckTasksWaitingTermination+0x54>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3b01      	subs	r3, #1
 8005930:	4a0b      	ldr	r2, [pc, #44]	; (8005960 <prvCheckTasksWaitingTermination+0x54>)
 8005932:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <prvCheckTasksWaitingTermination+0x58>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3b01      	subs	r3, #1
 800593a:	4a0a      	ldr	r2, [pc, #40]	; (8005964 <prvCheckTasksWaitingTermination+0x58>)
 800593c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800593e:	f000 fe69 	bl	8006614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f810 	bl	8005968 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005948:	4b06      	ldr	r3, [pc, #24]	; (8005964 <prvCheckTasksWaitingTermination+0x58>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e1      	bne.n	8005914 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000e48 	.word	0x20000e48
 8005960:	20000e74 	.word	0x20000e74
 8005964:	20000e5c 	.word	0x20000e5c

08005968 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3354      	adds	r3, #84	; 0x54
 8005974:	4618      	mov	r0, r3
 8005976:	f001 f963 	bl	8006c40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005980:	2b00      	cmp	r3, #0
 8005982:	d108      	bne.n	8005996 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fff9 	bl	8006980 <vPortFree>
				vPortFree( pxTCB );
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fff6 	bl	8006980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005994:	e018      	b.n	80059c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800599c:	2b01      	cmp	r3, #1
 800599e:	d103      	bne.n	80059a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 ffed 	bl	8006980 <vPortFree>
	}
 80059a6:	e00f      	b.n	80059c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d00a      	beq.n	80059c8 <prvDeleteTCB+0x60>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	60fb      	str	r3, [r7, #12]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <prvDeleteTCB+0x5e>
	}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <prvResetNextTaskUnblockTime+0x44>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <prvResetNextTaskUnblockTime+0x14>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e000      	b.n	80059e6 <prvResetNextTaskUnblockTime+0x16>
 80059e4:	2300      	movs	r3, #0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d004      	beq.n	80059f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <prvResetNextTaskUnblockTime+0x48>)
 80059ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059f2:	e008      	b.n	8005a06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <prvResetNextTaskUnblockTime+0x44>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4a05      	ldr	r2, [pc, #20]	; (8005a18 <prvResetNextTaskUnblockTime+0x48>)
 8005a04:	6013      	str	r3, [r2, #0]
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	20000e2c 	.word	0x20000e2c
 8005a18:	20000e94 	.word	0x20000e94

08005a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a22:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <xTaskGetSchedulerState+0x34>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d102      	bne.n	8005a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	e008      	b.n	8005a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a30:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <xTaskGetSchedulerState+0x38>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	e001      	b.n	8005a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a42:	687b      	ldr	r3, [r7, #4]
	}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	20000e80 	.word	0x20000e80
 8005a54:	20000e9c 	.word	0x20000e9c

08005a58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d056      	beq.n	8005b1c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a6e:	4b2e      	ldr	r3, [pc, #184]	; (8005b28 <xTaskPriorityDisinherit+0xd0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d00a      	beq.n	8005a8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	60fb      	str	r3, [r7, #12]
}
 8005a8a:	bf00      	nop
 8005a8c:	e7fe      	b.n	8005a8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	60bb      	str	r3, [r7, #8]
}
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab0:	1e5a      	subs	r2, r3, #1
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d02c      	beq.n	8005b1c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d128      	bne.n	8005b1c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	3304      	adds	r3, #4
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fe fc4a 	bl	8004368 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aec:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <xTaskPriorityDisinherit+0xd4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d903      	bls.n	8005afc <xTaskPriorityDisinherit+0xa4>
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	4a0c      	ldr	r2, [pc, #48]	; (8005b2c <xTaskPriorityDisinherit+0xd4>)
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <xTaskPriorityDisinherit+0xd8>)
 8005b0a:	441a      	add	r2, r3
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f7fe fbcb 	bl	80042ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b1c:	697b      	ldr	r3, [r7, #20]
	}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200009a0 	.word	0x200009a0
 8005b2c:	20000e7c 	.word	0x20000e7c
 8005b30:	200009a4 	.word	0x200009a4

08005b34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b3e:	4b21      	ldr	r3, [pc, #132]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b44:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe fc0c 	bl	8004368 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b56:	d10a      	bne.n	8005b6e <prvAddCurrentTaskToDelayedList+0x3a>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4619      	mov	r1, r3
 8005b66:	4819      	ldr	r0, [pc, #100]	; (8005bcc <prvAddCurrentTaskToDelayedList+0x98>)
 8005b68:	f7fe fba1 	bl	80042ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b6c:	e026      	b.n	8005bbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4413      	add	r3, r2
 8005b74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d209      	bcs.n	8005b9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b86:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f7fe fbaf 	bl	80042f6 <vListInsert>
}
 8005b98:	e010      	b.n	8005bbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	f7fe fba5 	bl	80042f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bac:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d202      	bcs.n	8005bbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bb6:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	6013      	str	r3, [r2, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000e78 	.word	0x20000e78
 8005bc8:	200009a0 	.word	0x200009a0
 8005bcc:	20000e60 	.word	0x20000e60
 8005bd0:	20000e30 	.word	0x20000e30
 8005bd4:	20000e2c 	.word	0x20000e2c
 8005bd8:	20000e94 	.word	0x20000e94

08005bdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	; 0x28
 8005be0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005be6:	f000 fb5b 	bl	80062a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bea:	4b1c      	ldr	r3, [pc, #112]	; (8005c5c <xTimerCreateTimerTask+0x80>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d021      	beq.n	8005c36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005bfa:	1d3a      	adds	r2, r7, #4
 8005bfc:	f107 0108 	add.w	r1, r7, #8
 8005c00:	f107 030c 	add.w	r3, r7, #12
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe fb0b 	bl	8004220 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	9202      	str	r2, [sp, #8]
 8005c12:	9301      	str	r3, [sp, #4]
 8005c14:	2302      	movs	r3, #2
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	460a      	mov	r2, r1
 8005c1c:	4910      	ldr	r1, [pc, #64]	; (8005c60 <xTimerCreateTimerTask+0x84>)
 8005c1e:	4811      	ldr	r0, [pc, #68]	; (8005c64 <xTimerCreateTimerTask+0x88>)
 8005c20:	f7ff f8b2 	bl	8004d88 <xTaskCreateStatic>
 8005c24:	4603      	mov	r3, r0
 8005c26:	4a10      	ldr	r2, [pc, #64]	; (8005c68 <xTimerCreateTimerTask+0x8c>)
 8005c28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <xTimerCreateTimerTask+0x8c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c32:	2301      	movs	r3, #1
 8005c34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	613b      	str	r3, [r7, #16]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c52:	697b      	ldr	r3, [r7, #20]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000ed0 	.word	0x20000ed0
 8005c60:	08006dfc 	.word	0x08006dfc
 8005c64:	08005ea9 	.word	0x08005ea9
 8005c68:	20000ed4 	.word	0x20000ed4

08005c6c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005c7a:	2030      	movs	r0, #48	; 0x30
 8005c7c:	f000 fdbc 	bl	80067f8 <pvPortMalloc>
 8005c80:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00d      	beq.n	8005ca4 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f846 	bl	8005d28 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8005ca4:	697b      	ldr	r3, [r7, #20]
	}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b08a      	sub	sp, #40	; 0x28
 8005cb2:	af02      	add	r7, sp, #8
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005cbc:	2330      	movs	r3, #48	; 0x30
 8005cbe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b30      	cmp	r3, #48	; 0x30
 8005cc4:	d00a      	beq.n	8005cdc <xTimerCreateStatic+0x2e>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	61bb      	str	r3, [r7, #24]
}
 8005cd8:	bf00      	nop
 8005cda:	e7fe      	b.n	8005cda <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10a      	bne.n	8005cf8 <xTimerCreateStatic+0x4a>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	617b      	str	r3, [r7, #20]
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00d      	beq.n	8005d1e <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f809 	bl	8005d28 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
	}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	617b      	str	r3, [r7, #20]
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d015      	beq.n	8005d84 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005d58:	f000 faa2 	bl	80062a0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	6a3a      	ldr	r2, [r7, #32]
 8005d78:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fe fa88 	bl	8004294 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005d84:	bf00      	nop
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <xTimerGenericCommand+0x2e>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	623b      	str	r3, [r7, #32]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005dba:	4b1a      	ldr	r3, [pc, #104]	; (8005e24 <xTimerGenericCommand+0x98>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d02a      	beq.n	8005e18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b05      	cmp	r3, #5
 8005dd2:	dc18      	bgt.n	8005e06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005dd4:	f7ff fe22 	bl	8005a1c <xTaskGetSchedulerState>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d109      	bne.n	8005df2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005dde:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <xTimerGenericCommand+0x98>)
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	f107 0110 	add.w	r1, r7, #16
 8005de6:	2300      	movs	r3, #0
 8005de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dea:	f7fe fbe9 	bl	80045c0 <xQueueGenericSend>
 8005dee:	6278      	str	r0, [r7, #36]	; 0x24
 8005df0:	e012      	b.n	8005e18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005df2:	4b0c      	ldr	r3, [pc, #48]	; (8005e24 <xTimerGenericCommand+0x98>)
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	f107 0110 	add.w	r1, r7, #16
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f7fe fbdf 	bl	80045c0 <xQueueGenericSend>
 8005e02:	6278      	str	r0, [r7, #36]	; 0x24
 8005e04:	e008      	b.n	8005e18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e06:	4b07      	ldr	r3, [pc, #28]	; (8005e24 <xTimerGenericCommand+0x98>)
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	f107 0110 	add.w	r1, r7, #16
 8005e0e:	2300      	movs	r3, #0
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	f7fe fcd3 	bl	80047bc <xQueueGenericSendFromISR>
 8005e16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3728      	adds	r7, #40	; 0x28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000ed0 	.word	0x20000ed0

08005e28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e32:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <prvProcessExpiredTimer+0x7c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fa91 	bl	8004368 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d122      	bne.n	8005e94 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	18d1      	adds	r1, r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	6978      	ldr	r0, [r7, #20]
 8005e5c:	f000 f8c8 	bl	8005ff0 <prvInsertTimerInActiveList>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d016      	beq.n	8005e94 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e66:	2300      	movs	r3, #0
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	2100      	movs	r1, #0
 8005e70:	6978      	ldr	r0, [r7, #20]
 8005e72:	f7ff ff8b 	bl	8005d8c <xTimerGenericCommand>
 8005e76:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10a      	bne.n	8005e94 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	60fb      	str	r3, [r7, #12]
}
 8005e90:	bf00      	nop
 8005e92:	e7fe      	b.n	8005e92 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	6978      	ldr	r0, [r7, #20]
 8005e9a:	4798      	blx	r3
}
 8005e9c:	bf00      	nop
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20000ec8 	.word	0x20000ec8

08005ea8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eb0:	f107 0308 	add.w	r3, r7, #8
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 f857 	bl	8005f68 <prvGetNextExpireTime>
 8005eba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f803 	bl	8005ecc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ec6:	f000 f8d5 	bl	8006074 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eca:	e7f1      	b.n	8005eb0 <prvTimerTask+0x8>

08005ecc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ed6:	f7ff f9ab 	bl	8005230 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eda:	f107 0308 	add.w	r3, r7, #8
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f866 	bl	8005fb0 <prvSampleTimeNow>
 8005ee4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d130      	bne.n	8005f4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <prvProcessTimerOrBlockTask+0x3c>
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d806      	bhi.n	8005f08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005efa:	f7ff f9a7 	bl	800524c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005efe:	68f9      	ldr	r1, [r7, #12]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff ff91 	bl	8005e28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f06:	e024      	b.n	8005f52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d008      	beq.n	8005f20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <prvProcessTimerOrBlockTask+0x90>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f20:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <prvProcessTimerOrBlockTask+0x94>)
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	f7fe fef7 	bl	8004d20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f32:	f7ff f98b 	bl	800524c <xTaskResumeAll>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f3c:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <prvProcessTimerOrBlockTask+0x98>)
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	f3bf 8f6f 	isb	sy
}
 8005f4c:	e001      	b.n	8005f52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f4e:	f7ff f97d 	bl	800524c <xTaskResumeAll>
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000ecc 	.word	0x20000ecc
 8005f60:	20000ed0 	.word	0x20000ed0
 8005f64:	e000ed04 	.word	0xe000ed04

08005f68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f70:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <prvGetNextExpireTime+0x44>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d105      	bne.n	8005f9a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f8e:	4b07      	ldr	r3, [pc, #28]	; (8005fac <prvGetNextExpireTime+0x44>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	e001      	b.n	8005f9e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	20000ec8 	.word	0x20000ec8

08005fb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fb8:	f7ff f9e6 	bl	8005388 <xTaskGetTickCount>
 8005fbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fbe:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <prvSampleTimeNow+0x3c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d205      	bcs.n	8005fd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fc8:	f000 f908 	bl	80061dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e002      	b.n	8005fda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fda:	4a04      	ldr	r2, [pc, #16]	; (8005fec <prvSampleTimeNow+0x3c>)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000ed8 	.word	0x20000ed8

08005ff0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	429a      	cmp	r2, r3
 8006014:	d812      	bhi.n	800603c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	1ad2      	subs	r2, r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e01b      	b.n	8006062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800602a:	4b10      	ldr	r3, [pc, #64]	; (800606c <prvInsertTimerInActiveList+0x7c>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f7fe f95e 	bl	80042f6 <vListInsert>
 800603a:	e012      	b.n	8006062 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d206      	bcs.n	8006052 <prvInsertTimerInActiveList+0x62>
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d302      	bcc.n	8006052 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e007      	b.n	8006062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <prvInsertTimerInActiveList+0x80>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3304      	adds	r3, #4
 800605a:	4619      	mov	r1, r3
 800605c:	4610      	mov	r0, r2
 800605e:	f7fe f94a 	bl	80042f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006062:	697b      	ldr	r3, [r7, #20]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20000ecc 	.word	0x20000ecc
 8006070:	20000ec8 	.word	0x20000ec8

08006074 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08e      	sub	sp, #56	; 0x38
 8006078:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800607a:	e09d      	b.n	80061b8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	da18      	bge.n	80060b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006082:	1d3b      	adds	r3, r7, #4
 8006084:	3304      	adds	r3, #4
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	61fb      	str	r3, [r7, #28]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060aa:	6850      	ldr	r0, [r2, #4]
 80060ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ae:	6892      	ldr	r2, [r2, #8]
 80060b0:	4611      	mov	r1, r2
 80060b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	db7d      	blt.n	80061b6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d004      	beq.n	80060d0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	3304      	adds	r3, #4
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe f94c 	bl	8004368 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060d0:	463b      	mov	r3, r7
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff ff6c 	bl	8005fb0 <prvSampleTimeNow>
 80060d8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b09      	cmp	r3, #9
 80060de:	d86b      	bhi.n	80061b8 <prvProcessReceivedCommands+0x144>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <prvProcessReceivedCommands+0x74>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006111 	.word	0x08006111
 80060f0:	08006111 	.word	0x08006111
 80060f4:	080061b9 	.word	0x080061b9
 80060f8:	0800616d 	.word	0x0800616d
 80060fc:	080061a5 	.word	0x080061a5
 8006100:	08006111 	.word	0x08006111
 8006104:	08006111 	.word	0x08006111
 8006108:	080061b9 	.word	0x080061b9
 800610c:	0800616d 	.word	0x0800616d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	18d1      	adds	r1, r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800611c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800611e:	f7ff ff67 	bl	8005ff0 <prvInsertTimerInActiveList>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d047      	beq.n	80061b8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800612e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d13f      	bne.n	80061b8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	441a      	add	r2, r3
 8006140:	2300      	movs	r3, #0
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	2100      	movs	r1, #0
 8006148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800614a:	f7ff fe1f 	bl	8005d8c <xTimerGenericCommand>
 800614e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d130      	bne.n	80061b8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	61bb      	str	r3, [r7, #24]
}
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	617b      	str	r3, [r7, #20]
}
 800618c:	bf00      	nop
 800618e:	e7fe      	b.n	800618e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	18d1      	adds	r1, r2, r3
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800619e:	f7ff ff27 	bl	8005ff0 <prvInsertTimerInActiveList>
					break;
 80061a2:	e009      	b.n	80061b8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d104      	bne.n	80061b8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80061ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b0:	f000 fbe6 	bl	8006980 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061b4:	e000      	b.n	80061b8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061b6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061b8:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <prvProcessReceivedCommands+0x164>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	1d39      	adds	r1, r7, #4
 80061be:	2200      	movs	r2, #0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe fb93 	bl	80048ec <xQueueReceive>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f47f af57 	bne.w	800607c <prvProcessReceivedCommands+0x8>
	}
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	3730      	adds	r7, #48	; 0x30
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000ed0 	.word	0x20000ed0

080061dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061e2:	e045      	b.n	8006270 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061e4:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <prvSwitchTimerLists+0xbc>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061ee:	4b2a      	ldr	r3, [pc, #168]	; (8006298 <prvSwitchTimerLists+0xbc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe f8b3 	bl	8004368 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d12e      	bne.n	8006270 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4413      	add	r3, r2
 800621a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	429a      	cmp	r2, r3
 8006222:	d90e      	bls.n	8006242 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006230:	4b19      	ldr	r3, [pc, #100]	; (8006298 <prvSwitchTimerLists+0xbc>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f7fe f85b 	bl	80042f6 <vListInsert>
 8006240:	e016      	b.n	8006270 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006242:	2300      	movs	r3, #0
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	2300      	movs	r3, #0
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	2100      	movs	r1, #0
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff fd9d 	bl	8005d8c <xTimerGenericCommand>
 8006252:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <prvSwitchTimerLists+0x94>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	603b      	str	r3, [r7, #0]
}
 800626c:	bf00      	nop
 800626e:	e7fe      	b.n	800626e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006270:	4b09      	ldr	r3, [pc, #36]	; (8006298 <prvSwitchTimerLists+0xbc>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1b4      	bne.n	80061e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <prvSwitchTimerLists+0xbc>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <prvSwitchTimerLists+0xc0>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a04      	ldr	r2, [pc, #16]	; (8006298 <prvSwitchTimerLists+0xbc>)
 8006286:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006288:	4a04      	ldr	r2, [pc, #16]	; (800629c <prvSwitchTimerLists+0xc0>)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	6013      	str	r3, [r2, #0]
}
 800628e:	bf00      	nop
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20000ec8 	.word	0x20000ec8
 800629c:	20000ecc 	.word	0x20000ecc

080062a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062a6:	f000 f985 	bl	80065b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062aa:	4b15      	ldr	r3, [pc, #84]	; (8006300 <prvCheckForValidListAndQueue+0x60>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d120      	bne.n	80062f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062b2:	4814      	ldr	r0, [pc, #80]	; (8006304 <prvCheckForValidListAndQueue+0x64>)
 80062b4:	f7fd ffce 	bl	8004254 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062b8:	4813      	ldr	r0, [pc, #76]	; (8006308 <prvCheckForValidListAndQueue+0x68>)
 80062ba:	f7fd ffcb 	bl	8004254 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <prvCheckForValidListAndQueue+0x6c>)
 80062c0:	4a10      	ldr	r2, [pc, #64]	; (8006304 <prvCheckForValidListAndQueue+0x64>)
 80062c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062c4:	4b12      	ldr	r3, [pc, #72]	; (8006310 <prvCheckForValidListAndQueue+0x70>)
 80062c6:	4a10      	ldr	r2, [pc, #64]	; (8006308 <prvCheckForValidListAndQueue+0x68>)
 80062c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062ca:	2300      	movs	r3, #0
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <prvCheckForValidListAndQueue+0x74>)
 80062d0:	4a11      	ldr	r2, [pc, #68]	; (8006318 <prvCheckForValidListAndQueue+0x78>)
 80062d2:	2110      	movs	r1, #16
 80062d4:	200a      	movs	r0, #10
 80062d6:	f7fe f8d9 	bl	800448c <xQueueGenericCreateStatic>
 80062da:	4603      	mov	r3, r0
 80062dc:	4a08      	ldr	r2, [pc, #32]	; (8006300 <prvCheckForValidListAndQueue+0x60>)
 80062de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062e0:	4b07      	ldr	r3, [pc, #28]	; (8006300 <prvCheckForValidListAndQueue+0x60>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062e8:	4b05      	ldr	r3, [pc, #20]	; (8006300 <prvCheckForValidListAndQueue+0x60>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	490b      	ldr	r1, [pc, #44]	; (800631c <prvCheckForValidListAndQueue+0x7c>)
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fcec 	bl	8004ccc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062f4:	f000 f98e 	bl	8006614 <vPortExitCritical>
}
 80062f8:	bf00      	nop
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000ed0 	.word	0x20000ed0
 8006304:	20000ea0 	.word	0x20000ea0
 8006308:	20000eb4 	.word	0x20000eb4
 800630c:	20000ec8 	.word	0x20000ec8
 8006310:	20000ecc 	.word	0x20000ecc
 8006314:	20000f7c 	.word	0x20000f7c
 8006318:	20000edc 	.word	0x20000edc
 800631c:	08006e04 	.word	0x08006e04

08006320 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <pvTimerGetTimerID+0x28>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	60fb      	str	r3, [r7, #12]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006348:	f000 f934 	bl	80065b4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006352:	f000 f95f 	bl	8006614 <vPortExitCritical>

	return pvReturn;
 8006356:	693b      	ldr	r3, [r7, #16]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3b04      	subs	r3, #4
 8006370:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3b04      	subs	r3, #4
 800637e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f023 0201 	bic.w	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3b04      	subs	r3, #4
 800638e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006390:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <pxPortInitialiseStack+0x64>)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3b14      	subs	r3, #20
 800639a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3b04      	subs	r3, #4
 80063a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f06f 0202 	mvn.w	r2, #2
 80063ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3b20      	subs	r3, #32
 80063b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063b6:	68fb      	ldr	r3, [r7, #12]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	080063c9 	.word	0x080063c9

080063c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <prvTaskExitError+0x54>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063da:	d00a      	beq.n	80063f2 <prvTaskExitError+0x2a>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	60fb      	str	r3, [r7, #12]
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <prvTaskExitError+0x28>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	60bb      	str	r3, [r7, #8]
}
 8006404:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006406:	bf00      	nop
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0fc      	beq.n	8006408 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800640e:	bf00      	nop
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	2000000c 	.word	0x2000000c

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	200009a0 	.word	0x200009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800646a:	bf00      	nop
 800646c:	e000ed08 	.word	0xe000ed08

08006470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006476:	4b46      	ldr	r3, [pc, #280]	; (8006590 <xPortStartScheduler+0x120>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a46      	ldr	r2, [pc, #280]	; (8006594 <xPortStartScheduler+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10a      	bne.n	8006496 <xPortStartScheduler+0x26>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006496:	4b3e      	ldr	r3, [pc, #248]	; (8006590 <xPortStartScheduler+0x120>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3f      	ldr	r2, [pc, #252]	; (8006598 <xPortStartScheduler+0x128>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10a      	bne.n	80064b6 <xPortStartScheduler+0x46>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60fb      	str	r3, [r7, #12]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064b6:	4b39      	ldr	r3, [pc, #228]	; (800659c <xPortStartScheduler+0x12c>)
 80064b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	22ff      	movs	r2, #255	; 0xff
 80064c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <xPortStartScheduler+0x130>)
 80064dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e4:	e009      	b.n	80064fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064e6:	4b2f      	ldr	r3, [pc, #188]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	4a2d      	ldr	r2, [pc, #180]	; (80065a4 <xPortStartScheduler+0x134>)
 80064ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d0ef      	beq.n	80064e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006506:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <xPortStartScheduler+0x134>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f1c3 0307 	rsb	r3, r3, #7
 800650e:	2b04      	cmp	r3, #4
 8006510:	d00a      	beq.n	8006528 <xPortStartScheduler+0xb8>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006528:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <xPortStartScheduler+0x134>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <xPortStartScheduler+0x134>)
 8006530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006532:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <xPortStartScheduler+0x134>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <xPortStartScheduler+0x134>)
 800653c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <xPortStartScheduler+0x138>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <xPortStartScheduler+0x138>)
 800654c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <xPortStartScheduler+0x138>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <xPortStartScheduler+0x138>)
 8006558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800655c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800655e:	f000 f8dd 	bl	800671c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <xPortStartScheduler+0x13c>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006568:	f000 f8fc 	bl	8006764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <xPortStartScheduler+0x140>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <xPortStartScheduler+0x140>)
 8006572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006578:	f7ff ff66 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800657c:	f7fe ffd2 	bl	8005524 <vTaskSwitchContext>
	prvTaskExitError();
 8006580:	f7ff ff22 	bl	80063c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	e000ed00 	.word	0xe000ed00
 8006594:	410fc271 	.word	0x410fc271
 8006598:	410fc270 	.word	0x410fc270
 800659c:	e000e400 	.word	0xe000e400
 80065a0:	20000fcc 	.word	0x20000fcc
 80065a4:	20000fd0 	.word	0x20000fd0
 80065a8:	e000ed20 	.word	0xe000ed20
 80065ac:	2000000c 	.word	0x2000000c
 80065b0:	e000ef34 	.word	0xe000ef34

080065b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	607b      	str	r3, [r7, #4]
}
 80065cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <vPortEnterCritical+0x58>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3301      	adds	r3, #1
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <vPortEnterCritical+0x58>)
 80065d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <vPortEnterCritical+0x58>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10f      	bne.n	8006600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <vPortEnterCritical+0x5c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <vPortEnterCritical+0x4c>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	603b      	str	r3, [r7, #0]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <vPortEnterCritical+0x4a>
	}
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	2000000c 	.word	0x2000000c
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800661a:	4b12      	ldr	r3, [pc, #72]	; (8006664 <vPortExitCritical+0x50>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vPortExitCritical+0x24>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <vPortExitCritical+0x50>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3b01      	subs	r3, #1
 800663e:	4a09      	ldr	r2, [pc, #36]	; (8006664 <vPortExitCritical+0x50>)
 8006640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <vPortExitCritical+0x50>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d105      	bne.n	8006656 <vPortExitCritical+0x42>
 800664a:	2300      	movs	r3, #0
 800664c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f383 8811 	msr	BASEPRI, r3
}
 8006654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	2000000c 	.word	0x2000000c
	...

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f01e 0f10 	tst.w	lr, #16
 8006680:	bf08      	it	eq
 8006682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006694:	f380 8811 	msr	BASEPRI, r0
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f7fe ff40 	bl	8005524 <vTaskSwitchContext>
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f380 8811 	msr	BASEPRI, r0
 80066ac:	bc09      	pop	{r0, r3}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b6:	f01e 0f10 	tst.w	lr, #16
 80066ba:	bf08      	it	eq
 80066bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066c0:	f380 8809 	msr	PSP, r0
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst>:
 80066d0:	200009a0 	.word	0x200009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f2:	f7fe fe59 	bl	80053a8 <xTaskIncrementTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <SysTick_Handler+0x40>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
}
 800670e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <vPortSetupTimerInterrupt+0x38>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <vPortSetupTimerInterrupt+0x3c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <vPortSetupTimerInterrupt+0x40>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <vPortSetupTimerInterrupt+0x44>)
 800673a:	3b01      	subs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000e010 	.word	0xe000e010
 8006754:	e000e018 	.word	0xe000e018
 8006758:	20000000 	.word	0x20000000
 800675c:	10624dd3 	.word	0x10624dd3
 8006760:	e000e014 	.word	0xe000e014

08006764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006774 <vPortEnableVFP+0x10>
 8006768:	6801      	ldr	r1, [r0, #0]
 800676a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800676e:	6001      	str	r1, [r0, #0]
 8006770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006772:	bf00      	nop
 8006774:	e000ed88 	.word	0xe000ed88

08006778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800677e:	f3ef 8305 	mrs	r3, IPSR
 8006782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b0f      	cmp	r3, #15
 8006788:	d914      	bls.n	80067b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <vPortValidateInterruptPriority+0x70>)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006794:	4b15      	ldr	r3, [pc, #84]	; (80067ec <vPortValidateInterruptPriority+0x74>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	7afa      	ldrb	r2, [r7, #11]
 800679a:	429a      	cmp	r2, r3
 800679c:	d20a      	bcs.n	80067b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067b4:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <vPortValidateInterruptPriority+0x78>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067bc:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <vPortValidateInterruptPriority+0x7c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d90a      	bls.n	80067da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	603b      	str	r3, [r7, #0]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <vPortValidateInterruptPriority+0x60>
	}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	e000e3f0 	.word	0xe000e3f0
 80067ec:	20000fcc 	.word	0x20000fcc
 80067f0:	e000ed0c 	.word	0xe000ed0c
 80067f4:	20000fd0 	.word	0x20000fd0

080067f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006804:	f7fe fd14 	bl	8005230 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006808:	4b58      	ldr	r3, [pc, #352]	; (800696c <pvPortMalloc+0x174>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006810:	f000 f910 	bl	8006a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006814:	4b56      	ldr	r3, [pc, #344]	; (8006970 <pvPortMalloc+0x178>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	f040 808e 	bne.w	800693e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01d      	beq.n	8006864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006828:	2208      	movs	r2, #8
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b00      	cmp	r3, #0
 8006838:	d014      	beq.n	8006864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f023 0307 	bic.w	r3, r3, #7
 8006840:	3308      	adds	r3, #8
 8006842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <pvPortMalloc+0x6c>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	617b      	str	r3, [r7, #20]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d069      	beq.n	800693e <pvPortMalloc+0x146>
 800686a:	4b42      	ldr	r3, [pc, #264]	; (8006974 <pvPortMalloc+0x17c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	d864      	bhi.n	800693e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006874:	4b40      	ldr	r3, [pc, #256]	; (8006978 <pvPortMalloc+0x180>)
 8006876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006878:	4b3f      	ldr	r3, [pc, #252]	; (8006978 <pvPortMalloc+0x180>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800687e:	e004      	b.n	800688a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <pvPortMalloc+0xa4>
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f1      	bne.n	8006880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800689c:	4b33      	ldr	r3, [pc, #204]	; (800696c <pvPortMalloc+0x174>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d04b      	beq.n	800693e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2208      	movs	r2, #8
 80068ac:	4413      	add	r3, r2
 80068ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	1ad2      	subs	r2, r2, r3
 80068c0:	2308      	movs	r3, #8
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d91f      	bls.n	8006908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4413      	add	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <pvPortMalloc+0xf8>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	613b      	str	r3, [r7, #16]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006902:	69b8      	ldr	r0, [r7, #24]
 8006904:	f000 f8f8 	bl	8006af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006908:	4b1a      	ldr	r3, [pc, #104]	; (8006974 <pvPortMalloc+0x17c>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a18      	ldr	r2, [pc, #96]	; (8006974 <pvPortMalloc+0x17c>)
 8006914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006916:	4b17      	ldr	r3, [pc, #92]	; (8006974 <pvPortMalloc+0x17c>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b18      	ldr	r3, [pc, #96]	; (800697c <pvPortMalloc+0x184>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d203      	bcs.n	800692a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006922:	4b14      	ldr	r3, [pc, #80]	; (8006974 <pvPortMalloc+0x17c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a15      	ldr	r2, [pc, #84]	; (800697c <pvPortMalloc+0x184>)
 8006928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	4b10      	ldr	r3, [pc, #64]	; (8006970 <pvPortMalloc+0x178>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	431a      	orrs	r2, r3
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800693e:	f7fe fc85 	bl	800524c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <pvPortMalloc+0x16a>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	60fb      	str	r3, [r7, #12]
}
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <pvPortMalloc+0x168>
	return pvReturn;
 8006962:	69fb      	ldr	r3, [r7, #28]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3728      	adds	r7, #40	; 0x28
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20001bdc 	.word	0x20001bdc
 8006970:	20001be8 	.word	0x20001be8
 8006974:	20001be0 	.word	0x20001be0
 8006978:	20001bd4 	.word	0x20001bd4
 800697c:	20001be4 	.word	0x20001be4

08006980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d048      	beq.n	8006a24 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006992:	2308      	movs	r3, #8
 8006994:	425b      	negs	r3, r3
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4413      	add	r3, r2
 800699a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	4b21      	ldr	r3, [pc, #132]	; (8006a2c <vPortFree+0xac>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4013      	ands	r3, r2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <vPortFree+0x44>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	60fb      	str	r3, [r7, #12]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <vPortFree+0x62>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	60bb      	str	r3, [r7, #8]
}
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <vPortFree+0xac>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d019      	beq.n	8006a24 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d115      	bne.n	8006a24 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <vPortFree+0xac>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	43db      	mvns	r3, r3
 8006a02:	401a      	ands	r2, r3
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a08:	f7fe fc12 	bl	8005230 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <vPortFree+0xb0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4413      	add	r3, r2
 8006a16:	4a06      	ldr	r2, [pc, #24]	; (8006a30 <vPortFree+0xb0>)
 8006a18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a1a:	6938      	ldr	r0, [r7, #16]
 8006a1c:	f000 f86c 	bl	8006af8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a20:	f7fe fc14 	bl	800524c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a24:	bf00      	nop
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20001be8 	.word	0x20001be8
 8006a30:	20001be0 	.word	0x20001be0

08006a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a40:	4b27      	ldr	r3, [pc, #156]	; (8006ae0 <prvHeapInit+0xac>)
 8006a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00c      	beq.n	8006a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3307      	adds	r3, #7
 8006a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0307 	bic.w	r3, r3, #7
 8006a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	4a1f      	ldr	r2, [pc, #124]	; (8006ae0 <prvHeapInit+0xac>)
 8006a64:	4413      	add	r3, r2
 8006a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ae4 <prvHeapInit+0xb0>)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a72:	4b1c      	ldr	r3, [pc, #112]	; (8006ae4 <prvHeapInit+0xb0>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a80:	2208      	movs	r2, #8
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0307 	bic.w	r3, r3, #7
 8006a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4a15      	ldr	r2, [pc, #84]	; (8006ae8 <prvHeapInit+0xb4>)
 8006a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a96:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <prvHeapInit+0xb4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a9e:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <prvHeapInit+0xb4>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	1ad2      	subs	r2, r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ab4:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <prvHeapInit+0xb4>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <prvHeapInit+0xb8>)
 8006ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	4a09      	ldr	r2, [pc, #36]	; (8006af0 <prvHeapInit+0xbc>)
 8006aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006acc:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <prvHeapInit+0xc0>)
 8006ace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ad2:	601a      	str	r2, [r3, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	20000fd4 	.word	0x20000fd4
 8006ae4:	20001bd4 	.word	0x20001bd4
 8006ae8:	20001bdc 	.word	0x20001bdc
 8006aec:	20001be4 	.word	0x20001be4
 8006af0:	20001be0 	.word	0x20001be0
 8006af4:	20001be8 	.word	0x20001be8

08006af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b00:	4b28      	ldr	r3, [pc, #160]	; (8006ba4 <prvInsertBlockIntoFreeList+0xac>)
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	e002      	b.n	8006b0c <prvInsertBlockIntoFreeList+0x14>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d8f7      	bhi.n	8006b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	4413      	add	r3, r2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d108      	bne.n	8006b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	441a      	add	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	441a      	add	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d118      	bne.n	8006b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d00d      	beq.n	8006b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	441a      	add	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	e008      	b.n	8006b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b76:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e003      	b.n	8006b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d002      	beq.n	8006b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b96:	bf00      	nop
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	20001bd4 	.word	0x20001bd4
 8006ba8:	20001bdc 	.word	0x20001bdc

08006bac <__libc_init_array>:
 8006bac:	b570      	push	{r4, r5, r6, lr}
 8006bae:	4d0d      	ldr	r5, [pc, #52]	; (8006be4 <__libc_init_array+0x38>)
 8006bb0:	4c0d      	ldr	r4, [pc, #52]	; (8006be8 <__libc_init_array+0x3c>)
 8006bb2:	1b64      	subs	r4, r4, r5
 8006bb4:	10a4      	asrs	r4, r4, #2
 8006bb6:	2600      	movs	r6, #0
 8006bb8:	42a6      	cmp	r6, r4
 8006bba:	d109      	bne.n	8006bd0 <__libc_init_array+0x24>
 8006bbc:	4d0b      	ldr	r5, [pc, #44]	; (8006bec <__libc_init_array+0x40>)
 8006bbe:	4c0c      	ldr	r4, [pc, #48]	; (8006bf0 <__libc_init_array+0x44>)
 8006bc0:	f000 f8f2 	bl	8006da8 <_init>
 8006bc4:	1b64      	subs	r4, r4, r5
 8006bc6:	10a4      	asrs	r4, r4, #2
 8006bc8:	2600      	movs	r6, #0
 8006bca:	42a6      	cmp	r6, r4
 8006bcc:	d105      	bne.n	8006bda <__libc_init_array+0x2e>
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bd4:	4798      	blx	r3
 8006bd6:	3601      	adds	r6, #1
 8006bd8:	e7ee      	b.n	8006bb8 <__libc_init_array+0xc>
 8006bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bde:	4798      	blx	r3
 8006be0:	3601      	adds	r6, #1
 8006be2:	e7f2      	b.n	8006bca <__libc_init_array+0x1e>
 8006be4:	08006f30 	.word	0x08006f30
 8006be8:	08006f30 	.word	0x08006f30
 8006bec:	08006f30 	.word	0x08006f30
 8006bf0:	08006f34 	.word	0x08006f34

08006bf4 <__retarget_lock_acquire_recursive>:
 8006bf4:	4770      	bx	lr

08006bf6 <__retarget_lock_release_recursive>:
 8006bf6:	4770      	bx	lr

08006bf8 <memcpy>:
 8006bf8:	440a      	add	r2, r1
 8006bfa:	4291      	cmp	r1, r2
 8006bfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c00:	d100      	bne.n	8006c04 <memcpy+0xc>
 8006c02:	4770      	bx	lr
 8006c04:	b510      	push	{r4, lr}
 8006c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c0e:	4291      	cmp	r1, r2
 8006c10:	d1f9      	bne.n	8006c06 <memcpy+0xe>
 8006c12:	bd10      	pop	{r4, pc}

08006c14 <memset>:
 8006c14:	4402      	add	r2, r0
 8006c16:	4603      	mov	r3, r0
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d100      	bne.n	8006c1e <memset+0xa>
 8006c1c:	4770      	bx	lr
 8006c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c22:	e7f9      	b.n	8006c18 <memset+0x4>

08006c24 <cleanup_glue>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	460c      	mov	r4, r1
 8006c28:	6809      	ldr	r1, [r1, #0]
 8006c2a:	4605      	mov	r5, r0
 8006c2c:	b109      	cbz	r1, 8006c32 <cleanup_glue+0xe>
 8006c2e:	f7ff fff9 	bl	8006c24 <cleanup_glue>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c3a:	f000 b869 	b.w	8006d10 <_free_r>
	...

08006c40 <_reclaim_reent>:
 8006c40:	4b2c      	ldr	r3, [pc, #176]	; (8006cf4 <_reclaim_reent+0xb4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4283      	cmp	r3, r0
 8006c46:	b570      	push	{r4, r5, r6, lr}
 8006c48:	4604      	mov	r4, r0
 8006c4a:	d051      	beq.n	8006cf0 <_reclaim_reent+0xb0>
 8006c4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c4e:	b143      	cbz	r3, 8006c62 <_reclaim_reent+0x22>
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d14a      	bne.n	8006cec <_reclaim_reent+0xac>
 8006c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c58:	6819      	ldr	r1, [r3, #0]
 8006c5a:	b111      	cbz	r1, 8006c62 <_reclaim_reent+0x22>
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f000 f857 	bl	8006d10 <_free_r>
 8006c62:	6961      	ldr	r1, [r4, #20]
 8006c64:	b111      	cbz	r1, 8006c6c <_reclaim_reent+0x2c>
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 f852 	bl	8006d10 <_free_r>
 8006c6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c6e:	b111      	cbz	r1, 8006c76 <_reclaim_reent+0x36>
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 f84d 	bl	8006d10 <_free_r>
 8006c76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c78:	b111      	cbz	r1, 8006c80 <_reclaim_reent+0x40>
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 f848 	bl	8006d10 <_free_r>
 8006c80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c82:	b111      	cbz	r1, 8006c8a <_reclaim_reent+0x4a>
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 f843 	bl	8006d10 <_free_r>
 8006c8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006c8c:	b111      	cbz	r1, 8006c94 <_reclaim_reent+0x54>
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 f83e 	bl	8006d10 <_free_r>
 8006c94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006c96:	b111      	cbz	r1, 8006c9e <_reclaim_reent+0x5e>
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 f839 	bl	8006d10 <_free_r>
 8006c9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006ca0:	b111      	cbz	r1, 8006ca8 <_reclaim_reent+0x68>
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 f834 	bl	8006d10 <_free_r>
 8006ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006caa:	b111      	cbz	r1, 8006cb2 <_reclaim_reent+0x72>
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 f82f 	bl	8006d10 <_free_r>
 8006cb2:	69a3      	ldr	r3, [r4, #24]
 8006cb4:	b1e3      	cbz	r3, 8006cf0 <_reclaim_reent+0xb0>
 8006cb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cb8:	4620      	mov	r0, r4
 8006cba:	4798      	blx	r3
 8006cbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006cbe:	b1b9      	cbz	r1, 8006cf0 <_reclaim_reent+0xb0>
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cc6:	f7ff bfad 	b.w	8006c24 <cleanup_glue>
 8006cca:	5949      	ldr	r1, [r1, r5]
 8006ccc:	b941      	cbnz	r1, 8006ce0 <_reclaim_reent+0xa0>
 8006cce:	3504      	adds	r5, #4
 8006cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cd2:	2d80      	cmp	r5, #128	; 0x80
 8006cd4:	68d9      	ldr	r1, [r3, #12]
 8006cd6:	d1f8      	bne.n	8006cca <_reclaim_reent+0x8a>
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 f819 	bl	8006d10 <_free_r>
 8006cde:	e7ba      	b.n	8006c56 <_reclaim_reent+0x16>
 8006ce0:	680e      	ldr	r6, [r1, #0]
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 f814 	bl	8006d10 <_free_r>
 8006ce8:	4631      	mov	r1, r6
 8006cea:	e7ef      	b.n	8006ccc <_reclaim_reent+0x8c>
 8006cec:	2500      	movs	r5, #0
 8006cee:	e7ef      	b.n	8006cd0 <_reclaim_reent+0x90>
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000010 	.word	0x20000010

08006cf8 <__malloc_lock>:
 8006cf8:	4801      	ldr	r0, [pc, #4]	; (8006d00 <__malloc_lock+0x8>)
 8006cfa:	f7ff bf7b 	b.w	8006bf4 <__retarget_lock_acquire_recursive>
 8006cfe:	bf00      	nop
 8006d00:	20001bec 	.word	0x20001bec

08006d04 <__malloc_unlock>:
 8006d04:	4801      	ldr	r0, [pc, #4]	; (8006d0c <__malloc_unlock+0x8>)
 8006d06:	f7ff bf76 	b.w	8006bf6 <__retarget_lock_release_recursive>
 8006d0a:	bf00      	nop
 8006d0c:	20001bec 	.word	0x20001bec

08006d10 <_free_r>:
 8006d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d12:	2900      	cmp	r1, #0
 8006d14:	d044      	beq.n	8006da0 <_free_r+0x90>
 8006d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d1a:	9001      	str	r0, [sp, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d22:	bfb8      	it	lt
 8006d24:	18e4      	addlt	r4, r4, r3
 8006d26:	f7ff ffe7 	bl	8006cf8 <__malloc_lock>
 8006d2a:	4a1e      	ldr	r2, [pc, #120]	; (8006da4 <_free_r+0x94>)
 8006d2c:	9801      	ldr	r0, [sp, #4]
 8006d2e:	6813      	ldr	r3, [r2, #0]
 8006d30:	b933      	cbnz	r3, 8006d40 <_free_r+0x30>
 8006d32:	6063      	str	r3, [r4, #4]
 8006d34:	6014      	str	r4, [r2, #0]
 8006d36:	b003      	add	sp, #12
 8006d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d3c:	f7ff bfe2 	b.w	8006d04 <__malloc_unlock>
 8006d40:	42a3      	cmp	r3, r4
 8006d42:	d908      	bls.n	8006d56 <_free_r+0x46>
 8006d44:	6825      	ldr	r5, [r4, #0]
 8006d46:	1961      	adds	r1, r4, r5
 8006d48:	428b      	cmp	r3, r1
 8006d4a:	bf01      	itttt	eq
 8006d4c:	6819      	ldreq	r1, [r3, #0]
 8006d4e:	685b      	ldreq	r3, [r3, #4]
 8006d50:	1949      	addeq	r1, r1, r5
 8006d52:	6021      	streq	r1, [r4, #0]
 8006d54:	e7ed      	b.n	8006d32 <_free_r+0x22>
 8006d56:	461a      	mov	r2, r3
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	b10b      	cbz	r3, 8006d60 <_free_r+0x50>
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	d9fa      	bls.n	8006d56 <_free_r+0x46>
 8006d60:	6811      	ldr	r1, [r2, #0]
 8006d62:	1855      	adds	r5, r2, r1
 8006d64:	42a5      	cmp	r5, r4
 8006d66:	d10b      	bne.n	8006d80 <_free_r+0x70>
 8006d68:	6824      	ldr	r4, [r4, #0]
 8006d6a:	4421      	add	r1, r4
 8006d6c:	1854      	adds	r4, r2, r1
 8006d6e:	42a3      	cmp	r3, r4
 8006d70:	6011      	str	r1, [r2, #0]
 8006d72:	d1e0      	bne.n	8006d36 <_free_r+0x26>
 8006d74:	681c      	ldr	r4, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	6053      	str	r3, [r2, #4]
 8006d7a:	4421      	add	r1, r4
 8006d7c:	6011      	str	r1, [r2, #0]
 8006d7e:	e7da      	b.n	8006d36 <_free_r+0x26>
 8006d80:	d902      	bls.n	8006d88 <_free_r+0x78>
 8006d82:	230c      	movs	r3, #12
 8006d84:	6003      	str	r3, [r0, #0]
 8006d86:	e7d6      	b.n	8006d36 <_free_r+0x26>
 8006d88:	6825      	ldr	r5, [r4, #0]
 8006d8a:	1961      	adds	r1, r4, r5
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	bf04      	itt	eq
 8006d90:	6819      	ldreq	r1, [r3, #0]
 8006d92:	685b      	ldreq	r3, [r3, #4]
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	bf04      	itt	eq
 8006d98:	1949      	addeq	r1, r1, r5
 8006d9a:	6021      	streq	r1, [r4, #0]
 8006d9c:	6054      	str	r4, [r2, #4]
 8006d9e:	e7ca      	b.n	8006d36 <_free_r+0x26>
 8006da0:	b003      	add	sp, #12
 8006da2:	bd30      	pop	{r4, r5, pc}
 8006da4:	20001bf0 	.word	0x20001bf0

08006da8 <_init>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr

08006db4 <_fini>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	bf00      	nop
 8006db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dba:	bc08      	pop	{r3}
 8006dbc:	469e      	mov	lr, r3
 8006dbe:	4770      	bx	lr
