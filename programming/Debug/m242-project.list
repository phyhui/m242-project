
m242-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007020  08007020  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007020  08007020  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007020  08007020  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007024  08007024  00017024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001b98  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001c10  20001c10  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b0a2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000360a  00000000  00000000  0003b14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e8  00000000  00000000  0003fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002290d  00000000  00000000  00040e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000199aa  00000000  00000000  0006377d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d39d4  00000000  00000000  0007d127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150afb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000570c  00000000  00000000  00150b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ea8 	.word	0x08006ea8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006ea8 	.word	0x08006ea8

080001e0 <LED_Set>:
    }
}

// Sets the state of the LED to the given state
void LED_Set(int led, bool state)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	460b      	mov	r3, r1
 80001ea:	70fb      	strb	r3, [r7, #3]
    // Invert the state because the LEDs are active low (on = 0, off = 1)
    switch (led)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b03      	cmp	r3, #3
 80001f0:	d835      	bhi.n	800025e <LED_Set+0x7e>
 80001f2:	a201      	add	r2, pc, #4	; (adr r2, 80001f8 <LED_Set+0x18>)
 80001f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f8:	08000209 	.word	0x08000209
 80001fc:	0800021f 	.word	0x0800021f
 8000200:	08000235 	.word	0x08000235
 8000204:	0800024b 	.word	0x0800024b
    {
    case LED_1:
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, !state);
 8000208:	78fb      	ldrb	r3, [r7, #3]
 800020a:	f083 0301 	eor.w	r3, r3, #1
 800020e:	b2db      	uxtb	r3, r3
 8000210:	461a      	mov	r2, r3
 8000212:	2120      	movs	r1, #32
 8000214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000218:	f001 f9da 	bl	80015d0 <HAL_GPIO_WritePin>
        break;
 800021c:	e020      	b.n	8000260 <LED_Set+0x80>
    case LED_2:
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, !state);
 800021e:	78fb      	ldrb	r3, [r7, #3]
 8000220:	f083 0301 	eor.w	r3, r3, #1
 8000224:	b2db      	uxtb	r3, r3
 8000226:	461a      	mov	r2, r3
 8000228:	2140      	movs	r1, #64	; 0x40
 800022a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022e:	f001 f9cf 	bl	80015d0 <HAL_GPIO_WritePin>
        break;
 8000232:	e015      	b.n	8000260 <LED_Set+0x80>
    case LED_3:
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, !state);
 8000234:	78fb      	ldrb	r3, [r7, #3]
 8000236:	f083 0301 	eor.w	r3, r3, #1
 800023a:	b2db      	uxtb	r3, r3
 800023c:	461a      	mov	r2, r3
 800023e:	2180      	movs	r1, #128	; 0x80
 8000240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000244:	f001 f9c4 	bl	80015d0 <HAL_GPIO_WritePin>
        break;
 8000248:	e00a      	b.n	8000260 <LED_Set+0x80>
    case LED_4:
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, !state);
 800024a:	78fb      	ldrb	r3, [r7, #3]
 800024c:	f083 0301 	eor.w	r3, r3, #1
 8000250:	b2db      	uxtb	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	2140      	movs	r1, #64	; 0x40
 8000256:	4804      	ldr	r0, [pc, #16]	; (8000268 <LED_Set+0x88>)
 8000258:	f001 f9ba 	bl	80015d0 <HAL_GPIO_WritePin>
        break;
 800025c:	e000      	b.n	8000260 <LED_Set+0x80>
    default:
        break;
 800025e:	bf00      	nop
    }
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	48000400 	.word	0x48000400

0800026c <WritePort>:
static int actdp;     // Maske f�r den aktuellen Dezimalpunkt
static int actflash;  // noch nicht untertst�zt


void WritePort(int val)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	int i;
	static int out;

	out = val;
 8000274:	4a1c      	ldr	r2, [pc, #112]	; (80002e8 <WritePort+0x7c>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6013      	str	r3, [r2, #0]

	for (i=0;i<=7;i++)
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	e02a      	b.n	80002d6 <WritePort+0x6a>
	{
	  WRITE_SFTCLK_0;
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028a:	f001 f9a1 	bl	80015d0 <HAL_GPIO_WritePin>
	  if (out & 0x01)  WRITE_SDI_Pin_1;  // Daten Bitweise ausgeben
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <WritePort+0x7c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d007      	beq.n	80002aa <WritePort+0x3e>
 800029a:	2201      	movs	r2, #1
 800029c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a4:	f001 f994 	bl	80015d0 <HAL_GPIO_WritePin>
 80002a8:	e006      	b.n	80002b8 <WritePort+0x4c>
	  else             WRITE_SDI_Pin_0;
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b4:	f001 f98c 	bl	80015d0 <HAL_GPIO_WritePin>
	  out = out>>1;
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <WritePort+0x7c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	105b      	asrs	r3, r3, #1
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <WritePort+0x7c>)
 80002c0:	6013      	str	r3, [r2, #0]
	  WRITE_SFTCLK_1;
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f001 f980 	bl	80015d0 <HAL_GPIO_WritePin>
	for (i=0;i<=7;i++)
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	3301      	adds	r3, #1
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	2b07      	cmp	r3, #7
 80002da:	ddd1      	ble.n	8000280 <WritePort+0x14>
	}
}
 80002dc:	bf00      	nop
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	200000a0 	.word	0x200000a0

080002ec <WriteValue>:


void WriteValue(int digit)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
   static int disable;
   static int flashcount;
   int val = actvalue;
 80002f4:	4b6e      	ldr	r3, [pc, #440]	; (80004b0 <WriteValue+0x1c4>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	60fb      	str	r3, [r7, #12]

   int out;
   int out_dp = 0xFF;
 80002fa:	23ff      	movs	r3, #255	; 0xff
 80002fc:	613b      	str	r3, [r7, #16]


  switch (digit)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b03      	cmp	r3, #3
 8000302:	d86a      	bhi.n	80003da <WriteValue+0xee>
 8000304:	a201      	add	r2, pc, #4	; (adr r2, 800030c <WriteValue+0x20>)
 8000306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030a:	bf00      	nop
 800030c:	0800031d 	.word	0x0800031d
 8000310:	08000349 	.word	0x08000349
 8000314:	08000381 	.word	0x08000381
 8000318:	080003b9 	.word	0x080003b9
  {
  case 0:   out = val % 10;               // Stelle 0
 800031c:	68fa      	ldr	r2, [r7, #12]
 800031e:	4b65      	ldr	r3, [pc, #404]	; (80004b4 <WriteValue+0x1c8>)
 8000320:	fb83 1302 	smull	r1, r3, r3, r2
 8000324:	1099      	asrs	r1, r3, #2
 8000326:	17d3      	asrs	r3, r2, #31
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	460b      	mov	r3, r1
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	440b      	add	r3, r1
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	1ad3      	subs	r3, r2, r3
 8000334:	617b      	str	r3, [r7, #20]
            if (actdp & SEG_Driver_DP_1)  out_dp = SEGMENT_DP;
 8000336:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <WriteValue+0x1cc>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	2b00      	cmp	r3, #0
 8000340:	d04e      	beq.n	80003e0 <WriteValue+0xf4>
 8000342:	23fe      	movs	r3, #254	; 0xfe
 8000344:	613b      	str	r3, [r7, #16]
            break;
 8000346:	e04b      	b.n	80003e0 <WriteValue+0xf4>
  case 1:   out = (val / 10) % 10;        // Stelle 1
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	4a5a      	ldr	r2, [pc, #360]	; (80004b4 <WriteValue+0x1c8>)
 800034c:	fb82 1203 	smull	r1, r2, r2, r3
 8000350:	1092      	asrs	r2, r2, #2
 8000352:	17db      	asrs	r3, r3, #31
 8000354:	1ad2      	subs	r2, r2, r3
 8000356:	4b57      	ldr	r3, [pc, #348]	; (80004b4 <WriteValue+0x1c8>)
 8000358:	fb83 1302 	smull	r1, r3, r3, r2
 800035c:	1099      	asrs	r1, r3, #2
 800035e:	17d3      	asrs	r3, r2, #31
 8000360:	1ac9      	subs	r1, r1, r3
 8000362:	460b      	mov	r3, r1
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	440b      	add	r3, r1
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	617b      	str	r3, [r7, #20]
            if (actdp & SEG_Driver_DP_2)  out_dp = SEGMENT_DP;
 800036e:	4b52      	ldr	r3, [pc, #328]	; (80004b8 <WriteValue+0x1cc>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f003 0302 	and.w	r3, r3, #2
 8000376:	2b00      	cmp	r3, #0
 8000378:	d034      	beq.n	80003e4 <WriteValue+0xf8>
 800037a:	23fe      	movs	r3, #254	; 0xfe
 800037c:	613b      	str	r3, [r7, #16]
            break;
 800037e:	e031      	b.n	80003e4 <WriteValue+0xf8>
  case 2:   out = (val / 100 % 10);       // Stelle 2
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	4a4e      	ldr	r2, [pc, #312]	; (80004bc <WriteValue+0x1d0>)
 8000384:	fb82 1203 	smull	r1, r2, r2, r3
 8000388:	1152      	asrs	r2, r2, #5
 800038a:	17db      	asrs	r3, r3, #31
 800038c:	1ad2      	subs	r2, r2, r3
 800038e:	4b49      	ldr	r3, [pc, #292]	; (80004b4 <WriteValue+0x1c8>)
 8000390:	fb83 1302 	smull	r1, r3, r3, r2
 8000394:	1099      	asrs	r1, r3, #2
 8000396:	17d3      	asrs	r3, r2, #31
 8000398:	1ac9      	subs	r1, r1, r3
 800039a:	460b      	mov	r3, r1
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	440b      	add	r3, r1
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	1ad3      	subs	r3, r2, r3
 80003a4:	617b      	str	r3, [r7, #20]
            if (actdp & SEG_Driver_DP_3)  out_dp = SEGMENT_DP;
 80003a6:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <WriteValue+0x1cc>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f003 0304 	and.w	r3, r3, #4
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d01a      	beq.n	80003e8 <WriteValue+0xfc>
 80003b2:	23fe      	movs	r3, #254	; 0xfe
 80003b4:	613b      	str	r3, [r7, #16]
            break;
 80003b6:	e017      	b.n	80003e8 <WriteValue+0xfc>
  case 3:   out = val / 1000;             // Stelle 3
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	4a41      	ldr	r2, [pc, #260]	; (80004c0 <WriteValue+0x1d4>)
 80003bc:	fb82 1203 	smull	r1, r2, r2, r3
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	17db      	asrs	r3, r3, #31
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	617b      	str	r3, [r7, #20]
            if (actdp & SEG_Driver_DP_4)  out_dp = SEGMENT_DP;
 80003c8:	4b3b      	ldr	r3, [pc, #236]	; (80004b8 <WriteValue+0x1cc>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f003 0308 	and.w	r3, r3, #8
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d00b      	beq.n	80003ec <WriteValue+0x100>
 80003d4:	23fe      	movs	r3, #254	; 0xfe
 80003d6:	613b      	str	r3, [r7, #16]
            break;
 80003d8:	e008      	b.n	80003ec <WriteValue+0x100>
  default:  out = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	e006      	b.n	80003ee <WriteValue+0x102>
            break;
 80003e0:	bf00      	nop
 80003e2:	e004      	b.n	80003ee <WriteValue+0x102>
            break;
 80003e4:	bf00      	nop
 80003e6:	e002      	b.n	80003ee <WriteValue+0x102>
            break;
 80003e8:	bf00      	nop
 80003ea:	e000      	b.n	80003ee <WriteValue+0x102>
            break;
 80003ec:	bf00      	nop
  }


  WRITE_LCHCLK_0;                          // Daten starten
 80003ee:	2200      	movs	r2, #0
 80003f0:	2120      	movs	r1, #32
 80003f2:	4834      	ldr	r0, [pc, #208]	; (80004c4 <WriteValue+0x1d8>)
 80003f4:	f001 f8ec 	bl	80015d0 <HAL_GPIO_WritePin>

  // Blinken bearbeiten
  switch(actflash)
 80003f8:	4b33      	ldr	r3, [pc, #204]	; (80004c8 <WriteValue+0x1dc>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d00a      	beq.n	8000416 <WriteValue+0x12a>
 8000400:	2b02      	cmp	r3, #2
 8000402:	d003      	beq.n	800040c <WriteValue+0x120>
  {
  case SEG_Driver_FLASH_OFF:  // blinken ausgeschaltet
  default:                    disable = 0;
 8000404:	4b31      	ldr	r3, [pc, #196]	; (80004cc <WriteValue+0x1e0>)
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
	                          break;
 800040a:	e023      	b.n	8000454 <WriteValue+0x168>
  case SEG_Driver_FLASH_FAST: flashcount =flashcount+3;
 800040c:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <WriteValue+0x1e4>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3303      	adds	r3, #3
 8000412:	4a2f      	ldr	r2, [pc, #188]	; (80004d0 <WriteValue+0x1e4>)
 8000414:	6013      	str	r3, [r2, #0]
  case SEG_Driver_FLASH_SLOW: flashcount++;
 8000416:	4b2e      	ldr	r3, [pc, #184]	; (80004d0 <WriteValue+0x1e4>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	3301      	adds	r3, #1
 800041c:	4a2c      	ldr	r2, [pc, #176]	; (80004d0 <WriteValue+0x1e4>)
 800041e:	6013      	str	r3, [r2, #0]
                              if (!(flashcount%100))     //   100 * 5ms = 500ms => 1s Periodenzeit = 1Hz für langsames blinken
 8000420:	4b2b      	ldr	r3, [pc, #172]	; (80004d0 <WriteValue+0x1e4>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b25      	ldr	r3, [pc, #148]	; (80004bc <WriteValue+0x1d0>)
 8000426:	fb83 1302 	smull	r1, r3, r3, r2
 800042a:	1159      	asrs	r1, r3, #5
 800042c:	17d3      	asrs	r3, r2, #31
 800042e:	1acb      	subs	r3, r1, r3
 8000430:	2164      	movs	r1, #100	; 0x64
 8000432:	fb01 f303 	mul.w	r3, r1, r3
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	2b00      	cmp	r3, #0
 800043a:	d10a      	bne.n	8000452 <WriteValue+0x166>
                              {
                            	 if (disable) disable = 0;
 800043c:	4b23      	ldr	r3, [pc, #140]	; (80004cc <WriteValue+0x1e0>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d003      	beq.n	800044c <WriteValue+0x160>
 8000444:	4b21      	ldr	r3, [pc, #132]	; (80004cc <WriteValue+0x1e0>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
                            	 else         disable = 1;
                              }
                              break;
 800044a:	e002      	b.n	8000452 <WriteValue+0x166>
                            	 else         disable = 1;
 800044c:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <WriteValue+0x1e0>)
 800044e:	2201      	movs	r2, #1
 8000450:	601a      	str	r2, [r3, #0]
                              break;
 8000452:	bf00      	nop
  }

  if (actvalue<= 9999 && actvalue >=0 && !disable)   WritePort(SEGMENT_MAP[out] & out_dp);    // LSB = 7-Segment
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <WriteValue+0x1c4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f242 720f 	movw	r2, #9999	; 0x270f
 800045c:	4293      	cmp	r3, r2
 800045e:	dc12      	bgt.n	8000486 <WriteValue+0x19a>
 8000460:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <WriteValue+0x1c4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	db0e      	blt.n	8000486 <WriteValue+0x19a>
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <WriteValue+0x1e0>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d10a      	bne.n	8000486 <WriteValue+0x19a>
 8000470:	4a18      	ldr	r2, [pc, #96]	; (80004d4 <WriteValue+0x1e8>)
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	4413      	add	r3, r2
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
 800047a:	693b      	ldr	r3, [r7, #16]
 800047c:	4013      	ands	r3, r2
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff fef4 	bl	800026c <WritePort>
 8000484:	e004      	b.n	8000490 <WriteValue+0x1a4>
  else                                               WritePort(0xFF & out_dp);                // Anzeige Dunkel
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff feee 	bl	800026c <WritePort>
  WritePort(SEGMENT_SELECT[digit]);        // MSB = Anzeigen Select
 8000490:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <WriteValue+0x1ec>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4413      	add	r3, r2
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff fee7 	bl	800026c <WritePort>

  WRITE_LCHCLK_1;                          // Alle Daten �bernehmen
 800049e:	2201      	movs	r2, #1
 80004a0:	2120      	movs	r1, #32
 80004a2:	4808      	ldr	r0, [pc, #32]	; (80004c4 <WriteValue+0x1d8>)
 80004a4:	f001 f894 	bl	80015d0 <HAL_GPIO_WritePin>
}
 80004a8:	bf00      	nop
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000094 	.word	0x20000094
 80004b4:	66666667 	.word	0x66666667
 80004b8:	20000098 	.word	0x20000098
 80004bc:	51eb851f 	.word	0x51eb851f
 80004c0:	10624dd3 	.word	0x10624dd3
 80004c4:	48000400 	.word	0x48000400
 80004c8:	2000009c 	.word	0x2000009c
 80004cc:	200000a4 	.word	0x200000a4
 80004d0:	200000a8 	.word	0x200000a8
 80004d4:	08006f0c 	.word	0x08006f0c
 80004d8:	08006f18 	.word	0x08006f18

080004dc <SEG_Driver_Write>:



void SEG_Driver_Write(int value, int dp, int flash)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
 actvalue= value;  // Maximalwert 9999
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <SEG_Driver_Write+0x2c>)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6013      	str	r3, [r2, #0]
 actdp   = dp;
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <SEG_Driver_Write+0x30>)
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	6013      	str	r3, [r2, #0]
 actflash = flash;
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <SEG_Driver_Write+0x34>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6013      	str	r3, [r2, #0]

}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000094 	.word	0x20000094
 800050c:	20000098 	.word	0x20000098
 8000510:	2000009c 	.word	0x2000009c

08000514 <SEG_Driver_Task_5ms>:

void SEG_Driver_Task_5ms(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  static int actdigit;

  actdigit++;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <SEG_Driver_Task_5ms+0x2c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a08      	ldr	r2, [pc, #32]	; (8000540 <SEG_Driver_Task_5ms+0x2c>)
 8000520:	6013      	str	r3, [r2, #0]
  WriteValue(actdigit % 4);
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <SEG_Driver_Task_5ms+0x2c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	425a      	negs	r2, r3
 8000528:	f003 0303 	and.w	r3, r3, #3
 800052c:	f002 0203 	and.w	r2, r2, #3
 8000530:	bf58      	it	pl
 8000532:	4253      	negpl	r3, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fed9 	bl	80002ec <WriteValue>
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200000ac 	.word	0x200000ac

08000544 <Taster_Treiber_Init_Task>:
//  5.     G L O B A L    F U N C T I O N S
//  ---------------------------------------

// Reads the state of the given taster and saves it to the static variable
void Taster_Treiber_Init_Task(void *argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    // Invert the state because the taster is active low (on = 0, off = 1)
    while (true)
    {
        TASTER_1_STATUS = !HAL_GPIO_ReadPin(GPIOA, TASTER_1_Pin);
 800054c:	2102      	movs	r1, #2
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f001 f825 	bl	80015a0 <HAL_GPIO_ReadPin>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	bf0c      	ite	eq
 800055c:	2301      	moveq	r3, #1
 800055e:	2300      	movne	r3, #0
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <Taster_Treiber_Init_Task+0x5c>)
 8000564:	701a      	strb	r2, [r3, #0]
        TASTER_2_STATUS = !HAL_GPIO_ReadPin(GPIOA, TASTER_2_Pin);
 8000566:	2110      	movs	r1, #16
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f001 f818 	bl	80015a0 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	bf0c      	ite	eq
 8000576:	2301      	moveq	r3, #1
 8000578:	2300      	movne	r3, #0
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <Taster_Treiber_Init_Task+0x60>)
 800057e:	701a      	strb	r2, [r3, #0]
        TASTER_3_STATUS = !HAL_GPIO_ReadPin(TASTER_3_GPIO_Port, TASTER_3_Pin);
 8000580:	2101      	movs	r1, #1
 8000582:	4809      	ldr	r0, [pc, #36]	; (80005a8 <Taster_Treiber_Init_Task+0x64>)
 8000584:	f001 f80c 	bl	80015a0 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <Taster_Treiber_Init_Task+0x68>)
 8000596:	701a      	strb	r2, [r3, #0]

        // Wait 50ms to avoid bouncing
        osDelay(50);
 8000598:	2032      	movs	r0, #50	; 0x32
 800059a:	f003 ff29 	bl	80043f0 <osDelay>
        TASTER_1_STATUS = !HAL_GPIO_ReadPin(GPIOA, TASTER_1_Pin);
 800059e:	e7d5      	b.n	800054c <Taster_Treiber_Init_Task+0x8>
 80005a0:	200000b0 	.word	0x200000b0
 80005a4:	200000b1 	.word	0x200000b1
 80005a8:	48000400 	.word	0x48000400
 80005ac:	200000b2 	.word	0x200000b2

080005b0 <Taster_Get>:
    }
}

// Reads the current state of the given taster and returns it
bool Taster_Get(int taster)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    switch (taster)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d00f      	beq.n	80005de <Taster_Get+0x2e>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	dc0f      	bgt.n	80005e4 <Taster_Get+0x34>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <Taster_Get+0x22>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d003      	beq.n	80005d8 <Taster_Get+0x28>
 80005d0:	e008      	b.n	80005e4 <Taster_Get+0x34>
    {
    case TASTER_1:
        return TASTER_1_STATUS;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <Taster_Get+0x44>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	e006      	b.n	80005e6 <Taster_Get+0x36>
    case TASTER_2:
        return TASTER_2_STATUS;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <Taster_Get+0x48>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	e003      	b.n	80005e6 <Taster_Get+0x36>
    case TASTER_3:
        return TASTER_3_STATUS;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <Taster_Get+0x4c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	e000      	b.n	80005e6 <Taster_Get+0x36>
    default:
        return false;
 80005e4:	2300      	movs	r3, #0
    }
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000b0 	.word	0x200000b0
 80005f8:	200000b1 	.word	0x200000b1
 80005fc:	200000b2 	.word	0x200000b2

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fd2a 	bl	800105c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f836 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f914 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f8e2 	bl	80007d8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000614:	f000 f892 	bl	800073c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000618:	f003 fdd8 	bl	80041cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <main+0x54>)
 800061e:	2100      	movs	r1, #0
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <main+0x58>)
 8000622:	f003 fe3b 	bl	800429c <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0c      	ldr	r2, [pc, #48]	; (800065c <main+0x5c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of tasterTask */
  tasterTaskHandle = osThreadNew(Taster_Treiber_Task, NULL, &tasterTask_attributes);
 800062c:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <main+0x60>)
 800062e:	2100      	movs	r1, #0
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <main+0x64>)
 8000632:	f003 fe33 	bl	800429c <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <main+0x68>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <main+0x6c>)
 800063e:	2100      	movs	r1, #0
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <main+0x70>)
 8000642:	f003 fe2b 	bl	800429c <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <main+0x74>)
 800064a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800064c:	f003 fdf2 	bl	8004234 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0x50>
 8000652:	bf00      	nop
 8000654:	08006f1c 	.word	0x08006f1c
 8000658:	08000965 	.word	0x08000965
 800065c:	20000188 	.word	0x20000188
 8000660:	08006f40 	.word	0x08006f40
 8000664:	08000d35 	.word	0x08000d35
 8000668:	2000018c 	.word	0x2000018c
 800066c:	08006f64 	.word	0x08006f64
 8000670:	08000d4b 	.word	0x08000d4b
 8000674:	20000190 	.word	0x20000190

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b0a6      	sub	sp, #152	; 0x98
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000682:	2228      	movs	r2, #40	; 0x28
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f006 fb44 	bl	8006d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2258      	movs	r2, #88	; 0x58
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 fb36 	bl	8006d14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 ffac 	bl	8001634 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006e2:	f000 fb4f 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f001 ffea 	bl	80026dc <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 fb39 	bl	8000d84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM34;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <SystemClock_Config+0xc0>)
 8000714:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800071a:	2300      	movs	r3, #0
 800071c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fa43 	bl	8002bac <HAL_RCCEx_PeriphCLKConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800072c:	f000 fb2a 	bl	8000d84 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3798      	adds	r7, #152	; 0x98
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	00200002 	.word	0x00200002

0800073c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_TIM3_Init+0x94>)
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <MX_TIM3_Init+0x98>)
 800075e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000-1;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_TIM3_Init+0x94>)
 8000762:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000766:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_TIM3_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_TIM3_Init+0x94>)
 8000770:	22fa      	movs	r2, #250	; 0xfa
 8000772:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_TIM3_Init+0x94>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_TIM3_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <MX_TIM3_Init+0x94>)
 8000782:	f002 fc31 	bl	8002fe8 <HAL_TIM_Base_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800078c:	f000 fafa 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	4619      	mov	r1, r3
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <MX_TIM3_Init+0x94>)
 800079e:	f002 fe0a 	bl	80033b6 <HAL_TIM_ConfigClockSource>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007a8:	f000 faec 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_TIM3_Init+0x94>)
 80007ba:	f003 f825 	bl	8003808 <HAL_TIMEx_MasterConfigSynchronization>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007c4:	f000 fade 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000b4 	.word	0x200000b4
 80007d4:	40000400 	.word	0x40000400

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART2_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007e4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800081c:	f003 f89e 	bl	800395c <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 faad 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000100 	.word	0x20000100
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b42      	ldr	r3, [pc, #264]	; (8000958 <MX_GPIO_Init+0x120>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a41      	ldr	r2, [pc, #260]	; (8000958 <MX_GPIO_Init+0x120>)
 8000854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000858:	6153      	str	r3, [r2, #20]
 800085a:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <MX_GPIO_Init+0x120>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000866:	4b3c      	ldr	r3, [pc, #240]	; (8000958 <MX_GPIO_Init+0x120>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a3b      	ldr	r2, [pc, #236]	; (8000958 <MX_GPIO_Init+0x120>)
 800086c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b39      	ldr	r3, [pc, #228]	; (8000958 <MX_GPIO_Init+0x120>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b36      	ldr	r3, [pc, #216]	; (8000958 <MX_GPIO_Init+0x120>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a35      	ldr	r2, [pc, #212]	; (8000958 <MX_GPIO_Init+0x120>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6153      	str	r3, [r2, #20]
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <MX_GPIO_Init+0x120>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_GPIO_Init+0x120>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <MX_GPIO_Init+0x120>)
 800089c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <MX_GPIO_Init+0x120>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|OUT_7SEG_SFTCLK_Pin
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 fe8a 	bl	80015d0 <HAL_GPIO_WritePin>
                          |OUT_7SEG_SDI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_Buzzer_Pin|OUT_7SEGLCHCLK_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2168      	movs	r1, #104	; 0x68
 80008c0:	4826      	ldr	r0, [pc, #152]	; (800095c <MX_GPIO_Init+0x124>)
 80008c2:	f000 fe85 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4820      	ldr	r0, [pc, #128]	; (8000960 <MX_GPIO_Init+0x128>)
 80008de:	f000 fcd5 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : TASTER_1_Pin TASTER_2_Pin */
  GPIO_InitStruct.Pin = TASTER_1_Pin|TASTER_2_Pin;
 80008e2:	2312      	movs	r3, #18
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f000 fcc8 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin OUT_7SEG_SFTCLK_Pin
                           OUT_7SEG_SDI_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|OUT_7SEG_SFTCLK_Pin
 80008fc:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000900:	617b      	str	r3, [r7, #20]
                          |OUT_7SEG_SDI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f000 fcb8 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : TASTER_3_Pin */
  GPIO_InitStruct.Pin = TASTER_3_Pin;
 800091c:	2301      	movs	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TASTER_3_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	480b      	ldr	r0, [pc, #44]	; (800095c <MX_GPIO_Init+0x124>)
 8000930:	f000 fcac 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_Buzzer_Pin OUT_7SEGLCHCLK_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = OUT_Buzzer_Pin|OUT_7SEGLCHCLK_Pin|LED_4_Pin;
 8000934:	2368      	movs	r3, #104	; 0x68
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_GPIO_Init+0x124>)
 800094c:	f000 fc9e 	bl	800128c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	48000400 	.word	0x48000400
 8000960:	48000800 	.word	0x48000800

08000964 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_TogglePin(OUT_Buzzer_GPIO_Port, OUT_Buzzer_Pin);
 800096c:	2108      	movs	r1, #8
 800096e:	4859      	ldr	r0, [pc, #356]	; (8000ad4 <StartDefaultTask+0x170>)
 8000970:	f000 fe46 	bl	8001600 <HAL_GPIO_TogglePin>

  LED_Set(LED_1, 0);
 8000974:	2100      	movs	r1, #0
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fc32 	bl	80001e0 <LED_Set>
  LED_Set(LED_2, 0);
 800097c:	2100      	movs	r1, #0
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff fc2e 	bl	80001e0 <LED_Set>
  LED_Set(LED_3, 0);
 8000984:	2100      	movs	r1, #0
 8000986:	2002      	movs	r0, #2
 8000988:	f7ff fc2a 	bl	80001e0 <LED_Set>
  LED_Set(LED_4, 1);
 800098c:	2101      	movs	r1, #1
 800098e:	2003      	movs	r0, #3
 8000990:	f7ff fc26 	bl	80001e0 <LED_Set>
  /* Infinite loop */
  while(1)
  {
	  while(mode == 0){
 8000994:	e03d      	b.n	8000a12 <StartDefaultTask+0xae>
		  LED_Set(LED_2, 0);
 8000996:	2100      	movs	r1, #0
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fc21 	bl	80001e0 <LED_Set>
		  LED_Set(LED_1, 1);
 800099e:	2101      	movs	r1, #1
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fc1d 	bl	80001e0 <LED_Set>
		  if(Taster_Get(TASTER_3)){
 80009a6:	2002      	movs	r0, #2
 80009a8:	f7ff fe02 	bl	80005b0 <Taster_Get>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00f      	beq.n	80009d2 <StartDefaultTask+0x6e>
			  switchMode();
 80009b2:	f000 f983 	bl	8000cbc <switchMode>
			  if(mode != 1){
 80009b6:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <StartDefaultTask+0x174>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d009      	beq.n	80009d2 <StartDefaultTask+0x6e>
				  stopuhr = 0;
 80009be:	4b47      	ldr	r3, [pc, #284]	; (8000adc <StartDefaultTask+0x178>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
				  SEG_Driver_Write(stopuhr, SEG_Driver_DP_2 | SEG_Driver_DP_4,0);
 80009c4:	4b45      	ldr	r3, [pc, #276]	; (8000adc <StartDefaultTask+0x178>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2200      	movs	r2, #0
 80009ca:	210a      	movs	r1, #10
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fd85 	bl	80004dc <SEG_Driver_Write>
			  }
		  }
		  if(Taster_Get(TASTER_1)){
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fdec 	bl	80005b0 <Taster_Get>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d00c      	beq.n	80009f8 <StartDefaultTask+0x94>
			  beep(100);
 80009de:	2064      	movs	r0, #100	; 0x64
 80009e0:	f000 f886 	bl	8000af0 <beep>
			  stopuhrIsRuning = 1;
 80009e4:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <StartDefaultTask+0x17c>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
			  LED_Set(LED_3, 1);
 80009ea:	2101      	movs	r1, #1
 80009ec:	2002      	movs	r0, #2
 80009ee:	f7ff fbf7 	bl	80001e0 <LED_Set>
		  }
		  while(stopuhrIsRuning == 1 && mode == 0){
 80009f2:	e001      	b.n	80009f8 <StartDefaultTask+0x94>
			  stopuhrRunning();
 80009f4:	f000 f8fe 	bl	8000bf4 <stopuhrRunning>
		  while(stopuhrIsRuning == 1 && mode == 0){
 80009f8:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <StartDefaultTask+0x17c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d103      	bne.n	8000a08 <StartDefaultTask+0xa4>
 8000a00:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <StartDefaultTask+0x174>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f5      	beq.n	80009f4 <StartDefaultTask+0x90>
		  }
		  osDelay(100);
 8000a08:	2064      	movs	r0, #100	; 0x64
 8000a0a:	f003 fcf1 	bl	80043f0 <osDelay>
		  countDownTimer();
 8000a0e:	f000 f885 	bl	8000b1c <countDownTimer>
	  while(mode == 0){
 8000a12:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <StartDefaultTask+0x174>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0bd      	beq.n	8000996 <StartDefaultTask+0x32>
	  }
	  while(mode == 1){
 8000a1a:	e053      	b.n	8000ac4 <StartDefaultTask+0x160>
		  LED_Set(LED_1, 0);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fbde 	bl	80001e0 <LED_Set>
		  LED_Set(LED_2, 1);
 8000a24:	2101      	movs	r1, #1
 8000a26:	2001      	movs	r0, #1
 8000a28:	f7ff fbda 	bl	80001e0 <LED_Set>
		  while(timerStatus != 1990){
 8000a2c:	e031      	b.n	8000a92 <StartDefaultTask+0x12e>
			  if(Taster_Get(TASTER_1)){
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fdbe 	bl	80005b0 <Taster_Get>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d006      	beq.n	8000a48 <StartDefaultTask+0xe4>
				  timer = timer - timerStatus;
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <StartDefaultTask+0x180>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <StartDefaultTask+0x184>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	4a27      	ldr	r2, [pc, #156]	; (8000ae4 <StartDefaultTask+0x180>)
 8000a46:	6013      	str	r3, [r2, #0]
			  }
			  if(Taster_Get(TASTER_2)){
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fdb1 	bl	80005b0 <Taster_Get>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d006      	beq.n	8000a62 <StartDefaultTask+0xfe>
				  timer = timer + timerStatus;
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <StartDefaultTask+0x180>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <StartDefaultTask+0x184>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a21      	ldr	r2, [pc, #132]	; (8000ae4 <StartDefaultTask+0x180>)
 8000a60:	6013      	str	r3, [r2, #0]
			  }
			  if(Taster_Get(TASTER_3)){
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff fda4 	bl	80005b0 <Taster_Get>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d005      	beq.n	8000a7a <StartDefaultTask+0x116>
				  timerStatus = timerStatus + 990;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <StartDefaultTask+0x184>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f203 33de 	addw	r3, r3, #990	; 0x3de
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <StartDefaultTask+0x184>)
 8000a78:	6013      	str	r3, [r2, #0]
			  }
			  SEG_Driver_Write(timer, SEG_Driver_DP_2 | SEG_Driver_DP_4,SEG_Driver_FLASH_SLOW);
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <StartDefaultTask+0x180>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	210a      	movs	r1, #10
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fd2a 	bl	80004dc <SEG_Driver_Write>
			  countUpStopuhr();
 8000a88:	f000 f886 	bl	8000b98 <countUpStopuhr>
			  osDelay(100);
 8000a8c:	2064      	movs	r0, #100	; 0x64
 8000a8e:	f003 fcaf 	bl	80043f0 <osDelay>
		  while(timerStatus != 1990){
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <StartDefaultTask+0x184>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d1c7      	bne.n	8000a2e <StartDefaultTask+0xca>
		  }
		  timerIsRunning = 1;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <StartDefaultTask+0x188>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
		  SEG_Driver_Write(timer, SEG_Driver_DP_2 | SEG_Driver_DP_4,0);
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <StartDefaultTask+0x180>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	210a      	movs	r1, #10
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd15 	bl	80004dc <SEG_Driver_Write>
		  osDelay(100);
 8000ab2:	2064      	movs	r0, #100	; 0x64
 8000ab4:	f003 fc9c 	bl	80043f0 <osDelay>
		  countUpStopuhr();
 8000ab8:	f000 f86e 	bl	8000b98 <countUpStopuhr>
		  countDownTimer();
 8000abc:	f000 f82e 	bl	8000b1c <countDownTimer>
		  switchMode();
 8000ac0:	f000 f8fc 	bl	8000cbc <switchMode>
	  while(mode == 1){
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <StartDefaultTask+0x174>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d0a7      	beq.n	8000a1c <StartDefaultTask+0xb8>
	  }
    osDelay(100);
 8000acc:	2064      	movs	r0, #100	; 0x64
 8000ace:	f003 fc8f 	bl	80043f0 <osDelay>
	  while(mode == 0){
 8000ad2:	e79e      	b.n	8000a12 <StartDefaultTask+0xae>
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	200001a0 	.word	0x200001a0
 8000adc:	20000194 	.word	0x20000194
 8000ae0:	200001a4 	.word	0x200001a4
 8000ae4:	20000198 	.word	0x20000198
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	200001a8 	.word	0x200001a8

08000af0 <beep>:
  }
  /* USER CODE END 5 */
}

void beep(int time){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(OUT_Buzzer_GPIO_Port, OUT_Buzzer_Pin);
 8000af8:	2108      	movs	r1, #8
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <beep+0x28>)
 8000afc:	f000 fd80 	bl	8001600 <HAL_GPIO_TogglePin>
	osDelay(time);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fc74 	bl	80043f0 <osDelay>
	HAL_GPIO_TogglePin(OUT_Buzzer_GPIO_Port, OUT_Buzzer_Pin);
 8000b08:	2108      	movs	r1, #8
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <beep+0x28>)
 8000b0c:	f000 fd78 	bl	8001600 <HAL_GPIO_TogglePin>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	48000400 	.word	0x48000400

08000b1c <countDownTimer>:

void countDownTimer(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	if(timer == 0 && timerIsRunning == 1){
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <countDownTimer+0x6c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10d      	bne.n	8000b44 <countDownTimer+0x28>
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <countDownTimer+0x70>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d109      	bne.n	8000b44 <countDownTimer+0x28>
	  timerStatus = 10;
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <countDownTimer+0x74>)
 8000b32:	220a      	movs	r2, #10
 8000b34:	601a      	str	r2, [r3, #0]
	  timerIsRunning = 0;
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <countDownTimer+0x70>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
	  beep(3000);
 8000b3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b40:	f7ff ffd6 	bl	8000af0 <beep>
	}
	if(timerIsRunning == 1){
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <countDownTimer+0x70>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d11a      	bne.n	8000b82 <countDownTimer+0x66>
		if(timer % 1000 == 0){
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <countDownTimer+0x6c>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <countDownTimer+0x78>)
 8000b52:	fb83 1302 	smull	r1, r3, r3, r2
 8000b56:	1199      	asrs	r1, r3, #6
 8000b58:	17d3      	asrs	r3, r2, #31
 8000b5a:	1acb      	subs	r3, r1, r3
 8000b5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b60:	fb01 f303 	mul.w	r3, r1, r3
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d106      	bne.n	8000b78 <countDownTimer+0x5c>
			  timer -= 400;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <countDownTimer+0x6c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <countDownTimer+0x6c>)
 8000b74:	6013      	str	r3, [r2, #0]
		}
		else{
			timer--;
		}
	}
}
 8000b76:	e004      	b.n	8000b82 <countDownTimer+0x66>
			timer--;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <countDownTimer+0x6c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	4a02      	ldr	r2, [pc, #8]	; (8000b88 <countDownTimer+0x6c>)
 8000b80:	6013      	str	r3, [r2, #0]
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000198 	.word	0x20000198
 8000b8c:	200001a8 	.word	0x200001a8
 8000b90:	20000000 	.word	0x20000000
 8000b94:	10624dd3 	.word	0x10624dd3

08000b98 <countUpStopuhr>:

void countUpStopuhr(){
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	 if(stopuhrIsRuning == 1){
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <countUpStopuhr+0x50>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d11c      	bne.n	8000bde <countUpStopuhr+0x46>
		  if((stopuhr + 400) % 1000 == 0){
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <countUpStopuhr+0x54>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <countUpStopuhr+0x58>)
 8000bae:	fb83 1302 	smull	r1, r3, r3, r2
 8000bb2:	1199      	asrs	r1, r3, #6
 8000bb4:	17d3      	asrs	r3, r2, #31
 8000bb6:	1acb      	subs	r3, r1, r3
 8000bb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bbc:	fb01 f303 	mul.w	r3, r1, r3
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d106      	bne.n	8000bd4 <countUpStopuhr+0x3c>
			  stopuhr += 400;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <countUpStopuhr+0x54>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000bce:	4a07      	ldr	r2, [pc, #28]	; (8000bec <countUpStopuhr+0x54>)
 8000bd0:	6013      	str	r3, [r2, #0]
		  }
		  else{
			  stopuhr++;
		  }
	  }
}
 8000bd2:	e004      	b.n	8000bde <countUpStopuhr+0x46>
			  stopuhr++;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <countUpStopuhr+0x54>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <countUpStopuhr+0x54>)
 8000bdc:	6013      	str	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	200001a4 	.word	0x200001a4
 8000bec:	20000194 	.word	0x20000194
 8000bf0:	10624dd3 	.word	0x10624dd3

08000bf4 <stopuhrRunning>:

void stopuhrRunning(){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	if(Taster_Get(TASTER_2) && mode == 0){
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff fcd9 	bl	80005b0 <Taster_Get>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d00d      	beq.n	8000c20 <stopuhrRunning+0x2c>
 8000c04:	4b29      	ldr	r3, [pc, #164]	; (8000cac <stopuhrRunning+0xb8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d109      	bne.n	8000c20 <stopuhrRunning+0x2c>
		beep(100);
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	f7ff ff6f 	bl	8000af0 <beep>
		stopuhrIsRuning = 0;
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <stopuhrRunning+0xbc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
		LED_Set(LED_3, 0);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f7ff fae0 	bl	80001e0 <LED_Set>
	}
	if(Taster_Get(TASTER_3) && mode == 0){
 8000c20:	2002      	movs	r0, #2
 8000c22:	f7ff fcc5 	bl	80005b0 <Taster_Get>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d01b      	beq.n	8000c64 <stopuhrRunning+0x70>
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <stopuhrRunning+0xb8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d117      	bne.n	8000c64 <stopuhrRunning+0x70>
	  switchMode();
 8000c34:	f000 f842 	bl	8000cbc <switchMode>
	  if( mode != 1 && meanTime == 0){
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <stopuhrRunning+0xb8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d00b      	beq.n	8000c58 <stopuhrRunning+0x64>
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <stopuhrRunning+0xc0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d107      	bne.n	8000c58 <stopuhrRunning+0x64>
		  beep(100);
 8000c48:	2064      	movs	r0, #100	; 0x64
 8000c4a:	f7ff ff51 	bl	8000af0 <beep>
		  meanTime = stopuhr;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <stopuhrRunning+0xc4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <stopuhrRunning+0xc0>)
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e005      	b.n	8000c64 <stopuhrRunning+0x70>
	  }
	  else{
		  beep(100);
 8000c58:	2064      	movs	r0, #100	; 0x64
 8000c5a:	f7ff ff49 	bl	8000af0 <beep>
		  meanTime = 0;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <stopuhrRunning+0xc0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
	  }
   }
   osDelay(100);
 8000c64:	2064      	movs	r0, #100	; 0x64
 8000c66:	f003 fbc3 	bl	80043f0 <osDelay>
   countUpStopuhr();
 8000c6a:	f7ff ff95 	bl	8000b98 <countUpStopuhr>
   countDownTimer();
 8000c6e:	f7ff ff55 	bl	8000b1c <countDownTimer>
   if(meanTime == 0 && mode == 0){
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <stopuhrRunning+0xc0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10b      	bne.n	8000c92 <stopuhrRunning+0x9e>
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <stopuhrRunning+0xb8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d107      	bne.n	8000c92 <stopuhrRunning+0x9e>
	   SEG_Driver_Write(stopuhr, SEG_Driver_DP_2 | SEG_Driver_DP_4,0);
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <stopuhrRunning+0xc4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	210a      	movs	r1, #10
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fc26 	bl	80004dc <SEG_Driver_Write>
   }
   else if(mode == 0){
	   SEG_Driver_Write(meanTime, SEG_Driver_DP_2 | SEG_Driver_DP_4, SEG_Driver_FLASH_SLOW);
   }
}
 8000c90:	e00a      	b.n	8000ca8 <stopuhrRunning+0xb4>
   else if(mode == 0){
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <stopuhrRunning+0xb8>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d106      	bne.n	8000ca8 <stopuhrRunning+0xb4>
	   SEG_Driver_Write(meanTime, SEG_Driver_DP_2 | SEG_Driver_DP_4, SEG_Driver_FLASH_SLOW);
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <stopuhrRunning+0xc0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	210a      	movs	r1, #10
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc1a 	bl	80004dc <SEG_Driver_Write>
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200001a0 	.word	0x200001a0
 8000cb0:	200001a4 	.word	0x200001a4
 8000cb4:	2000019c 	.word	0x2000019c
 8000cb8:	20000194 	.word	0x20000194

08000cbc <switchMode>:

void switchMode(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	while(Taster_Get(TASTER_3)){
 8000cc0:	e027      	b.n	8000d12 <switchMode+0x56>
		  taster3Counter++;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <switchMode+0x68>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <switchMode+0x68>)
 8000cca:	6013      	str	r3, [r2, #0]
		  if(taster3Counter > 10){
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <switchMode+0x68>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b0a      	cmp	r3, #10
 8000cd2:	dd1b      	ble.n	8000d0c <switchMode+0x50>
			  if(mode == 0){
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <switchMode+0x6c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d10a      	bne.n	8000cf2 <switchMode+0x36>
				  mode = 1;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <switchMode+0x6c>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]
				  SEG_Driver_Write(timer, SEG_Driver_DP_2 | SEG_Driver_DP_4, SEG_Driver_FLASH_SLOW);
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <switchMode+0x70>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	210a      	movs	r1, #10
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fbf6 	bl	80004dc <SEG_Driver_Write>
 8000cf0:	e009      	b.n	8000d06 <switchMode+0x4a>
			  }
			  else{
				  mode = 0;
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <switchMode+0x6c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
				  SEG_Driver_Write(stopuhr, SEG_Driver_DP_2 | SEG_Driver_DP_4, 0);
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <switchMode+0x74>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	210a      	movs	r1, #10
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fbeb 	bl	80004dc <SEG_Driver_Write>
			  }
			  taster3Counter = 0;
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <switchMode+0x68>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
		  }
		  osDelay(100);
 8000d0c:	2064      	movs	r0, #100	; 0x64
 8000d0e:	f003 fb6f 	bl	80043f0 <osDelay>
	while(Taster_Get(TASTER_3)){
 8000d12:	2002      	movs	r0, #2
 8000d14:	f7ff fc4c 	bl	80005b0 <Taster_Get>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1d1      	bne.n	8000cc2 <switchMode+0x6>
	  }
}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200001ac 	.word	0x200001ac
 8000d28:	200001a0 	.word	0x200001a0
 8000d2c:	20000198 	.word	0x20000198
 8000d30:	20000194 	.word	0x20000194

08000d34 <Taster_Treiber_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Taster_Treiber_Task */
void Taster_Treiber_Task(void *argument)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Taster_Treiber_Task */
  /* Infinite loop */
	Taster_Treiber_Init_Task(argument);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fc01 	bl	8000544 <Taster_Treiber_Init_Task>
  /* USER CODE END Taster_Treiber_Task */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
	while(true){
	      SEG_Driver_Task_5ms();
 8000d52:	f7ff fbdf 	bl	8000514 <SEG_Driver_Task_5ms>
	      osDelay(5);
 8000d56:	2005      	movs	r0, #5
 8000d58:	f003 fb4a 	bl	80043f0 <osDelay>
	      SEG_Driver_Task_5ms();
 8000d5c:	e7f9      	b.n	8000d52 <StartDisplayTask+0x8>
	...

08000d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d72:	f000 f989 	bl	8001088 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40012c00 	.word	0x40012c00

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_MspInit+0x4c>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_MspInit+0x4c>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_MspInit+0x4c>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	210f      	movs	r1, #15
 8000dca:	f06f 0001 	mvn.w	r0, #1
 8000dce:	f000 fa33 	bl	8001238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <HAL_TIM_Base_MspInit+0x44>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d113      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_TIM_Base_MspInit+0x48>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <HAL_TIM_Base_MspInit+0x48>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_TIM_Base_MspInit+0x48>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	201d      	movs	r0, #29
 8000e10:	f000 fa12 	bl	8001238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e14:	201d      	movs	r0, #29
 8000e16:	f000 fa2b 	bl	8001270 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40000400 	.word	0x40000400
 8000e28:	40021000 	.word	0x40021000

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_UART_MspInit+0x7c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d128      	bne.n	8000ea0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_UART_MspInit+0x80>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <HAL_UART_MspInit+0x80>)
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_UART_MspInit+0x80>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_UART_MspInit+0x80>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a10      	ldr	r2, [pc, #64]	; (8000eac <HAL_UART_MspInit+0x80>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_UART_MspInit+0x80>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e7e:	230c      	movs	r3, #12
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9c:	f000 f9f6 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40004400 	.word	0x40004400
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <HAL_InitTick+0xcc>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a2d      	ldr	r2, [pc, #180]	; (8000f7c <HAL_InitTick+0xcc>)
 8000ec6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <HAL_InitTick+0xcc>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed8:	f107 020c 	add.w	r2, r7, #12
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fe30 	bl	8002b48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ee8:	f001 fe0c 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 8000eec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef0:	4a23      	ldr	r2, [pc, #140]	; (8000f80 <HAL_InitTick+0xd0>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0c9b      	lsrs	r3, r3, #18
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <HAL_InitTick+0xd4>)
 8000efe:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <HAL_InitTick+0xd8>)
 8000f00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <HAL_InitTick+0xd4>)
 8000f04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <HAL_InitTick+0xd4>)
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <HAL_InitTick+0xd4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_InitTick+0xd4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_InitTick+0xd4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f22:	4818      	ldr	r0, [pc, #96]	; (8000f84 <HAL_InitTick+0xd4>)
 8000f24:	f002 f860 	bl	8002fe8 <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d11b      	bne.n	8000f6e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f36:	4813      	ldr	r0, [pc, #76]	; (8000f84 <HAL_InitTick+0xd4>)
 8000f38:	f002 f8ae 	bl	8003098 <HAL_TIM_Base_Start_IT>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d111      	bne.n	8000f6e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f4a:	2019      	movs	r0, #25
 8000f4c:	f000 f990 	bl	8001270 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	d808      	bhi.n	8000f68 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000f56:	2200      	movs	r2, #0
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	2019      	movs	r0, #25
 8000f5c:	f000 f96c 	bl	8001238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_InitTick+0xdc>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e002      	b.n	8000f6e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3730      	adds	r7, #48	; 0x30
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	431bde83 	.word	0x431bde83
 8000f84:	200001b0 	.word	0x200001b0
 8000f88:	40012c00 	.word	0x40012c00
 8000f8c:	20000008 	.word	0x20000008

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000fc2:	f002 f8d9 	bl	8003178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001b0 	.word	0x200001b0

08000fd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <TIM3_IRQHandler+0x10>)
 8000fd6:	f002 f8cf 	bl	8003178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000b4 	.word	0x200000b4

08000fe4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001040 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800100c:	f7ff ffea 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <LoopForever+0x6>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	; (8001048 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <LoopForever+0xe>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	; (8001054 <LoopForever+0x16>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001036:	f005 fe39 	bl	8006cac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103a:	f7ff fae1 	bl	8000600 <main>

0800103e <LoopForever>:

LoopForever:
    b LoopForever
 800103e:	e7fe      	b.n	800103e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001040:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800104c:	08007028 	.word	0x08007028
  ldr r2, =_sbss
 8001050:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001054:	20001c10 	.word	0x20001c10

08001058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC1_2_IRQHandler>
	...

0800105c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_Init+0x28>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_Init+0x28>)
 8001066:	f043 0310 	orr.w	r3, r3, #16
 800106a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f8d8 	bl	8001222 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	200f      	movs	r0, #15
 8001074:	f7ff ff1c 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fe8a 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x20>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x24>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_IncTick+0x24>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000000c 	.word	0x2000000c
 80010ac:	200001fc 	.word	0x200001fc

080010b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_GetTick+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200001fc 	.word	0x200001fc

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff4c 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124a:	f7ff ff61 	bl	8001110 <__NVIC_GetPriorityGrouping>
 800124e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	6978      	ldr	r0, [r7, #20]
 8001256:	f7ff ffb1 	bl	80011bc <NVIC_EncodePriority>
 800125a:	4602      	mov	r2, r0
 800125c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff80 	bl	8001168 <__NVIC_SetPriority>
}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff54 	bl	800112c <__NVIC_EnableIRQ>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e160      	b.n	800155e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8152 	beq.w	8001558 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 0201 	and.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0203 	and.w	r2, r3, #3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80ac 	beq.w	8001558 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4b5e      	ldr	r3, [pc, #376]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a5d      	ldr	r2, [pc, #372]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <HAL_GPIO_Init+0x2f0>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001418:	4a59      	ldr	r2, [pc, #356]	; (8001580 <HAL_GPIO_Init+0x2f4>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001442:	d025      	beq.n	8001490 <HAL_GPIO_Init+0x204>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a4f      	ldr	r2, [pc, #316]	; (8001584 <HAL_GPIO_Init+0x2f8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d01f      	beq.n	800148c <HAL_GPIO_Init+0x200>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a4e      	ldr	r2, [pc, #312]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d019      	beq.n	8001488 <HAL_GPIO_Init+0x1fc>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a4d      	ldr	r2, [pc, #308]	; (800158c <HAL_GPIO_Init+0x300>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d013      	beq.n	8001484 <HAL_GPIO_Init+0x1f8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00d      	beq.n	8001480 <HAL_GPIO_Init+0x1f4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4b      	ldr	r2, [pc, #300]	; (8001594 <HAL_GPIO_Init+0x308>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x1f0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <HAL_GPIO_Init+0x30c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_GPIO_Init+0x1ec>
 8001474:	2306      	movs	r3, #6
 8001476:	e00c      	b.n	8001492 <HAL_GPIO_Init+0x206>
 8001478:	2307      	movs	r3, #7
 800147a:	e00a      	b.n	8001492 <HAL_GPIO_Init+0x206>
 800147c:	2305      	movs	r3, #5
 800147e:	e008      	b.n	8001492 <HAL_GPIO_Init+0x206>
 8001480:	2304      	movs	r3, #4
 8001482:	e006      	b.n	8001492 <HAL_GPIO_Init+0x206>
 8001484:	2303      	movs	r3, #3
 8001486:	e004      	b.n	8001492 <HAL_GPIO_Init+0x206>
 8001488:	2302      	movs	r3, #2
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0x206>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_GPIO_Init+0x206>
 8001490:	2300      	movs	r3, #0
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4093      	lsls	r3, r2
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014a2:	4937      	ldr	r1, [pc, #220]	; (8001580 <HAL_GPIO_Init+0x2f4>)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014b0:	4b3a      	ldr	r3, [pc, #232]	; (800159c <HAL_GPIO_Init+0x310>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014d4:	4a31      	ldr	r2, [pc, #196]	; (800159c <HAL_GPIO_Init+0x310>)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <HAL_GPIO_Init+0x310>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014fe:	4a27      	ldr	r2, [pc, #156]	; (800159c <HAL_GPIO_Init+0x310>)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_GPIO_Init+0x310>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_GPIO_Init+0x310>)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_GPIO_Init+0x310>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <HAL_GPIO_Init+0x310>)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	f47f ae97 	bne.w	800129c <HAL_GPIO_Init+0x10>
  }
}
 800156e:	bf00      	nop
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	48000400 	.word	0x48000400
 8001588:	48000800 	.word	0x48000800
 800158c:	48000c00 	.word	0x48000c00
 8001590:	48001000 	.word	0x48001000
 8001594:	48001400 	.word	0x48001400
 8001598:	48001800 	.word	0x48001800
 800159c:	40010400 	.word	0x40010400

080015a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4013      	ands	r3, r2
 8001618:	041a      	lsls	r2, r3, #16
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	43d9      	mvns	r1, r3
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	400b      	ands	r3, r1
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800163a:	af00      	add	r7, sp, #0
 800163c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001640:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001644:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	f001 b83a 	b.w	80026ce <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 816f 	beq.w	800194e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001670:	4bb5      	ldr	r3, [pc, #724]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b04      	cmp	r3, #4
 800167a:	d00c      	beq.n	8001696 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800167c:	4bb2      	ldr	r3, [pc, #712]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b08      	cmp	r3, #8
 8001686:	d15c      	bne.n	8001742 <HAL_RCC_OscConfig+0x10e>
 8001688:	4baf      	ldr	r3, [pc, #700]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001694:	d155      	bne.n	8001742 <HAL_RCC_OscConfig+0x10e>
 8001696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800169a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	095b      	lsrs	r3, r3, #5
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <HAL_RCC_OscConfig+0x94>
 80016c2:	4ba1      	ldr	r3, [pc, #644]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	e015      	b.n	80016f4 <HAL_RCC_OscConfig+0xc0>
 80016c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016cc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80016d4:	fa93 f3a3 	rbit	r3, r3
 80016d8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80016dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016e4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016f0:	4b95      	ldr	r3, [pc, #596]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016f8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80016fc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001700:	fa92 f2a2 	rbit	r2, r2
 8001704:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001708:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800170c:	fab2 f282 	clz	r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f042 0220 	orr.w	r2, r2, #32
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	f002 021f 	and.w	r2, r2, #31
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 8111 	beq.w	800194c <HAL_RCC_OscConfig+0x318>
 800172a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 8108 	bne.w	800194c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	f000 bfc6 	b.w	80026ce <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001746:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x12e>
 8001754:	4b7c      	ldr	r3, [pc, #496]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a7b      	ldr	r2, [pc, #492]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e036      	b.n	80017d0 <HAL_RCC_OscConfig+0x19c>
 8001762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001766:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x158>
 8001772:	4b75      	ldr	r3, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a74      	ldr	r2, [pc, #464]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 8001778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b72      	ldr	r3, [pc, #456]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a71      	ldr	r2, [pc, #452]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 8001784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e021      	b.n	80017d0 <HAL_RCC_OscConfig+0x19c>
 800178c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001790:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x184>
 800179e:	4b6a      	ldr	r3, [pc, #424]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a69      	ldr	r2, [pc, #420]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b67      	ldr	r3, [pc, #412]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a66      	ldr	r2, [pc, #408]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0x19c>
 80017b8:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a62      	ldr	r2, [pc, #392]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b60      	ldr	r3, [pc, #384]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a5f      	ldr	r2, [pc, #380]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d059      	beq.n	8001894 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fc66 	bl	80010b0 <HAL_GetTick>
 80017e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ea:	f7ff fc61 	bl	80010b0 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d902      	bls.n	8001800 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	f000 bf67 	b.w	80026ce <HAL_RCC_OscConfig+0x109a>
 8001800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001804:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001814:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b01      	cmp	r3, #1
 800182a:	d102      	bne.n	8001832 <HAL_RCC_OscConfig+0x1fe>
 800182c:	4b46      	ldr	r3, [pc, #280]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x22a>
 8001832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001836:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800184e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001862:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001866:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800186a:	fa92 f2a2 	rbit	r2, r2
 800186e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001872:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001876:	fab2 f282 	clz	r2, r2
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	f042 0220 	orr.w	r2, r2, #32
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	f002 021f 	and.w	r2, r2, #31
 8001886:	2101      	movs	r1, #1
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0ab      	beq.n	80017ea <HAL_RCC_OscConfig+0x1b6>
 8001892:	e05c      	b.n	800194e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fc0c 	bl	80010b0 <HAL_GetTick>
 8001898:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189e:	f7ff fc07 	bl	80010b0 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d902      	bls.n	80018b4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	f000 bf0d 	b.w	80026ce <HAL_RCC_OscConfig+0x109a>
 80018b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80018c0:	fa93 f3a3 	rbit	r3, r3
 80018c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80018c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d102      	bne.n	80018e6 <HAL_RCC_OscConfig+0x2b2>
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x2de>
 80018e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80018fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001902:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_RCC_OscConfig+0x314>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001916:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800191a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800191e:	fa92 f2a2 	rbit	r2, r2
 8001922:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001926:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800192a:	fab2 f282 	clz	r2, r2
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	f042 0220 	orr.w	r2, r2, #32
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	f002 021f 	and.w	r2, r2, #31
 800193a:	2101      	movs	r1, #1
 800193c:	fa01 f202 	lsl.w	r2, r1, r2
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ab      	bne.n	800189e <HAL_RCC_OscConfig+0x26a>
 8001946:	e002      	b.n	800194e <HAL_RCC_OscConfig+0x31a>
 8001948:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 817f 	beq.w	8001c62 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001964:	4ba7      	ldr	r3, [pc, #668]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00c      	beq.n	800198a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001970:	4ba4      	ldr	r3, [pc, #656]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d173      	bne.n	8001a64 <HAL_RCC_OscConfig+0x430>
 800197c:	4ba1      	ldr	r3, [pc, #644]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001988:	d16c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x430>
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800199c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d102      	bne.n	80019ba <HAL_RCC_OscConfig+0x386>
 80019b4:	4b93      	ldr	r3, [pc, #588]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e013      	b.n	80019e2 <HAL_RCC_OscConfig+0x3ae>
 80019ba:	2302      	movs	r3, #2
 80019bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80019cc:	2302      	movs	r3, #2
 80019ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019d2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	2202      	movs	r2, #2
 80019e4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80019e8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80019ec:	fa92 f2a2 	rbit	r2, r2
 80019f0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80019f4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019f8:	fab2 f282 	clz	r2, r2
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	f042 0220 	orr.w	r2, r2, #32
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	f002 021f 	and.w	r2, r2, #31
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00a      	beq.n	8001a2a <HAL_RCC_OscConfig+0x3f6>
 8001a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d002      	beq.n	8001a2a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f000 be52 	b.w	80026ce <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	21f8      	movs	r1, #248	; 0xf8
 8001a40:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001a48:	fa91 f1a1 	rbit	r1, r1
 8001a4c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001a50:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a54:	fab1 f181 	clz	r1, r1
 8001a58:	b2c9      	uxtb	r1, r1
 8001a5a:	408b      	lsls	r3, r1
 8001a5c:	4969      	ldr	r1, [pc, #420]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	e0fe      	b.n	8001c62 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8088 	beq.w	8001b86 <HAL_RCC_OscConfig+0x552>
 8001a76:	2301      	movs	r3, #1
 8001a78:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001a88:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fb05 	bl	80010b0 <HAL_GetTick>
 8001aa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aac:	f7ff fb00 	bl	80010b0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d902      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	f000 be06 	b.w	80026ce <HAL_RCC_OscConfig+0x109a>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001acc:	fa93 f3a3 	rbit	r3, r3
 8001ad0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001ad4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad8:	fab3 f383 	clz	r3, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d102      	bne.n	8001af2 <HAL_RCC_OscConfig+0x4be>
 8001aec:	4b45      	ldr	r3, [pc, #276]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e013      	b.n	8001b1a <HAL_RCC_OscConfig+0x4e6>
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b04:	2302      	movs	r3, #2
 8001b06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b0a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b20:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b24:	fa92 f2a2 	rbit	r2, r2
 8001b28:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001b2c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b30:	fab2 f282 	clz	r2, r2
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f042 0220 	orr.w	r2, r2, #32
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f002 021f 	and.w	r2, r2, #31
 8001b40:	2101      	movs	r1, #1
 8001b42:	fa01 f202 	lsl.w	r2, r1, r2
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0af      	beq.n	8001aac <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	21f8      	movs	r1, #248	; 0xf8
 8001b62:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001b6a:	fa91 f1a1 	rbit	r1, r1
 8001b6e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001b72:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b76:	fab1 f181 	clz	r1, r1
 8001b7a:	b2c9      	uxtb	r1, r1
 8001b7c:	408b      	lsls	r3, r1
 8001b7e:	4921      	ldr	r1, [pc, #132]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
 8001b84:	e06d      	b.n	8001c62 <HAL_RCC_OscConfig+0x62e>
 8001b86:	2301      	movs	r3, #1
 8001b88:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001b98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ba6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	461a      	mov	r2, r3
 8001bae:	2300      	movs	r3, #0
 8001bb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fa7d 	bl	80010b0 <HAL_GetTick>
 8001bb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fa78 	bl	80010b0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d902      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	f000 bd7e 	b.w	80026ce <HAL_RCC_OscConfig+0x109a>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001be4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_OscConfig+0x5d4>
 8001bfc:	4b01      	ldr	r3, [pc, #4]	; (8001c04 <HAL_RCC_OscConfig+0x5d0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	e016      	b.n	8001c30 <HAL_RCC_OscConfig+0x5fc>
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c2c:	4bbf      	ldr	r3, [pc, #764]	; (8001f2c <HAL_RCC_OscConfig+0x8f8>)
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2202      	movs	r2, #2
 8001c32:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001c36:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c3a:	fa92 f2a2 	rbit	r2, r2
 8001c3e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001c42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c46:	fab2 f282 	clz	r2, r2
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f042 0220 	orr.w	r2, r2, #32
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f002 021f 	and.w	r2, r2, #31
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ac      	bne.n	8001bbc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8113 	beq.w	8001e9e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d07c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x74e>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001c9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4ba2      	ldr	r3, [pc, #648]	; (8001f30 <HAL_RCC_OscConfig+0x8fc>)
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	461a      	mov	r2, r3
 8001cae:	2301      	movs	r3, #1
 8001cb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7ff f9fd 	bl	80010b0 <HAL_GetTick>
 8001cb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f9f8 	bl	80010b0 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d902      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f000 bcfe 	b.w	80026ce <HAL_RCC_OscConfig+0x109a>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001cdc:	fa93 f2a3 	rbit	r2, r3
 8001ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	fa93 f2a3 	rbit	r2, r3
 8001d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d16:	2202      	movs	r2, #2
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	fa93 f2a3 	rbit	r2, r3
 8001d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d30:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	4b7e      	ldr	r3, [pc, #504]	; (8001f2c <HAL_RCC_OscConfig+0x8f8>)
 8001d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d3e:	2102      	movs	r1, #2
 8001d40:	6019      	str	r1, [r3, #0]
 8001d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	fa93 f1a3 	rbit	r1, r3
 8001d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d58:	6019      	str	r1, [r3, #0]
  return result;
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d09d      	beq.n	8001cbc <HAL_RCC_OscConfig+0x688>
 8001d80:	e08d      	b.n	8001e9e <HAL_RCC_OscConfig+0x86a>
 8001d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fa93 f2a3 	rbit	r2, r3
 8001d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001da4:	601a      	str	r2, [r3, #0]
  return result;
 8001da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001daa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x8fc>)
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f974 	bl	80010b0 <HAL_GetTick>
 8001dc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dce:	f7ff f96f 	bl	80010b0 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d902      	bls.n	8001de4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	f000 bc75 	b.w	80026ce <HAL_RCC_OscConfig+0x109a>
 8001de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001dec:	2202      	movs	r2, #2
 8001dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	fa93 f2a3 	rbit	r2, r3
 8001dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e10:	2202      	movs	r2, #2
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e34:	2202      	movs	r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e4e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_RCC_OscConfig+0x8f8>)
 8001e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	6019      	str	r1, [r3, #0]
 8001e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e64:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f1a3 	rbit	r1, r3
 8001e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e72:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e76:	6019      	str	r1, [r3, #0]
  return result;
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d197      	bne.n	8001dce <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 81a5 	beq.w	80021fe <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_RCC_OscConfig+0x8f8>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d116      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_OscConfig+0x8f8>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_RCC_OscConfig+0x8f8>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	61d3      	str	r3, [r2, #28]
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_RCC_OscConfig+0x8f8>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_RCC_OscConfig+0x900>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d121      	bne.n	8001f44 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_RCC_OscConfig+0x900>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_RCC_OscConfig+0x900>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f8d0 	bl	80010b0 <HAL_GetTick>
 8001f10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e010      	b.n	8001f38 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7ff f8cb 	bl	80010b0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d908      	bls.n	8001f38 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e3d1      	b.n	80026ce <HAL_RCC_OscConfig+0x109a>
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	10908120 	.word	0x10908120
 8001f34:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b8d      	ldr	r3, [pc, #564]	; (8002170 <HAL_RCC_OscConfig+0xb3c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0e8      	beq.n	8001f16 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x92e>
 8001f54:	4b87      	ldr	r3, [pc, #540]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a86      	ldr	r2, [pc, #536]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	e035      	b.n	8001fce <HAL_RCC_OscConfig+0x99a>
 8001f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x958>
 8001f72:	4b80      	ldr	r3, [pc, #512]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a7f      	ldr	r2, [pc, #508]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6213      	str	r3, [r2, #32]
 8001f7e:	4b7d      	ldr	r3, [pc, #500]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a7c      	ldr	r2, [pc, #496]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001f84:	f023 0304 	bic.w	r3, r3, #4
 8001f88:	6213      	str	r3, [r2, #32]
 8001f8a:	e020      	b.n	8001fce <HAL_RCC_OscConfig+0x99a>
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x982>
 8001f9c:	4b75      	ldr	r3, [pc, #468]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a74      	ldr	r2, [pc, #464]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	6213      	str	r3, [r2, #32]
 8001fa8:	4b72      	ldr	r3, [pc, #456]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a71      	ldr	r2, [pc, #452]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	e00b      	b.n	8001fce <HAL_RCC_OscConfig+0x99a>
 8001fb6:	4b6f      	ldr	r3, [pc, #444]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4a6e      	ldr	r2, [pc, #440]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6213      	str	r3, [r2, #32]
 8001fc2:	4b6c      	ldr	r3, [pc, #432]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a6b      	ldr	r2, [pc, #428]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8001fc8:	f023 0304 	bic.w	r3, r3, #4
 8001fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8081 	beq.w	80020e2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f866 	bl	80010b0 <HAL_GetTick>
 8001fe4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff f861 	bl	80010b0 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e365      	b.n	80026ce <HAL_RCC_OscConfig+0x109a>
 8002002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002006:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800200a:	2202      	movs	r2, #2
 800200c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002020:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800202e:	2202      	movs	r2, #2
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002036:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002044:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002048:	601a      	str	r2, [r3, #0]
  return result;
 800204a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002052:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0xa3a>
 8002068:	4b42      	ldr	r3, [pc, #264]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	e013      	b.n	8002096 <HAL_RCC_OscConfig+0xa62>
 800206e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002072:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002076:	2202      	movs	r2, #2
 8002078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	fa93 f2a3 	rbit	r2, r3
 8002088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800209a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800209e:	2102      	movs	r1, #2
 80020a0:	6011      	str	r1, [r2, #0]
 80020a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	fa92 f1a2 	rbit	r1, r2
 80020b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020b4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80020b8:	6011      	str	r1, [r2, #0]
  return result;
 80020ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020be:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	fab2 f282 	clz	r2, r2
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f002 021f 	and.w	r2, r2, #31
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f202 	lsl.w	r2, r1, r2
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d084      	beq.n	8001fea <HAL_RCC_OscConfig+0x9b6>
 80020e0:	e083      	b.n	80021ea <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e2:	f7fe ffe5 	bl	80010b0 <HAL_GetTick>
 80020e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7fe ffe0 	bl	80010b0 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e2e4      	b.n	80026ce <HAL_RCC_OscConfig+0x109a>
 8002104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002108:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800210c:	2202      	movs	r2, #2
 800210e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002114:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f2a3 	rbit	r2, r3
 800211e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002122:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002130:	2202      	movs	r2, #2
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002138:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fa93 f2a3 	rbit	r2, r3
 8002142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002146:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800214a:	601a      	str	r2, [r3, #0]
  return result;
 800214c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002150:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002154:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d106      	bne.n	8002178 <HAL_RCC_OscConfig+0xb44>
 800216a:	4b02      	ldr	r3, [pc, #8]	; (8002174 <HAL_RCC_OscConfig+0xb40>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	e017      	b.n	80021a0 <HAL_RCC_OscConfig+0xb6c>
 8002170:	40007000 	.word	0x40007000
 8002174:	40021000 	.word	0x40021000
 8002178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002180:	2202      	movs	r2, #2
 8002182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002188:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	fa93 f2a3 	rbit	r2, r3
 8002192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002196:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	4bb3      	ldr	r3, [pc, #716]	; (800246c <HAL_RCC_OscConfig+0xe38>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021a8:	2102      	movs	r1, #2
 80021aa:	6011      	str	r1, [r2, #0]
 80021ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	fa92 f1a2 	rbit	r1, r2
 80021ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021be:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80021c2:	6011      	str	r1, [r2, #0]
  return result;
 80021c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021c8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	fab2 f282 	clz	r2, r2
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f002 021f 	and.w	r2, r2, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d180      	bne.n	80020ec <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ea:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b9e      	ldr	r3, [pc, #632]	; (800246c <HAL_RCC_OscConfig+0xe38>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a9d      	ldr	r2, [pc, #628]	; (800246c <HAL_RCC_OscConfig+0xe38>)
 80021f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002202:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 825e 	beq.w	80026cc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002210:	4b96      	ldr	r3, [pc, #600]	; (800246c <HAL_RCC_OscConfig+0xe38>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b08      	cmp	r3, #8
 800221a:	f000 821f 	beq.w	800265c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002222:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b02      	cmp	r3, #2
 800222c:	f040 8170 	bne.w	8002510 <HAL_RCC_OscConfig+0xedc>
 8002230:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002234:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800223c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002242:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	fa93 f2a3 	rbit	r2, r3
 800224c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002250:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002254:	601a      	str	r2, [r3, #0]
  return result;
 8002256:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800225a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800225e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800226a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	461a      	mov	r2, r3
 8002272:	2300      	movs	r3, #0
 8002274:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7fe ff1b 	bl	80010b0 <HAL_GetTick>
 800227a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227e:	e009      	b.n	8002294 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe ff16 	bl	80010b0 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e21c      	b.n	80026ce <HAL_RCC_OscConfig+0x109a>
 8002294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002298:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800229c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022b8:	601a      	str	r2, [r3, #0]
  return result;
 80022ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <HAL_RCC_OscConfig+0xcaa>
 80022d8:	4b64      	ldr	r3, [pc, #400]	; (800246c <HAL_RCC_OscConfig+0xe38>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	e027      	b.n	800232e <HAL_RCC_OscConfig+0xcfa>
 80022de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fa93 f2a3 	rbit	r2, r3
 80022fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002308:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800230c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002316:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002324:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_RCC_OscConfig+0xe38>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002332:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002336:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800233a:	6011      	str	r1, [r2, #0]
 800233c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002340:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	fa92 f1a2 	rbit	r1, r2
 800234a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800234e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002352:	6011      	str	r1, [r2, #0]
  return result;
 8002354:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002358:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	fab2 f282 	clz	r2, r2
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	f042 0220 	orr.w	r2, r2, #32
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f002 021f 	and.w	r2, r2, #31
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f202 	lsl.w	r2, r1, r2
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d182      	bne.n	8002280 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800237a:	4b3c      	ldr	r3, [pc, #240]	; (800246c <HAL_RCC_OscConfig+0xe38>)
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	f023 020f 	bic.w	r2, r3, #15
 8002382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002386:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	4937      	ldr	r1, [pc, #220]	; (800246c <HAL_RCC_OscConfig+0xe38>)
 8002390:	4313      	orrs	r3, r2
 8002392:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <HAL_RCC_OscConfig+0xe38>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800239c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a19      	ldr	r1, [r3, #32]
 80023a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	492d      	ldr	r1, [pc, #180]	; (800246c <HAL_RCC_OscConfig+0xe38>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
 80023bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	fa93 f2a3 	rbit	r2, r3
 80023d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023e0:	601a      	str	r2, [r3, #0]
  return result;
 80023e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023ea:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	461a      	mov	r2, r3
 80023fe:	2301      	movs	r3, #1
 8002400:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7fe fe55 	bl	80010b0 <HAL_GetTick>
 8002406:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800240a:	e009      	b.n	8002420 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fe50 	bl	80010b0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e156      	b.n	80026ce <HAL_RCC_OscConfig+0x109a>
 8002420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002424:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002428:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800242c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002432:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fa93 f2a3 	rbit	r2, r3
 800243c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002440:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002444:	601a      	str	r2, [r3, #0]
  return result;
 8002446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800244e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0xe3c>
 8002464:	4b01      	ldr	r3, [pc, #4]	; (800246c <HAL_RCC_OscConfig+0xe38>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	e02a      	b.n	80024c0 <HAL_RCC_OscConfig+0xe8c>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002474:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800247c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002482:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fa93 f2a3 	rbit	r2, r3
 800248c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002490:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800249e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	4b86      	ldr	r3, [pc, #536]	; (80026d8 <HAL_RCC_OscConfig+0x10a4>)
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024c4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024cc:	6011      	str	r1, [r2, #0]
 80024ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024d2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	fa92 f1a2 	rbit	r1, r2
 80024dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024e0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80024e4:	6011      	str	r1, [r2, #0]
  return result;
 80024e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024ea:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	fab2 f282 	clz	r2, r2
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f042 0220 	orr.w	r2, r2, #32
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f002 021f 	and.w	r2, r2, #31
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f202 	lsl.w	r2, r1, r2
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	f43f af7f 	beq.w	800240c <HAL_RCC_OscConfig+0xdd8>
 800250e:	e0dd      	b.n	80026cc <HAL_RCC_OscConfig+0x1098>
 8002510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002514:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800251c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002522:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002530:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002534:	601a      	str	r2, [r3, #0]
  return result;
 8002536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800253a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800253e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800254a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	461a      	mov	r2, r3
 8002552:	2300      	movs	r3, #0
 8002554:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fdab 	bl	80010b0 <HAL_GetTick>
 800255a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255e:	e009      	b.n	8002574 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe fda6 	bl	80010b0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0ac      	b.n	80026ce <HAL_RCC_OscConfig+0x109a>
 8002574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002578:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800257c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002586:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002594:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002598:	601a      	str	r2, [r3, #0]
  return result;
 800259a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <HAL_RCC_OscConfig+0xf8a>
 80025b8:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_RCC_OscConfig+0x10a4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	e027      	b.n	800260e <HAL_RCC_OscConfig+0xfda>
 80025be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fa93 f2a3 	rbit	r2, r3
 80025da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	fa93 f2a3 	rbit	r2, r3
 8002600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002604:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	4b33      	ldr	r3, [pc, #204]	; (80026d8 <HAL_RCC_OscConfig+0x10a4>)
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002612:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002616:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800261a:	6011      	str	r1, [r2, #0]
 800261c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002620:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	fa92 f1a2 	rbit	r1, r2
 800262a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800262e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002632:	6011      	str	r1, [r2, #0]
  return result;
 8002634:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002638:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	fab2 f282 	clz	r2, r2
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	f042 0220 	orr.w	r2, r2, #32
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	f002 021f 	and.w	r2, r2, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f202 	lsl.w	r2, r1, r2
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d182      	bne.n	8002560 <HAL_RCC_OscConfig+0xf2c>
 800265a:	e037      	b.n	80026cc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800265c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002660:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e02e      	b.n	80026ce <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_OscConfig+0x10a4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <HAL_RCC_OscConfig+0x10a4>)
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002680:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002684:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	429a      	cmp	r2, r3
 8002696:	d117      	bne.n	80026c8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002698:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800269c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d10b      	bne.n	80026c8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80026b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026b4:	f003 020f 	and.w	r2, r3, #15
 80026b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b09e      	sub	sp, #120	; 0x78
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e162      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b90      	ldr	r3, [pc, #576]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d910      	bls.n	8002724 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b8d      	ldr	r3, [pc, #564]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	498b      	ldr	r1, [pc, #556]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b89      	ldr	r3, [pc, #548]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e14a      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b82      	ldr	r3, [pc, #520]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	497f      	ldr	r1, [pc, #508]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80dc 	beq.w	8002908 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d13c      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xf6>
 8002758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_RCC_ClockConfig+0xa6>
 800277c:	4b6f      	ldr	r3, [pc, #444]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	e00f      	b.n	80027a2 <HAL_RCC_ClockConfig+0xc6>
 8002782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002786:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	667b      	str	r3, [r7, #100]	; 0x64
 8002790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002794:	663b      	str	r3, [r7, #96]	; 0x60
 8002796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80027a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027aa:	fa92 f2a2 	rbit	r2, r2
 80027ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027b2:	fab2 f282 	clz	r2, r2
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	f042 0220 	orr.w	r2, r2, #32
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	f002 021f 	and.w	r2, r2, #31
 80027c2:	2101      	movs	r1, #1
 80027c4:	fa01 f202 	lsl.w	r2, r1, r2
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d17b      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0f3      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d13c      	bne.n	8002854 <HAL_RCC_ClockConfig+0x178>
 80027da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_ClockConfig+0x128>
 80027fe:	4b4f      	ldr	r3, [pc, #316]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	e00f      	b.n	8002824 <HAL_RCC_ClockConfig+0x148>
 8002804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002808:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	647b      	str	r3, [r7, #68]	; 0x44
 8002812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002816:	643b      	str	r3, [r7, #64]	; 0x40
 8002818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002820:	4b46      	ldr	r3, [pc, #280]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002828:	63ba      	str	r2, [r7, #56]	; 0x38
 800282a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800282c:	fa92 f2a2 	rbit	r2, r2
 8002830:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002834:	fab2 f282 	clz	r2, r2
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f042 0220 	orr.w	r2, r2, #32
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f002 021f 	and.w	r2, r2, #31
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d13a      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b2      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
 8002854:	2302      	movs	r3, #2
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d102      	bne.n	800287c <HAL_RCC_ClockConfig+0x1a0>
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	e00d      	b.n	8002898 <HAL_RCC_ClockConfig+0x1bc>
 800287c:	2302      	movs	r3, #2
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
 8002888:	2302      	movs	r3, #2
 800288a:	623b      	str	r3, [r7, #32]
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	2202      	movs	r2, #2
 800289a:	61ba      	str	r2, [r7, #24]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	fa92 f2a2 	rbit	r2, r2
 80028a2:	617a      	str	r2, [r7, #20]
  return result;
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	fab2 f282 	clz	r2, r2
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f042 0220 	orr.w	r2, r2, #32
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	f002 021f 	and.w	r2, r2, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e079      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	491a      	ldr	r1, [pc, #104]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fbea 	bl	80010b0 <HAL_GetTick>
 80028dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7fe fbe6 	bl	80010b0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e061      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d214      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4906      	ldr	r1, [pc, #24]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e040      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
 8002938:	40022000 	.word	0x40022000
 800293c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	491a      	ldr	r1, [pc, #104]	; (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4912      	ldr	r1, [pc, #72]	; (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800297e:	f000 f829 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8002982:	4601      	mov	r1, r0
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800298c:	22f0      	movs	r2, #240	; 0xf0
 800298e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	fa92 f2a2 	rbit	r2, r2
 8002996:	60fa      	str	r2, [r7, #12]
  return result;
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	fab2 f282 	clz	r2, r2
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	40d3      	lsrs	r3, r2
 80029a2:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x2ec>)
 80029a4:	5cd3      	ldrb	r3, [r2, r3]
 80029a6:	fa21 f303 	lsr.w	r3, r1, r3
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <HAL_RCC_ClockConfig+0x2f0>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_RCC_ClockConfig+0x2f4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fa7c 	bl	8000eb0 <HAL_InitTick>
  
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3778      	adds	r7, #120	; 0x78
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	08006f88 	.word	0x08006f88
 80029cc:	20000004 	.word	0x20000004
 80029d0:	20000008 	.word	0x20000008

080029d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b08b      	sub	sp, #44	; 0x2c
 80029d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029ee:	4b2a      	ldr	r3, [pc, #168]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x30>
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x36>
 8002a02:	e03f      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a06:	623b      	str	r3, [r7, #32]
      break;
 8002a08:	e03f      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	fa92 f2a2 	rbit	r2, r2
 8002a1c:	607a      	str	r2, [r7, #4]
  return result;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	fab2 f282 	clz	r2, r2
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	40d3      	lsrs	r3, r2
 8002a28:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	220f      	movs	r2, #15
 8002a38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	fa92 f2a2 	rbit	r2, r2
 8002a40:	60fa      	str	r2, [r7, #12]
  return result;
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	fab2 f282 	clz	r2, r2
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	40d3      	lsrs	r3, r2
 8002a4c:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a5c:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	e007      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fb02 f303 	mul.w	r3, r2, r3
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	623b      	str	r3, [r7, #32]
      break;
 8002a82:	e002      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a86:	623b      	str	r3, [r7, #32]
      break;
 8002a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	372c      	adds	r7, #44	; 0x2c
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	007a1200 	.word	0x007a1200
 8002aa0:	08006fa0 	.word	0x08006fa0
 8002aa4:	08006fb0 	.word	0x08006fb0

08002aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000004 	.word	0x20000004

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ac6:	f7ff ffef 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002aca:	4601      	mov	r1, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ad4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ad8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	fa92 f2a2 	rbit	r2, r2
 8002ae0:	603a      	str	r2, [r7, #0]
  return result;
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	40d3      	lsrs	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	08006f98 	.word	0x08006f98

08002b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b0a:	f7ff ffcd 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002b0e:	4601      	mov	r1, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	fa92 f2a2 	rbit	r2, r2
 8002b24:	603a      	str	r2, [r7, #0]
  return result;
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	fab2 f282 	clz	r2, r2
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	40d3      	lsrs	r3, r2
 8002b30:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	08006f98 	.word	0x08006f98

08002b48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	220f      	movs	r2, #15
 8002b56:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0203 	and.w	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	08db      	lsrs	r3, r3, #3
 8002b82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002b8a:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_RCC_GetClockConfig+0x60>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0207 	and.w	r2, r3, #7
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	601a      	str	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40022000 	.word	0x40022000

08002bac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b092      	sub	sp, #72	; 0x48
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80d4 	beq.w	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd0:	4b4e      	ldr	r3, [pc, #312]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10e      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	4a4a      	ldr	r2, [pc, #296]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be6:	61d3      	str	r3, [r2, #28]
 8002be8:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfa:	4b45      	ldr	r3, [pc, #276]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d118      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c06:	4b42      	ldr	r3, [pc, #264]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a41      	ldr	r2, [pc, #260]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c12:	f7fe fa4d 	bl	80010b0 <HAL_GetTick>
 8002c16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	e008      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1a:	f7fe fa49 	bl	80010b0 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b64      	cmp	r3, #100	; 0x64
 8002c26:	d901      	bls.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e1d6      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c38:	4b34      	ldr	r3, [pc, #208]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8084 	beq.w	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d07c      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c58:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	461a      	mov	r2, r3
 8002c82:	2301      	movs	r3, #1
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002caa:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d04b      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe f9f9 	bl	80010b0 <HAL_GetTick>
 8002cbe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fe f9f5 	bl	80010b0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e180      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	61fb      	str	r3, [r7, #28]
  return result;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d108      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d06:	4b01      	ldr	r3, [pc, #4]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	e00d      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40007000 	.word	0x40007000
 8002d14:	10908100 	.word	0x10908100
 8002d18:	2302      	movs	r3, #2
 8002d1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	4b9a      	ldr	r3, [pc, #616]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2202      	movs	r2, #2
 8002d2a:	613a      	str	r2, [r7, #16]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	fa92 f2a2 	rbit	r2, r2
 8002d32:	60fa      	str	r2, [r7, #12]
  return result;
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	fab2 f282 	clz	r2, r2
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f002 021f 	and.w	r2, r2, #31
 8002d46:	2101      	movs	r1, #1
 8002d48:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0b7      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d52:	4b8f      	ldr	r3, [pc, #572]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	498c      	ldr	r1, [pc, #560]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b88      	ldr	r3, [pc, #544]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	4a87      	ldr	r2, [pc, #540]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d84:	4b82      	ldr	r3, [pc, #520]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	f023 0203 	bic.w	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	497f      	ldr	r1, [pc, #508]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da2:	4b7b      	ldr	r3, [pc, #492]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4978      	ldr	r1, [pc, #480]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dc0:	4b73      	ldr	r3, [pc, #460]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	4970      	ldr	r1, [pc, #448]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dde:	4b6c      	ldr	r3, [pc, #432]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f023 0210 	bic.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	4969      	ldr	r1, [pc, #420]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002dfc:	4b64      	ldr	r3, [pc, #400]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	4961      	ldr	r1, [pc, #388]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e1a:	4b5d      	ldr	r3, [pc, #372]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f023 0220 	bic.w	r2, r3, #32
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	495a      	ldr	r1, [pc, #360]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e38:	4b55      	ldr	r3, [pc, #340]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	4952      	ldr	r1, [pc, #328]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e56:	4b4e      	ldr	r3, [pc, #312]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	494b      	ldr	r1, [pc, #300]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e74:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	4943      	ldr	r1, [pc, #268]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e92:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	493c      	ldr	r1, [pc, #240]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eb0:	4b37      	ldr	r3, [pc, #220]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	4934      	ldr	r1, [pc, #208]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ece:	4b30      	ldr	r3, [pc, #192]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	492d      	ldr	r1, [pc, #180]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef8:	4925      	ldr	r1, [pc, #148]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	491e      	ldr	r1, [pc, #120]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	4916      	ldr	r1, [pc, #88]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	490f      	ldr	r1, [pc, #60]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	4907      	ldr	r1, [pc, #28]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f82:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	e002      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f96:	4913      	ldr	r1, [pc, #76]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb4:	490b      	ldr	r1, [pc, #44]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd2:	4904      	ldr	r1, [pc, #16]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3748      	adds	r7, #72	; 0x48
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e049      	b.n	800308e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd fee6 	bl	8000de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3304      	adds	r3, #4
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f000 fab6 	bl	8003598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d001      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e04f      	b.n	8003150 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a23      	ldr	r2, [pc, #140]	; (800315c <HAL_TIM_Base_Start_IT+0xc4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01d      	beq.n	800310e <HAL_TIM_Base_Start_IT+0x76>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030da:	d018      	beq.n	800310e <HAL_TIM_Base_Start_IT+0x76>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <HAL_TIM_Base_Start_IT+0xc8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_TIM_Base_Start_IT+0x76>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_TIM_Base_Start_IT+0xcc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00e      	beq.n	800310e <HAL_TIM_Base_Start_IT+0x76>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <HAL_TIM_Base_Start_IT+0xd0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_TIM_Base_Start_IT+0x76>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1b      	ldr	r2, [pc, #108]	; (800316c <HAL_TIM_Base_Start_IT+0xd4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d004      	beq.n	800310e <HAL_TIM_Base_Start_IT+0x76>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_TIM_Base_Start_IT+0xd8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d115      	bne.n	800313a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_TIM_Base_Start_IT+0xdc>)
 8003116:	4013      	ands	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b06      	cmp	r3, #6
 800311e:	d015      	beq.n	800314c <HAL_TIM_Base_Start_IT+0xb4>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003126:	d011      	beq.n	800314c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003138:	e008      	b.n	800314c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e000      	b.n	800314e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40013400 	.word	0x40013400
 800316c:	40014000 	.word	0x40014000
 8003170:	40015000 	.word	0x40015000
 8003174:	00010007 	.word	0x00010007

08003178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	d122      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b02      	cmp	r3, #2
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0202 	mvn.w	r2, #2
 80031a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9ce 	bl	800355c <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f9c0 	bl	8003548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f9d1 	bl	8003570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0204 	mvn.w	r2, #4
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f9a4 	bl	800355c <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f996 	bl	8003548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9a7 	bl	8003570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b08      	cmp	r3, #8
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0208 	mvn.w	r2, #8
 800324c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2204      	movs	r2, #4
 8003252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f97a 	bl	800355c <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f96c 	bl	8003548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f97d 	bl	8003570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b10      	cmp	r3, #16
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b10      	cmp	r3, #16
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0210 	mvn.w	r2, #16
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2208      	movs	r2, #8
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f950 	bl	800355c <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f942 	bl	8003548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f953 	bl	8003570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10e      	bne.n	80032fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d107      	bne.n	80032fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0201 	mvn.w	r2, #1
 80032f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd fd32 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d10e      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d107      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fb06 	bl	8003934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003336:	d10e      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b80      	cmp	r3, #128	; 0x80
 8003344:	d107      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800334e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 faf9 	bl	8003948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d10e      	bne.n	8003382 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d107      	bne.n	8003382 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f901 	bl	8003584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d10e      	bne.n	80033ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b20      	cmp	r3, #32
 800339c:	d107      	bne.n	80033ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0220 	mvn.w	r2, #32
 80033a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fab9 	bl	8003920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_ConfigClockSource+0x1c>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e0b6      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x18a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2202      	movs	r2, #2
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340e:	d03e      	beq.n	800348e <HAL_TIM_ConfigClockSource+0xd8>
 8003410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003414:	f200 8087 	bhi.w	8003526 <HAL_TIM_ConfigClockSource+0x170>
 8003418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341c:	f000 8086 	beq.w	800352c <HAL_TIM_ConfigClockSource+0x176>
 8003420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003424:	d87f      	bhi.n	8003526 <HAL_TIM_ConfigClockSource+0x170>
 8003426:	2b70      	cmp	r3, #112	; 0x70
 8003428:	d01a      	beq.n	8003460 <HAL_TIM_ConfigClockSource+0xaa>
 800342a:	2b70      	cmp	r3, #112	; 0x70
 800342c:	d87b      	bhi.n	8003526 <HAL_TIM_ConfigClockSource+0x170>
 800342e:	2b60      	cmp	r3, #96	; 0x60
 8003430:	d050      	beq.n	80034d4 <HAL_TIM_ConfigClockSource+0x11e>
 8003432:	2b60      	cmp	r3, #96	; 0x60
 8003434:	d877      	bhi.n	8003526 <HAL_TIM_ConfigClockSource+0x170>
 8003436:	2b50      	cmp	r3, #80	; 0x50
 8003438:	d03c      	beq.n	80034b4 <HAL_TIM_ConfigClockSource+0xfe>
 800343a:	2b50      	cmp	r3, #80	; 0x50
 800343c:	d873      	bhi.n	8003526 <HAL_TIM_ConfigClockSource+0x170>
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d058      	beq.n	80034f4 <HAL_TIM_ConfigClockSource+0x13e>
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d86f      	bhi.n	8003526 <HAL_TIM_ConfigClockSource+0x170>
 8003446:	2b30      	cmp	r3, #48	; 0x30
 8003448:	d064      	beq.n	8003514 <HAL_TIM_ConfigClockSource+0x15e>
 800344a:	2b30      	cmp	r3, #48	; 0x30
 800344c:	d86b      	bhi.n	8003526 <HAL_TIM_ConfigClockSource+0x170>
 800344e:	2b20      	cmp	r3, #32
 8003450:	d060      	beq.n	8003514 <HAL_TIM_ConfigClockSource+0x15e>
 8003452:	2b20      	cmp	r3, #32
 8003454:	d867      	bhi.n	8003526 <HAL_TIM_ConfigClockSource+0x170>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d05c      	beq.n	8003514 <HAL_TIM_ConfigClockSource+0x15e>
 800345a:	2b10      	cmp	r3, #16
 800345c:	d05a      	beq.n	8003514 <HAL_TIM_ConfigClockSource+0x15e>
 800345e:	e062      	b.n	8003526 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6899      	ldr	r1, [r3, #8]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f000 f9aa 	bl	80037c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003482:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	609a      	str	r2, [r3, #8]
      break;
 800348c:	e04f      	b.n	800352e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6899      	ldr	r1, [r3, #8]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f000 f993 	bl	80037c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034b0:	609a      	str	r2, [r3, #8]
      break;
 80034b2:	e03c      	b.n	800352e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	461a      	mov	r2, r3
 80034c2:	f000 f907 	bl	80036d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2150      	movs	r1, #80	; 0x50
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f960 	bl	8003792 <TIM_ITRx_SetConfig>
      break;
 80034d2:	e02c      	b.n	800352e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	461a      	mov	r2, r3
 80034e2:	f000 f926 	bl	8003732 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2160      	movs	r1, #96	; 0x60
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f950 	bl	8003792 <TIM_ITRx_SetConfig>
      break;
 80034f2:	e01c      	b.n	800352e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6859      	ldr	r1, [r3, #4]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	461a      	mov	r2, r3
 8003502:	f000 f8e7 	bl	80036d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2140      	movs	r1, #64	; 0x40
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f940 	bl	8003792 <TIM_ITRx_SetConfig>
      break;
 8003512:	e00c      	b.n	800352e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f000 f937 	bl	8003792 <TIM_ITRx_SetConfig>
      break;
 8003524:	e003      	b.n	800352e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
      break;
 800352a:	e000      	b.n	800352e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800352c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <TIM_Base_SetConfig+0x11c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b6:	d00f      	beq.n	80035d8 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3f      	ldr	r2, [pc, #252]	; (80036b8 <TIM_Base_SetConfig+0x120>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00b      	beq.n	80035d8 <TIM_Base_SetConfig+0x40>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a3e      	ldr	r2, [pc, #248]	; (80036bc <TIM_Base_SetConfig+0x124>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d007      	beq.n	80035d8 <TIM_Base_SetConfig+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3d      	ldr	r2, [pc, #244]	; (80036c0 <TIM_Base_SetConfig+0x128>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a3c      	ldr	r2, [pc, #240]	; (80036c4 <TIM_Base_SetConfig+0x12c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d108      	bne.n	80035ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a31      	ldr	r2, [pc, #196]	; (80036b4 <TIM_Base_SetConfig+0x11c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01f      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d01b      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <TIM_Base_SetConfig+0x120>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d017      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2d      	ldr	r2, [pc, #180]	; (80036bc <TIM_Base_SetConfig+0x124>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <TIM_Base_SetConfig+0x128>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00f      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2c      	ldr	r2, [pc, #176]	; (80036c8 <TIM_Base_SetConfig+0x130>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00b      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2b      	ldr	r2, [pc, #172]	; (80036cc <TIM_Base_SetConfig+0x134>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2a      	ldr	r2, [pc, #168]	; (80036d0 <TIM_Base_SetConfig+0x138>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <TIM_Base_SetConfig+0x9a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <TIM_Base_SetConfig+0x12c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <TIM_Base_SetConfig+0x11c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <TIM_Base_SetConfig+0x100>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <TIM_Base_SetConfig+0x128>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00f      	beq.n	8003698 <TIM_Base_SetConfig+0x100>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <TIM_Base_SetConfig+0x130>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00b      	beq.n	8003698 <TIM_Base_SetConfig+0x100>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a12      	ldr	r2, [pc, #72]	; (80036cc <TIM_Base_SetConfig+0x134>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <TIM_Base_SetConfig+0x100>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <TIM_Base_SetConfig+0x138>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <TIM_Base_SetConfig+0x100>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a0c      	ldr	r2, [pc, #48]	; (80036c4 <TIM_Base_SetConfig+0x12c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d103      	bne.n	80036a0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	615a      	str	r2, [r3, #20]
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40013400 	.word	0x40013400
 80036c4:	40015000 	.word	0x40015000
 80036c8:	40014000 	.word	0x40014000
 80036cc:	40014400 	.word	0x40014400
 80036d0:	40014800 	.word	0x40014800

080036d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f023 0201 	bic.w	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f023 030a 	bic.w	r3, r3, #10
 8003710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	621a      	str	r2, [r3, #32]
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003732:	b480      	push	{r7}
 8003734:	b087      	sub	sp, #28
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f023 0210 	bic.w	r2, r3, #16
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800375c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	031b      	lsls	r3, r3, #12
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800376e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f043 0307 	orr.w	r3, r3, #7
 80037b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	609a      	str	r2, [r3, #8]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	021a      	lsls	r2, r3, #8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	609a      	str	r2, [r3, #8]
}
 80037fc:	bf00      	nop
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800381c:	2302      	movs	r3, #2
 800381e:	e06d      	b.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a30      	ldr	r2, [pc, #192]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d009      	beq.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2f      	ldr	r2, [pc, #188]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2d      	ldr	r2, [pc, #180]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d108      	bne.n	8003870 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003864:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1e      	ldr	r2, [pc, #120]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d01d      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389c:	d018      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1a      	ldr	r2, [pc, #104]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a15      	ldr	r2, [pc, #84]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a16      	ldr	r2, [pc, #88]	; (800391c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a11      	ldr	r2, [pc, #68]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10c      	bne.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40012c00 	.word	0x40012c00
 800390c:	40013400 	.word	0x40013400
 8003910:	40015000 	.word	0x40015000
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800
 800391c:	40014000 	.word	0x40014000

08003920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e040      	b.n	80039f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fa54 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	; 0x24
 8003988:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f82c 	bl	80039f8 <UART_SetConfig>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e022      	b.n	80039f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f9f4 	bl	8003da0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fa7b 	bl	8003ee4 <UART_CheckIdleState>
 80039ee:	4603      	mov	r3, r0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b92      	ldr	r3, [pc, #584]	; (8003c6c <UART_SetConfig+0x274>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	6979      	ldr	r1, [r7, #20]
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a80      	ldr	r2, [pc, #512]	; (8003c70 <UART_SetConfig+0x278>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d120      	bne.n	8003ab6 <UART_SetConfig+0xbe>
 8003a74:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <UART_SetConfig+0x27c>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d817      	bhi.n	8003ab0 <UART_SetConfig+0xb8>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <UART_SetConfig+0x90>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003a99 	.word	0x08003a99
 8003a8c:	08003aa5 	.word	0x08003aa5
 8003a90:	08003aab 	.word	0x08003aab
 8003a94:	08003a9f 	.word	0x08003a9f
 8003a98:	2301      	movs	r3, #1
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e0b5      	b.n	8003c0a <UART_SetConfig+0x212>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	e0b2      	b.n	8003c0a <UART_SetConfig+0x212>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e0af      	b.n	8003c0a <UART_SetConfig+0x212>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	77fb      	strb	r3, [r7, #31]
 8003aae:	e0ac      	b.n	8003c0a <UART_SetConfig+0x212>
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e0a9      	b.n	8003c0a <UART_SetConfig+0x212>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6f      	ldr	r2, [pc, #444]	; (8003c78 <UART_SetConfig+0x280>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d124      	bne.n	8003b0a <UART_SetConfig+0x112>
 8003ac0:	4b6c      	ldr	r3, [pc, #432]	; (8003c74 <UART_SetConfig+0x27c>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003acc:	d011      	beq.n	8003af2 <UART_SetConfig+0xfa>
 8003ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ad2:	d817      	bhi.n	8003b04 <UART_SetConfig+0x10c>
 8003ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ad8:	d011      	beq.n	8003afe <UART_SetConfig+0x106>
 8003ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ade:	d811      	bhi.n	8003b04 <UART_SetConfig+0x10c>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <UART_SetConfig+0xf4>
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d006      	beq.n	8003af8 <UART_SetConfig+0x100>
 8003aea:	e00b      	b.n	8003b04 <UART_SetConfig+0x10c>
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e08b      	b.n	8003c0a <UART_SetConfig+0x212>
 8003af2:	2302      	movs	r3, #2
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e088      	b.n	8003c0a <UART_SetConfig+0x212>
 8003af8:	2304      	movs	r3, #4
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e085      	b.n	8003c0a <UART_SetConfig+0x212>
 8003afe:	2308      	movs	r3, #8
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e082      	b.n	8003c0a <UART_SetConfig+0x212>
 8003b04:	2310      	movs	r3, #16
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e07f      	b.n	8003c0a <UART_SetConfig+0x212>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a5b      	ldr	r2, [pc, #364]	; (8003c7c <UART_SetConfig+0x284>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d124      	bne.n	8003b5e <UART_SetConfig+0x166>
 8003b14:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <UART_SetConfig+0x27c>)
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003b1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b20:	d011      	beq.n	8003b46 <UART_SetConfig+0x14e>
 8003b22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b26:	d817      	bhi.n	8003b58 <UART_SetConfig+0x160>
 8003b28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b2c:	d011      	beq.n	8003b52 <UART_SetConfig+0x15a>
 8003b2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b32:	d811      	bhi.n	8003b58 <UART_SetConfig+0x160>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <UART_SetConfig+0x148>
 8003b38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b3c:	d006      	beq.n	8003b4c <UART_SetConfig+0x154>
 8003b3e:	e00b      	b.n	8003b58 <UART_SetConfig+0x160>
 8003b40:	2300      	movs	r3, #0
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e061      	b.n	8003c0a <UART_SetConfig+0x212>
 8003b46:	2302      	movs	r3, #2
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e05e      	b.n	8003c0a <UART_SetConfig+0x212>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e05b      	b.n	8003c0a <UART_SetConfig+0x212>
 8003b52:	2308      	movs	r3, #8
 8003b54:	77fb      	strb	r3, [r7, #31]
 8003b56:	e058      	b.n	8003c0a <UART_SetConfig+0x212>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	e055      	b.n	8003c0a <UART_SetConfig+0x212>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a47      	ldr	r2, [pc, #284]	; (8003c80 <UART_SetConfig+0x288>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d124      	bne.n	8003bb2 <UART_SetConfig+0x1ba>
 8003b68:	4b42      	ldr	r3, [pc, #264]	; (8003c74 <UART_SetConfig+0x27c>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b74:	d011      	beq.n	8003b9a <UART_SetConfig+0x1a2>
 8003b76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b7a:	d817      	bhi.n	8003bac <UART_SetConfig+0x1b4>
 8003b7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b80:	d011      	beq.n	8003ba6 <UART_SetConfig+0x1ae>
 8003b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b86:	d811      	bhi.n	8003bac <UART_SetConfig+0x1b4>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <UART_SetConfig+0x19c>
 8003b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b90:	d006      	beq.n	8003ba0 <UART_SetConfig+0x1a8>
 8003b92:	e00b      	b.n	8003bac <UART_SetConfig+0x1b4>
 8003b94:	2300      	movs	r3, #0
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e037      	b.n	8003c0a <UART_SetConfig+0x212>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e034      	b.n	8003c0a <UART_SetConfig+0x212>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e031      	b.n	8003c0a <UART_SetConfig+0x212>
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e02e      	b.n	8003c0a <UART_SetConfig+0x212>
 8003bac:	2310      	movs	r3, #16
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e02b      	b.n	8003c0a <UART_SetConfig+0x212>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a33      	ldr	r2, [pc, #204]	; (8003c84 <UART_SetConfig+0x28c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d124      	bne.n	8003c06 <UART_SetConfig+0x20e>
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <UART_SetConfig+0x27c>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003bc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bc8:	d011      	beq.n	8003bee <UART_SetConfig+0x1f6>
 8003bca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bce:	d817      	bhi.n	8003c00 <UART_SetConfig+0x208>
 8003bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd4:	d011      	beq.n	8003bfa <UART_SetConfig+0x202>
 8003bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bda:	d811      	bhi.n	8003c00 <UART_SetConfig+0x208>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <UART_SetConfig+0x1f0>
 8003be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be4:	d006      	beq.n	8003bf4 <UART_SetConfig+0x1fc>
 8003be6:	e00b      	b.n	8003c00 <UART_SetConfig+0x208>
 8003be8:	2300      	movs	r3, #0
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e00d      	b.n	8003c0a <UART_SetConfig+0x212>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e00a      	b.n	8003c0a <UART_SetConfig+0x212>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e007      	b.n	8003c0a <UART_SetConfig+0x212>
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e004      	b.n	8003c0a <UART_SetConfig+0x212>
 8003c00:	2310      	movs	r3, #16
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e001      	b.n	8003c0a <UART_SetConfig+0x212>
 8003c06:	2310      	movs	r3, #16
 8003c08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c12:	d16b      	bne.n	8003cec <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d838      	bhi.n	8003c8c <UART_SetConfig+0x294>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <UART_SetConfig+0x228>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c45 	.word	0x08003c45
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	08003c55 	.word	0x08003c55
 8003c2c:	08003c8d 	.word	0x08003c8d
 8003c30:	08003c5b 	.word	0x08003c5b
 8003c34:	08003c8d 	.word	0x08003c8d
 8003c38:	08003c8d 	.word	0x08003c8d
 8003c3c:	08003c8d 	.word	0x08003c8d
 8003c40:	08003c63 	.word	0x08003c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c44:	f7fe ff3c 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8003c48:	61b8      	str	r0, [r7, #24]
        break;
 8003c4a:	e024      	b.n	8003c96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c4c:	f7fe ff5a 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 8003c50:	61b8      	str	r0, [r7, #24]
        break;
 8003c52:	e020      	b.n	8003c96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <UART_SetConfig+0x290>)
 8003c56:	61bb      	str	r3, [r7, #24]
        break;
 8003c58:	e01d      	b.n	8003c96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5a:	f7fe febb 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8003c5e:	61b8      	str	r0, [r7, #24]
        break;
 8003c60:	e019      	b.n	8003c96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c66:	61bb      	str	r3, [r7, #24]
        break;
 8003c68:	e015      	b.n	8003c96 <UART_SetConfig+0x29e>
 8003c6a:	bf00      	nop
 8003c6c:	efff69f3 	.word	0xefff69f3
 8003c70:	40013800 	.word	0x40013800
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40004400 	.word	0x40004400
 8003c7c:	40004800 	.word	0x40004800
 8003c80:	40004c00 	.word	0x40004c00
 8003c84:	40005000 	.word	0x40005000
 8003c88:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	77bb      	strb	r3, [r7, #30]
        break;
 8003c94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d073      	beq.n	8003d84 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	005a      	lsls	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	441a      	add	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b0f      	cmp	r3, #15
 8003cb6:	d916      	bls.n	8003ce6 <UART_SetConfig+0x2ee>
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbe:	d212      	bcs.n	8003ce6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f023 030f 	bic.w	r3, r3, #15
 8003cc8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	89fb      	ldrh	r3, [r7, #14]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	89fa      	ldrh	r2, [r7, #14]
 8003ce2:	60da      	str	r2, [r3, #12]
 8003ce4:	e04e      	b.n	8003d84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	77bb      	strb	r3, [r7, #30]
 8003cea:	e04b      	b.n	8003d84 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cec:	7ffb      	ldrb	r3, [r7, #31]
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d827      	bhi.n	8003d42 <UART_SetConfig+0x34a>
 8003cf2:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <UART_SetConfig+0x300>)
 8003cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d25 	.word	0x08003d25
 8003d00:	08003d2d 	.word	0x08003d2d
 8003d04:	08003d43 	.word	0x08003d43
 8003d08:	08003d33 	.word	0x08003d33
 8003d0c:	08003d43 	.word	0x08003d43
 8003d10:	08003d43 	.word	0x08003d43
 8003d14:	08003d43 	.word	0x08003d43
 8003d18:	08003d3b 	.word	0x08003d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d1c:	f7fe fed0 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8003d20:	61b8      	str	r0, [r7, #24]
        break;
 8003d22:	e013      	b.n	8003d4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d24:	f7fe feee 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 8003d28:	61b8      	str	r0, [r7, #24]
        break;
 8003d2a:	e00f      	b.n	8003d4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <UART_SetConfig+0x3a4>)
 8003d2e:	61bb      	str	r3, [r7, #24]
        break;
 8003d30:	e00c      	b.n	8003d4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d32:	f7fe fe4f 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8003d36:	61b8      	str	r0, [r7, #24]
        break;
 8003d38:	e008      	b.n	8003d4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3e:	61bb      	str	r3, [r7, #24]
        break;
 8003d40:	e004      	b.n	8003d4c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	77bb      	strb	r3, [r7, #30]
        break;
 8003d4a:	bf00      	nop
    }

    if (pclk != 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d018      	beq.n	8003d84 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	085a      	lsrs	r2, r3, #1
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	441a      	add	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b0f      	cmp	r3, #15
 8003d6a:	d909      	bls.n	8003d80 <UART_SetConfig+0x388>
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d72:	d205      	bcs.n	8003d80 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60da      	str	r2, [r3, #12]
 8003d7e:	e001      	b.n	8003d84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003d90:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3720      	adds	r7, #32
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	007a1200 	.word	0x007a1200

08003da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01a      	beq.n	8003eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e9e:	d10a      	bne.n	8003eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b098      	sub	sp, #96	; 0x60
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ef4:	f7fd f8dc 	bl	80010b0 <HAL_GetTick>
 8003ef8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d12e      	bne.n	8003f66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f10:	2200      	movs	r2, #0
 8003f12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f88c 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d021      	beq.n	8003f66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f36:	653b      	str	r3, [r7, #80]	; 0x50
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f40:	647b      	str	r3, [r7, #68]	; 0x44
 8003f42:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e6      	bne.n	8003f22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e062      	b.n	800402c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d149      	bne.n	8004008 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f856 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d03c      	beq.n	8004008 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	623b      	str	r3, [r7, #32]
   return(result);
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fac:	633b      	str	r3, [r7, #48]	; 0x30
 8003fae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e6      	bne.n	8003f8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe0:	61fa      	str	r2, [r7, #28]
 8003fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	69b9      	ldr	r1, [r7, #24]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	617b      	str	r3, [r7, #20]
   return(result);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e5      	bne.n	8003fc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e011      	b.n	800402c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3758      	adds	r7, #88	; 0x58
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004044:	e049      	b.n	80040da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800404c:	d045      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fd f82f 	bl	80010b0 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <UART_WaitOnFlagUntilTimeout+0x30>
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e048      	b.n	80040fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d031      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b08      	cmp	r3, #8
 8004082:	d110      	bne.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2208      	movs	r2, #8
 800408a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f838 	bl	8004102 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2208      	movs	r2, #8
 8004096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e029      	b.n	80040fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b4:	d111      	bne.n	80040da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f81e 	bl	8004102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e00f      	b.n	80040fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4013      	ands	r3, r2
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d0a6      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004102:	b480      	push	{r7}
 8004104:	b095      	sub	sp, #84	; 0x54
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800411e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004128:	643b      	str	r3, [r7, #64]	; 0x40
 800412a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800412e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e6      	bne.n	800410a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3308      	adds	r3, #8
 8004142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	61fb      	str	r3, [r7, #28]
   return(result);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	64bb      	str	r3, [r7, #72]	; 0x48
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3308      	adds	r3, #8
 800415a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800415c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004174:	2b01      	cmp	r3, #1
 8004176:	d118      	bne.n	80041aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	60bb      	str	r3, [r7, #8]
   return(result);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f023 0310 	bic.w	r3, r3, #16
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	6979      	ldr	r1, [r7, #20]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	613b      	str	r3, [r7, #16]
   return(result);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e6      	bne.n	8004178 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80041be:	bf00      	nop
 80041c0:	3754      	adds	r7, #84	; 0x54
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041d2:	f3ef 8305 	mrs	r3, IPSR
 80041d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80041d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10f      	bne.n	80041fe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041de:	f3ef 8310 	mrs	r3, PRIMASK
 80041e2:	607b      	str	r3, [r7, #4]
  return(result);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <osKernelInitialize+0x32>
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <osKernelInitialize+0x64>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d109      	bne.n	8004206 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041f2:	f3ef 8311 	mrs	r3, BASEPRI
 80041f6:	603b      	str	r3, [r7, #0]
  return(result);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80041fe:	f06f 0305 	mvn.w	r3, #5
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e00c      	b.n	8004220 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <osKernelInitialize+0x64>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800420e:	4b08      	ldr	r3, [pc, #32]	; (8004230 <osKernelInitialize+0x64>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e002      	b.n	8004220 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800421a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800421e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004220:	68fb      	ldr	r3, [r7, #12]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000200 	.word	0x20000200

08004234 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800423a:	f3ef 8305 	mrs	r3, IPSR
 800423e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004240:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004246:	f3ef 8310 	mrs	r3, PRIMASK
 800424a:	607b      	str	r3, [r7, #4]
  return(result);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <osKernelStart+0x32>
 8004252:	4b11      	ldr	r3, [pc, #68]	; (8004298 <osKernelStart+0x64>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d109      	bne.n	800426e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800425a:	f3ef 8311 	mrs	r3, BASEPRI
 800425e:	603b      	str	r3, [r7, #0]
  return(result);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004266:	f06f 0305 	mvn.w	r3, #5
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e00e      	b.n	800428c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <osKernelStart+0x64>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <osKernelStart+0x64>)
 8004278:	2202      	movs	r2, #2
 800427a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800427c:	f001 f898 	bl	80053b0 <vTaskStartScheduler>
      stat = osOK;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	e002      	b.n	800428c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800428a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800428c:	68fb      	ldr	r3, [r7, #12]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000200 	.word	0x20000200

0800429c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b092      	sub	sp, #72	; 0x48
 80042a0:	af04      	add	r7, sp, #16
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ac:	f3ef 8305 	mrs	r3, IPSR
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f040 8094 	bne.w	80043e2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ba:	f3ef 8310 	mrs	r3, PRIMASK
 80042be:	623b      	str	r3, [r7, #32]
  return(result);
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 808d 	bne.w	80043e2 <osThreadNew+0x146>
 80042c8:	4b48      	ldr	r3, [pc, #288]	; (80043ec <osThreadNew+0x150>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d106      	bne.n	80042de <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042d0:	f3ef 8311 	mrs	r3, BASEPRI
 80042d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f040 8082 	bne.w	80043e2 <osThreadNew+0x146>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d07e      	beq.n	80043e2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80042e8:	2318      	movs	r3, #24
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80042ec:	2300      	movs	r3, #0
 80042ee:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80042f0:	f107 031b 	add.w	r3, r7, #27
 80042f4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d045      	beq.n	800438e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <osThreadNew+0x74>
        name = attr->name;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <osThreadNew+0x9a>
 8004324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004326:	2b38      	cmp	r3, #56	; 0x38
 8004328:	d805      	bhi.n	8004336 <osThreadNew+0x9a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <osThreadNew+0x9e>
        return (NULL);
 8004336:	2300      	movs	r3, #0
 8004338:	e054      	b.n	80043e4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00e      	beq.n	8004370 <osThreadNew+0xd4>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2bbb      	cmp	r3, #187	; 0xbb
 8004358:	d90a      	bls.n	8004370 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <osThreadNew+0xd4>
        mem = 1;
 800436a:	2301      	movs	r3, #1
 800436c:	62bb      	str	r3, [r7, #40]	; 0x28
 800436e:	e010      	b.n	8004392 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10c      	bne.n	8004392 <osThreadNew+0xf6>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d108      	bne.n	8004392 <osThreadNew+0xf6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d104      	bne.n	8004392 <osThreadNew+0xf6>
          mem = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
 800438c:	e001      	b.n	8004392 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	2b01      	cmp	r3, #1
 8004396:	d110      	bne.n	80043ba <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043a0:	9202      	str	r2, [sp, #8]
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fe1a 	bl	8004fe8 <xTaskCreateStatic>
 80043b4:	4603      	mov	r3, r0
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e013      	b.n	80043e2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d110      	bne.n	80043e2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	f107 0314 	add.w	r3, r7, #20
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fe64 	bl	80050a0 <xTaskCreate>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d001      	beq.n	80043e2 <osThreadNew+0x146>
          hTask = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043e2:	697b      	ldr	r3, [r7, #20]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3738      	adds	r7, #56	; 0x38
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000200 	.word	0x20000200

080043f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043f8:	f3ef 8305 	mrs	r3, IPSR
 80043fc:	613b      	str	r3, [r7, #16]
  return(result);
 80043fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10f      	bne.n	8004424 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004404:	f3ef 8310 	mrs	r3, PRIMASK
 8004408:	60fb      	str	r3, [r7, #12]
  return(result);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d109      	bne.n	8004424 <osDelay+0x34>
 8004410:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <osDelay+0x58>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d109      	bne.n	800442c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004418:	f3ef 8311 	mrs	r3, BASEPRI
 800441c:	60bb      	str	r3, [r7, #8]
  return(result);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <osDelay+0x3c>
    stat = osErrorISR;
 8004424:	f06f 0305 	mvn.w	r3, #5
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	e007      	b.n	800443c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 ff86 	bl	8005348 <vTaskDelay>
    }
  }

  return (stat);
 800443c:	697b      	ldr	r3, [r7, #20]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000200 	.word	0x20000200

0800444c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a07      	ldr	r2, [pc, #28]	; (8004478 <vApplicationGetIdleTaskMemory+0x2c>)
 800445c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4a06      	ldr	r2, [pc, #24]	; (800447c <vApplicationGetIdleTaskMemory+0x30>)
 8004462:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2280      	movs	r2, #128	; 0x80
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000204 	.word	0x20000204
 800447c:	200002c0 	.word	0x200002c0

08004480 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4a07      	ldr	r2, [pc, #28]	; (80044ac <vApplicationGetTimerTaskMemory+0x2c>)
 8004490:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4a06      	ldr	r2, [pc, #24]	; (80044b0 <vApplicationGetTimerTaskMemory+0x30>)
 8004496:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800449e:	601a      	str	r2, [r3, #0]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	200004c0 	.word	0x200004c0
 80044b0:	2000057c 	.word	0x2000057c

080044b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f103 0208 	add.w	r2, r3, #8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f103 0208 	add.w	r2, r3, #8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f103 0208 	add.w	r2, r3, #8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	601a      	str	r2, [r3, #0]
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800456c:	d103      	bne.n	8004576 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e00c      	b.n	8004590 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3308      	adds	r3, #8
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e002      	b.n	8004584 <vListInsert+0x2e>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	429a      	cmp	r2, r3
 800458e:	d2f6      	bcs.n	800457e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	601a      	str	r2, [r3, #0]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6892      	ldr	r2, [r2, #8]
 80045de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6852      	ldr	r2, [r2, #4]
 80045e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d103      	bne.n	80045fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	1e5a      	subs	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004646:	f002 f835 	bl	80066b4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	441a      	add	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	3b01      	subs	r3, #1
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	441a      	add	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	22ff      	movs	r2, #255	; 0xff
 800468a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	22ff      	movs	r2, #255	; 0xff
 8004692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d114      	bne.n	80046c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01a      	beq.n	80046da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3310      	adds	r3, #16
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f91f 	bl	80058ec <xTaskRemoveFromEventList>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d012      	beq.n	80046da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <xQueueGenericReset+0xcc>)
 80046b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	e009      	b.n	80046da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3310      	adds	r3, #16
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fef2 	bl	80044b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3324      	adds	r3, #36	; 0x24
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff feed 	bl	80044b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046da:	f002 f81b 	bl	8006714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046de:	2301      	movs	r3, #1
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08e      	sub	sp, #56	; 0x38
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10a      	bne.n	8004732 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800472e:	bf00      	nop
 8004730:	e7fe      	b.n	8004730 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <xQueueGenericCreateStatic+0x52>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <xQueueGenericCreateStatic+0x56>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <xQueueGenericCreateStatic+0x58>
 8004742:	2300      	movs	r3, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	623b      	str	r3, [r7, #32]
}
 800475a:	bf00      	nop
 800475c:	e7fe      	b.n	800475c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <xQueueGenericCreateStatic+0x7e>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <xQueueGenericCreateStatic+0x82>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <xQueueGenericCreateStatic+0x84>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	61fb      	str	r3, [r7, #28]
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800478a:	2350      	movs	r3, #80	; 0x50
 800478c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b50      	cmp	r3, #80	; 0x50
 8004792:	d00a      	beq.n	80047aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	61bb      	str	r3, [r7, #24]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f805 	bl	80047da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3730      	adds	r7, #48	; 0x30
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	e002      	b.n	80047fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004808:	2101      	movs	r1, #1
 800480a:	69b8      	ldr	r0, [r7, #24]
 800480c:	f7ff ff06 	bl	800461c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08e      	sub	sp, #56	; 0x38
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800482e:	2300      	movs	r3, #0
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <xQueueGenericSend+0x32>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800484e:	bf00      	nop
 8004850:	e7fe      	b.n	8004850 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d103      	bne.n	8004860 <xQueueGenericSend+0x40>
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <xQueueGenericSend+0x44>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <xQueueGenericSend+0x46>
 8004864:	2300      	movs	r3, #0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <xQueueGenericSend+0x60>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d103      	bne.n	800488e <xQueueGenericSend+0x6e>
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <xQueueGenericSend+0x72>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <xQueueGenericSend+0x74>
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xQueueGenericSend+0x8e>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	623b      	str	r3, [r7, #32]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048ae:	f001 f9e5 	bl	8005c7c <xTaskGetSchedulerState>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <xQueueGenericSend+0x9e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <xQueueGenericSend+0xa2>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <xQueueGenericSend+0xa4>
 80048c2:	2300      	movs	r3, #0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <xQueueGenericSend+0xbe>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	61fb      	str	r3, [r7, #28]
}
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048de:	f001 fee9 	bl	80066b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <xQueueGenericSend+0xd4>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d129      	bne.n	8004948 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048fa:	f000 fa07 	bl	8004d0c <prvCopyDataToQueue>
 80048fe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	2b00      	cmp	r3, #0
 8004906:	d010      	beq.n	800492a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	3324      	adds	r3, #36	; 0x24
 800490c:	4618      	mov	r0, r3
 800490e:	f000 ffed 	bl	80058ec <xTaskRemoveFromEventList>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d013      	beq.n	8004940 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004918:	4b3f      	ldr	r3, [pc, #252]	; (8004a18 <xQueueGenericSend+0x1f8>)
 800491a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	e00a      	b.n	8004940 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004930:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <xQueueGenericSend+0x1f8>)
 8004932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004940:	f001 fee8 	bl	8006714 <vPortExitCritical>
				return pdPASS;
 8004944:	2301      	movs	r3, #1
 8004946:	e063      	b.n	8004a10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800494e:	f001 fee1 	bl	8006714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004952:	2300      	movs	r3, #0
 8004954:	e05c      	b.n	8004a10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800495c:	f107 0314 	add.w	r3, r7, #20
 8004960:	4618      	mov	r0, r3
 8004962:	f001 f827 	bl	80059b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004966:	2301      	movs	r3, #1
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800496a:	f001 fed3 	bl	8006714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800496e:	f000 fd8f 	bl	8005490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004972:	f001 fe9f 	bl	80066b4 <vPortEnterCritical>
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800497c:	b25b      	sxtb	r3, r3
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004982:	d103      	bne.n	800498c <xQueueGenericSend+0x16c>
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004992:	b25b      	sxtb	r3, r3
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004998:	d103      	bne.n	80049a2 <xQueueGenericSend+0x182>
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a2:	f001 feb7 	bl	8006714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049a6:	1d3a      	adds	r2, r7, #4
 80049a8:	f107 0314 	add.w	r3, r7, #20
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f001 f816 	bl	80059e0 <xTaskCheckForTimeOut>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d124      	bne.n	8004a04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049bc:	f000 fa9e 	bl	8004efc <prvIsQueueFull>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d018      	beq.n	80049f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	3310      	adds	r3, #16
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 ff3c 	bl	800584c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d6:	f000 fa29 	bl	8004e2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049da:	f000 fd67 	bl	80054ac <xTaskResumeAll>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f47f af7c 	bne.w	80048de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049e6:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <xQueueGenericSend+0x1f8>)
 80049e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	e772      	b.n	80048de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049fa:	f000 fa17 	bl	8004e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049fe:	f000 fd55 	bl	80054ac <xTaskResumeAll>
 8004a02:	e76c      	b.n	80048de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a06:	f000 fa11 	bl	8004e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a0a:	f000 fd4f 	bl	80054ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a0e:	2300      	movs	r3, #0
		}
	}
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3738      	adds	r7, #56	; 0x38
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08e      	sub	sp, #56	; 0x38
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <xQueueGenericSendFromISR+0x3c>
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <xQueueGenericSendFromISR+0x40>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <xQueueGenericSendFromISR+0x42>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	623b      	str	r3, [r7, #32]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d103      	bne.n	8004a86 <xQueueGenericSendFromISR+0x6a>
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <xQueueGenericSendFromISR+0x6e>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <xQueueGenericSendFromISR+0x70>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	61fb      	str	r3, [r7, #28]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aa6:	f001 fee7 	bl	8006878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004aaa:	f3ef 8211 	mrs	r2, BASEPRI
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	61ba      	str	r2, [r7, #24]
 8004ac0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d302      	bcc.n	8004ad8 <xQueueGenericSendFromISR+0xbc>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d12c      	bne.n	8004b32 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae8:	f000 f910 	bl	8004d0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004aec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004af4:	d112      	bne.n	8004b1c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d016      	beq.n	8004b2c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	3324      	adds	r3, #36	; 0x24
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fef2 	bl	80058ec <xTaskRemoveFromEventList>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00e      	beq.n	8004b2c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00b      	beq.n	8004b2c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	e007      	b.n	8004b2c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b20:	3301      	adds	r3, #1
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	b25a      	sxtb	r2, r3
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004b30:	e001      	b.n	8004b36 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3738      	adds	r7, #56	; 0x38
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08c      	sub	sp, #48	; 0x30
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <xQueueReceive+0x30>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	623b      	str	r3, [r7, #32]
}
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d103      	bne.n	8004b8a <xQueueReceive+0x3e>
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <xQueueReceive+0x42>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <xQueueReceive+0x44>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <xQueueReceive+0x5e>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	61fb      	str	r3, [r7, #28]
}
 8004ba6:	bf00      	nop
 8004ba8:	e7fe      	b.n	8004ba8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004baa:	f001 f867 	bl	8005c7c <xTaskGetSchedulerState>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <xQueueReceive+0x6e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <xQueueReceive+0x72>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <xQueueReceive+0x74>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <xQueueReceive+0x8e>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	61bb      	str	r3, [r7, #24]
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bda:	f001 fd6b 	bl	80066b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01f      	beq.n	8004c2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bee:	f000 f8f7 	bl	8004de0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00f      	beq.n	8004c22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	3310      	adds	r3, #16
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fe70 	bl	80058ec <xTaskRemoveFromEventList>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c12:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <xQueueReceive+0x1bc>)
 8004c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c22:	f001 fd77 	bl	8006714 <vPortExitCritical>
				return pdPASS;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e069      	b.n	8004cfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d103      	bne.n	8004c38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c30:	f001 fd70 	bl	8006714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e062      	b.n	8004cfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c3e:	f107 0310 	add.w	r3, r7, #16
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 feb6 	bl	80059b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c4c:	f001 fd62 	bl	8006714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c50:	f000 fc1e 	bl	8005490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c54:	f001 fd2e 	bl	80066b4 <vPortEnterCritical>
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c5e:	b25b      	sxtb	r3, r3
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c64:	d103      	bne.n	8004c6e <xQueueReceive+0x122>
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7a:	d103      	bne.n	8004c84 <xQueueReceive+0x138>
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c84:	f001 fd46 	bl	8006714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c88:	1d3a      	adds	r2, r7, #4
 8004c8a:	f107 0310 	add.w	r3, r7, #16
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fea5 	bl	80059e0 <xTaskCheckForTimeOut>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d123      	bne.n	8004ce4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c9e:	f000 f917 	bl	8004ed0 <prvIsQueueEmpty>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	3324      	adds	r3, #36	; 0x24
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fdcb 	bl	800584c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb8:	f000 f8b8 	bl	8004e2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cbc:	f000 fbf6 	bl	80054ac <xTaskResumeAll>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d189      	bne.n	8004bda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004cc6:	4b10      	ldr	r3, [pc, #64]	; (8004d08 <xQueueReceive+0x1bc>)
 8004cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	e780      	b.n	8004bda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cda:	f000 f8a7 	bl	8004e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cde:	f000 fbe5 	bl	80054ac <xTaskResumeAll>
 8004ce2:	e77a      	b.n	8004bda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce6:	f000 f8a1 	bl	8004e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cea:	f000 fbdf 	bl	80054ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf0:	f000 f8ee 	bl	8004ed0 <prvIsQueueEmpty>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f43f af6f 	beq.w	8004bda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3730      	adds	r7, #48	; 0x30
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d14d      	bne.n	8004dce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 ffbe 	bl	8005cb8 <xTaskPriorityDisinherit>
 8004d3c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	605a      	str	r2, [r3, #4]
 8004d44:	e043      	b.n	8004dce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d119      	bne.n	8004d80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6898      	ldr	r0, [r3, #8]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	461a      	mov	r2, r3
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	f001 ffce 	bl	8006cf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	441a      	add	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d32b      	bcc.n	8004dce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	609a      	str	r2, [r3, #8]
 8004d7e:	e026      	b.n	8004dce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68d8      	ldr	r0, [r3, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	f001 ffb4 	bl	8006cf8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	425b      	negs	r3, r3
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d207      	bcs.n	8004dbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	425b      	negs	r3, r3
 8004db6:	441a      	add	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d105      	bne.n	8004dce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dd6:	697b      	ldr	r3, [r7, #20]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	441a      	add	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d303      	bcc.n	8004e14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68d9      	ldr	r1, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6838      	ldr	r0, [r7, #0]
 8004e20:	f001 ff6a 	bl	8006cf8 <memcpy>
	}
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e34:	f001 fc3e 	bl	80066b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e40:	e011      	b.n	8004e66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d012      	beq.n	8004e70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3324      	adds	r3, #36	; 0x24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fd4c 	bl	80058ec <xTaskRemoveFromEventList>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e5a:	f000 fe23 	bl	8005aa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dce9      	bgt.n	8004e42 <prvUnlockQueue+0x16>
 8004e6e:	e000      	b.n	8004e72 <prvUnlockQueue+0x46>
					break;
 8004e70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	22ff      	movs	r2, #255	; 0xff
 8004e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e7a:	f001 fc4b 	bl	8006714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e7e:	f001 fc19 	bl	80066b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e8a:	e011      	b.n	8004eb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d012      	beq.n	8004eba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3310      	adds	r3, #16
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fd27 	bl	80058ec <xTaskRemoveFromEventList>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ea4:	f000 fdfe 	bl	8005aa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ea8:	7bbb      	ldrb	r3, [r7, #14]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	dce9      	bgt.n	8004e8c <prvUnlockQueue+0x60>
 8004eb8:	e000      	b.n	8004ebc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004eba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	22ff      	movs	r2, #255	; 0xff
 8004ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ec4:	f001 fc26 	bl	8006714 <vPortExitCritical>
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ed8:	f001 fbec 	bl	80066b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e001      	b.n	8004eee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eee:	f001 fc11 	bl	8006714 <vPortExitCritical>

	return xReturn;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f04:	f001 fbd6 	bl	80066b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d102      	bne.n	8004f1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f14:	2301      	movs	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e001      	b.n	8004f1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f1e:	f001 fbf9 	bl	8006714 <vPortExitCritical>

	return xReturn;
 8004f22:	68fb      	ldr	r3, [r7, #12]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e014      	b.n	8004f66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f3c:	4a0f      	ldr	r2, [pc, #60]	; (8004f7c <vQueueAddToRegistry+0x50>)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f48:	490c      	ldr	r1, [pc, #48]	; (8004f7c <vQueueAddToRegistry+0x50>)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f52:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <vQueueAddToRegistry+0x50>)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f5e:	e006      	b.n	8004f6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b07      	cmp	r3, #7
 8004f6a:	d9e7      	bls.n	8004f3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	2000097c 	.word	0x2000097c

08004f80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f90:	f001 fb90 	bl	80066b4 <vPortEnterCritical>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa0:	d103      	bne.n	8004faa <vQueueWaitForMessageRestricted+0x2a>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb6:	d103      	bne.n	8004fc0 <vQueueWaitForMessageRestricted+0x40>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc0:	f001 fba8 	bl	8006714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	3324      	adds	r3, #36	; 0x24
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fc5d 	bl	8005894 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff ff26 	bl	8004e2c <prvUnlockQueue>
	}
 8004fe0:	bf00      	nop
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08e      	sub	sp, #56	; 0x38
 8004fec:	af04      	add	r7, sp, #16
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	623b      	str	r3, [r7, #32]
}
 800500e:	bf00      	nop
 8005010:	e7fe      	b.n	8005010 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <xTaskCreateStatic+0x46>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	61fb      	str	r3, [r7, #28]
}
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800502e:	23bc      	movs	r3, #188	; 0xbc
 8005030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2bbc      	cmp	r3, #188	; 0xbc
 8005036:	d00a      	beq.n	800504e <xTaskCreateStatic+0x66>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	61bb      	str	r3, [r7, #24]
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01e      	beq.n	8005092 <xTaskCreateStatic+0xaa>
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01b      	beq.n	8005092 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005062:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	2202      	movs	r2, #2
 8005068:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800506c:	2300      	movs	r3, #0
 800506e:	9303      	str	r3, [sp, #12]
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	9302      	str	r3, [sp, #8]
 8005074:	f107 0314 	add.w	r3, r7, #20
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f851 	bl	800512c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800508a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800508c:	f000 f8ec 	bl	8005268 <prvAddNewTaskToReadyList>
 8005090:	e001      	b.n	8005096 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005096:	697b      	ldr	r3, [r7, #20]
	}
 8005098:	4618      	mov	r0, r3
 800509a:	3728      	adds	r7, #40	; 0x28
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08c      	sub	sp, #48	; 0x30
 80050a4:	af04      	add	r7, sp, #16
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b0:	88fb      	ldrh	r3, [r7, #6]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f001 fc1f 	bl	80068f8 <pvPortMalloc>
 80050ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00e      	beq.n	80050e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80050c2:	20bc      	movs	r0, #188	; 0xbc
 80050c4:	f001 fc18 	bl	80068f8 <pvPortMalloc>
 80050c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30
 80050d6:	e005      	b.n	80050e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050d8:	6978      	ldr	r0, [r7, #20]
 80050da:	f001 fcd1 	bl	8006a80 <vPortFree>
 80050de:	e001      	b.n	80050e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d017      	beq.n	800511a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	2300      	movs	r3, #0
 80050f6:	9303      	str	r3, [sp, #12]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	9302      	str	r3, [sp, #8]
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f80f 	bl	800512c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800510e:	69f8      	ldr	r0, [r7, #28]
 8005110:	f000 f8aa 	bl	8005268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005114:	2301      	movs	r3, #1
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	e002      	b.n	8005120 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800511a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800511e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005120:	69bb      	ldr	r3, [r7, #24]
	}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	461a      	mov	r2, r3
 8005144:	21a5      	movs	r1, #165	; 0xa5
 8005146:	f001 fde5 	bl	8006d14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005154:	3b01      	subs	r3, #1
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f023 0307 	bic.w	r3, r3, #7
 8005162:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <prvInitialiseNewTask+0x58>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	617b      	str	r3, [r7, #20]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005184:	2300      	movs	r3, #0
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	e012      	b.n	80051b0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	7819      	ldrb	r1, [r3, #0]
 8005192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	3334      	adds	r3, #52	; 0x34
 800519a:	460a      	mov	r2, r1
 800519c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b0f      	cmp	r3, #15
 80051b4:	d9e9      	bls.n	800518a <prvInitialiseNewTask+0x5e>
 80051b6:	e000      	b.n	80051ba <prvInitialiseNewTask+0x8e>
		{
			break;
 80051b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	2b37      	cmp	r3, #55	; 0x37
 80051c6:	d901      	bls.n	80051cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051c8:	2337      	movs	r3, #55	; 0x37
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	2200      	movs	r2, #0
 80051dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	3304      	adds	r3, #4
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff f986 	bl	80044f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	3318      	adds	r3, #24
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff f981 	bl	80044f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005206:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	2200      	movs	r2, #0
 800520c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	2200      	movs	r2, #0
 8005214:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	3354      	adds	r3, #84	; 0x54
 800521c:	2260      	movs	r2, #96	; 0x60
 800521e:	2100      	movs	r1, #0
 8005220:	4618      	mov	r0, r3
 8005222:	f001 fd77 	bl	8006d14 <memset>
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	4a0c      	ldr	r2, [pc, #48]	; (800525c <prvInitialiseNewTask+0x130>)
 800522a:	659a      	str	r2, [r3, #88]	; 0x58
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	4a0c      	ldr	r2, [pc, #48]	; (8005260 <prvInitialiseNewTask+0x134>)
 8005230:	65da      	str	r2, [r3, #92]	; 0x5c
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	4a0b      	ldr	r2, [pc, #44]	; (8005264 <prvInitialiseNewTask+0x138>)
 8005236:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	68f9      	ldr	r1, [r7, #12]
 800523c:	69b8      	ldr	r0, [r7, #24]
 800523e:	f001 f90f 	bl	8006460 <pxPortInitialiseStack>
 8005242:	4602      	mov	r2, r0
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005252:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005254:	bf00      	nop
 8005256:	3720      	adds	r7, #32
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	08006fe0 	.word	0x08006fe0
 8005260:	08007000 	.word	0x08007000
 8005264:	08006fc0 	.word	0x08006fc0

08005268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005270:	f001 fa20 	bl	80066b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005274:	4b2d      	ldr	r3, [pc, #180]	; (800532c <prvAddNewTaskToReadyList+0xc4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3301      	adds	r3, #1
 800527a:	4a2c      	ldr	r2, [pc, #176]	; (800532c <prvAddNewTaskToReadyList+0xc4>)
 800527c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800527e:	4b2c      	ldr	r3, [pc, #176]	; (8005330 <prvAddNewTaskToReadyList+0xc8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005286:	4a2a      	ldr	r2, [pc, #168]	; (8005330 <prvAddNewTaskToReadyList+0xc8>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800528c:	4b27      	ldr	r3, [pc, #156]	; (800532c <prvAddNewTaskToReadyList+0xc4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d110      	bne.n	80052b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005294:	f000 fc2a 	bl	8005aec <prvInitialiseTaskLists>
 8005298:	e00d      	b.n	80052b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800529a:	4b26      	ldr	r3, [pc, #152]	; (8005334 <prvAddNewTaskToReadyList+0xcc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052a2:	4b23      	ldr	r3, [pc, #140]	; (8005330 <prvAddNewTaskToReadyList+0xc8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d802      	bhi.n	80052b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052b0:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <prvAddNewTaskToReadyList+0xc8>)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052b6:	4b20      	ldr	r3, [pc, #128]	; (8005338 <prvAddNewTaskToReadyList+0xd0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3301      	adds	r3, #1
 80052bc:	4a1e      	ldr	r2, [pc, #120]	; (8005338 <prvAddNewTaskToReadyList+0xd0>)
 80052be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052c0:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <prvAddNewTaskToReadyList+0xd0>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	4b1b      	ldr	r3, [pc, #108]	; (800533c <prvAddNewTaskToReadyList+0xd4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d903      	bls.n	80052dc <prvAddNewTaskToReadyList+0x74>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	4a18      	ldr	r2, [pc, #96]	; (800533c <prvAddNewTaskToReadyList+0xd4>)
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a15      	ldr	r2, [pc, #84]	; (8005340 <prvAddNewTaskToReadyList+0xd8>)
 80052ea:	441a      	add	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f7ff f90b 	bl	800450e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052f8:	f001 fa0c 	bl	8006714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <prvAddNewTaskToReadyList+0xcc>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00e      	beq.n	8005322 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <prvAddNewTaskToReadyList+0xc8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	429a      	cmp	r2, r3
 8005310:	d207      	bcs.n	8005322 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005312:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <prvAddNewTaskToReadyList+0xdc>)
 8005314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000e90 	.word	0x20000e90
 8005330:	200009bc 	.word	0x200009bc
 8005334:	20000e9c 	.word	0x20000e9c
 8005338:	20000eac 	.word	0x20000eac
 800533c:	20000e98 	.word	0x20000e98
 8005340:	200009c0 	.word	0x200009c0
 8005344:	e000ed04 	.word	0xe000ed04

08005348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d017      	beq.n	800538a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800535a:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <vTaskDelay+0x60>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <vTaskDelay+0x30>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	60bb      	str	r3, [r7, #8]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005378:	f000 f88a 	bl	8005490 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800537c:	2100      	movs	r1, #0
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fd08 	bl	8005d94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005384:	f000 f892 	bl	80054ac <xTaskResumeAll>
 8005388:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d107      	bne.n	80053a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <vTaskDelay+0x64>)
 8005392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20000eb8 	.word	0x20000eb8
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08a      	sub	sp, #40	; 0x28
 80053b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053be:	463a      	mov	r2, r7
 80053c0:	1d39      	adds	r1, r7, #4
 80053c2:	f107 0308 	add.w	r3, r7, #8
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff f840 	bl	800444c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	9202      	str	r2, [sp, #8]
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	2300      	movs	r3, #0
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	460a      	mov	r2, r1
 80053de:	4924      	ldr	r1, [pc, #144]	; (8005470 <vTaskStartScheduler+0xc0>)
 80053e0:	4824      	ldr	r0, [pc, #144]	; (8005474 <vTaskStartScheduler+0xc4>)
 80053e2:	f7ff fe01 	bl	8004fe8 <xTaskCreateStatic>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4a23      	ldr	r2, [pc, #140]	; (8005478 <vTaskStartScheduler+0xc8>)
 80053ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053ec:	4b22      	ldr	r3, [pc, #136]	; (8005478 <vTaskStartScheduler+0xc8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053f4:	2301      	movs	r3, #1
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e001      	b.n	80053fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d102      	bne.n	800540a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005404:	f000 fd1a 	bl	8005e3c <xTimerCreateTimerTask>
 8005408:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d11b      	bne.n	8005448 <vTaskStartScheduler+0x98>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	613b      	str	r3, [r7, #16]
}
 8005422:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005424:	4b15      	ldr	r3, [pc, #84]	; (800547c <vTaskStartScheduler+0xcc>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3354      	adds	r3, #84	; 0x54
 800542a:	4a15      	ldr	r2, [pc, #84]	; (8005480 <vTaskStartScheduler+0xd0>)
 800542c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800542e:	4b15      	ldr	r3, [pc, #84]	; (8005484 <vTaskStartScheduler+0xd4>)
 8005430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005434:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005436:	4b14      	ldr	r3, [pc, #80]	; (8005488 <vTaskStartScheduler+0xd8>)
 8005438:	2201      	movs	r2, #1
 800543a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800543c:	4b13      	ldr	r3, [pc, #76]	; (800548c <vTaskStartScheduler+0xdc>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005442:	f001 f895 	bl	8006570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005446:	e00e      	b.n	8005466 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800544e:	d10a      	bne.n	8005466 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60fb      	str	r3, [r7, #12]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <vTaskStartScheduler+0xb4>
}
 8005466:	bf00      	nop
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	08006ef4 	.word	0x08006ef4
 8005474:	08005abd 	.word	0x08005abd
 8005478:	20000eb4 	.word	0x20000eb4
 800547c:	200009bc 	.word	0x200009bc
 8005480:	20000014 	.word	0x20000014
 8005484:	20000eb0 	.word	0x20000eb0
 8005488:	20000e9c 	.word	0x20000e9c
 800548c:	20000e94 	.word	0x20000e94

08005490 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005494:	4b04      	ldr	r3, [pc, #16]	; (80054a8 <vTaskSuspendAll+0x18>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3301      	adds	r3, #1
 800549a:	4a03      	ldr	r2, [pc, #12]	; (80054a8 <vTaskSuspendAll+0x18>)
 800549c:	6013      	str	r3, [r2, #0]
}
 800549e:	bf00      	nop
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	20000eb8 	.word	0x20000eb8

080054ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ba:	4b42      	ldr	r3, [pc, #264]	; (80055c4 <xTaskResumeAll+0x118>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	603b      	str	r3, [r7, #0]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054d8:	f001 f8ec 	bl	80066b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054dc:	4b39      	ldr	r3, [pc, #228]	; (80055c4 <xTaskResumeAll+0x118>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	4a38      	ldr	r2, [pc, #224]	; (80055c4 <xTaskResumeAll+0x118>)
 80054e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054e6:	4b37      	ldr	r3, [pc, #220]	; (80055c4 <xTaskResumeAll+0x118>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d162      	bne.n	80055b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054ee:	4b36      	ldr	r3, [pc, #216]	; (80055c8 <xTaskResumeAll+0x11c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d05e      	beq.n	80055b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054f6:	e02f      	b.n	8005558 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054f8:	4b34      	ldr	r3, [pc, #208]	; (80055cc <xTaskResumeAll+0x120>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3318      	adds	r3, #24
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff f85f 	bl	80045c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3304      	adds	r3, #4
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff f85a 	bl	80045c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005518:	4b2d      	ldr	r3, [pc, #180]	; (80055d0 <xTaskResumeAll+0x124>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d903      	bls.n	8005528 <xTaskResumeAll+0x7c>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	4a2a      	ldr	r2, [pc, #168]	; (80055d0 <xTaskResumeAll+0x124>)
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4a27      	ldr	r2, [pc, #156]	; (80055d4 <xTaskResumeAll+0x128>)
 8005536:	441a      	add	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3304      	adds	r3, #4
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f7fe ffe5 	bl	800450e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005548:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <xTaskResumeAll+0x12c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005552:	4b22      	ldr	r3, [pc, #136]	; (80055dc <xTaskResumeAll+0x130>)
 8005554:	2201      	movs	r2, #1
 8005556:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005558:	4b1c      	ldr	r3, [pc, #112]	; (80055cc <xTaskResumeAll+0x120>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1cb      	bne.n	80054f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005566:	f000 fb63 	bl	8005c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800556a:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <xTaskResumeAll+0x134>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d010      	beq.n	8005598 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005576:	f000 f847 	bl	8005608 <xTaskIncrementTick>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005580:	4b16      	ldr	r3, [pc, #88]	; (80055dc <xTaskResumeAll+0x130>)
 8005582:	2201      	movs	r2, #1
 8005584:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3b01      	subs	r3, #1
 800558a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f1      	bne.n	8005576 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005592:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <xTaskResumeAll+0x134>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005598:	4b10      	ldr	r3, [pc, #64]	; (80055dc <xTaskResumeAll+0x130>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d009      	beq.n	80055b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055a0:	2301      	movs	r3, #1
 80055a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055a4:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <xTaskResumeAll+0x138>)
 80055a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055b4:	f001 f8ae 	bl	8006714 <vPortExitCritical>

	return xAlreadyYielded;
 80055b8:	68bb      	ldr	r3, [r7, #8]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000eb8 	.word	0x20000eb8
 80055c8:	20000e90 	.word	0x20000e90
 80055cc:	20000e50 	.word	0x20000e50
 80055d0:	20000e98 	.word	0x20000e98
 80055d4:	200009c0 	.word	0x200009c0
 80055d8:	200009bc 	.word	0x200009bc
 80055dc:	20000ea4 	.word	0x20000ea4
 80055e0:	20000ea0 	.word	0x20000ea0
 80055e4:	e000ed04 	.word	0xe000ed04

080055e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055ee:	4b05      	ldr	r3, [pc, #20]	; (8005604 <xTaskGetTickCount+0x1c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055f4:	687b      	ldr	r3, [r7, #4]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000e94 	.word	0x20000e94

08005608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005612:	4b51      	ldr	r3, [pc, #324]	; (8005758 <xTaskIncrementTick+0x150>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 808e 	bne.w	8005738 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800561c:	4b4f      	ldr	r3, [pc, #316]	; (800575c <xTaskIncrementTick+0x154>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005624:	4a4d      	ldr	r2, [pc, #308]	; (800575c <xTaskIncrementTick+0x154>)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d120      	bne.n	8005672 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005630:	4b4b      	ldr	r3, [pc, #300]	; (8005760 <xTaskIncrementTick+0x158>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <xTaskIncrementTick+0x48>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	603b      	str	r3, [r7, #0]
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <xTaskIncrementTick+0x46>
 8005650:	4b43      	ldr	r3, [pc, #268]	; (8005760 <xTaskIncrementTick+0x158>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	4b43      	ldr	r3, [pc, #268]	; (8005764 <xTaskIncrementTick+0x15c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a41      	ldr	r2, [pc, #260]	; (8005760 <xTaskIncrementTick+0x158>)
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	4a41      	ldr	r2, [pc, #260]	; (8005764 <xTaskIncrementTick+0x15c>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	4b40      	ldr	r3, [pc, #256]	; (8005768 <xTaskIncrementTick+0x160>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	4a3f      	ldr	r2, [pc, #252]	; (8005768 <xTaskIncrementTick+0x160>)
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	f000 fadf 	bl	8005c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005672:	4b3e      	ldr	r3, [pc, #248]	; (800576c <xTaskIncrementTick+0x164>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	429a      	cmp	r2, r3
 800567a:	d34e      	bcc.n	800571a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800567c:	4b38      	ldr	r3, [pc, #224]	; (8005760 <xTaskIncrementTick+0x158>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <xTaskIncrementTick+0x82>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xTaskIncrementTick+0x84>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005690:	4b36      	ldr	r3, [pc, #216]	; (800576c <xTaskIncrementTick+0x164>)
 8005692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005696:	601a      	str	r2, [r3, #0]
					break;
 8005698:	e03f      	b.n	800571a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800569a:	4b31      	ldr	r3, [pc, #196]	; (8005760 <xTaskIncrementTick+0x158>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d203      	bcs.n	80056ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056b2:	4a2e      	ldr	r2, [pc, #184]	; (800576c <xTaskIncrementTick+0x164>)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6013      	str	r3, [r2, #0]
						break;
 80056b8:	e02f      	b.n	800571a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	3304      	adds	r3, #4
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe ff82 	bl	80045c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	3318      	adds	r3, #24
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fe ff79 	bl	80045c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056da:	4b25      	ldr	r3, [pc, #148]	; (8005770 <xTaskIncrementTick+0x168>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d903      	bls.n	80056ea <xTaskIncrementTick+0xe2>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	4a22      	ldr	r2, [pc, #136]	; (8005770 <xTaskIncrementTick+0x168>)
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4a1f      	ldr	r2, [pc, #124]	; (8005774 <xTaskIncrementTick+0x16c>)
 80056f8:	441a      	add	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f7fe ff04 	bl	800450e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <xTaskIncrementTick+0x170>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	429a      	cmp	r2, r3
 8005712:	d3b3      	bcc.n	800567c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005714:	2301      	movs	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005718:	e7b0      	b.n	800567c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800571a:	4b17      	ldr	r3, [pc, #92]	; (8005778 <xTaskIncrementTick+0x170>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4914      	ldr	r1, [pc, #80]	; (8005774 <xTaskIncrementTick+0x16c>)
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d907      	bls.n	8005742 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005732:	2301      	movs	r3, #1
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	e004      	b.n	8005742 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005738:	4b10      	ldr	r3, [pc, #64]	; (800577c <xTaskIncrementTick+0x174>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	4a0f      	ldr	r2, [pc, #60]	; (800577c <xTaskIncrementTick+0x174>)
 8005740:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005742:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <xTaskIncrementTick+0x178>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800574a:	2301      	movs	r3, #1
 800574c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800574e:	697b      	ldr	r3, [r7, #20]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000eb8 	.word	0x20000eb8
 800575c:	20000e94 	.word	0x20000e94
 8005760:	20000e48 	.word	0x20000e48
 8005764:	20000e4c 	.word	0x20000e4c
 8005768:	20000ea8 	.word	0x20000ea8
 800576c:	20000eb0 	.word	0x20000eb0
 8005770:	20000e98 	.word	0x20000e98
 8005774:	200009c0 	.word	0x200009c0
 8005778:	200009bc 	.word	0x200009bc
 800577c:	20000ea0 	.word	0x20000ea0
 8005780:	20000ea4 	.word	0x20000ea4

08005784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800578a:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <vTaskSwitchContext+0xb0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005792:	4b29      	ldr	r3, [pc, #164]	; (8005838 <vTaskSwitchContext+0xb4>)
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005798:	e046      	b.n	8005828 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800579a:	4b27      	ldr	r3, [pc, #156]	; (8005838 <vTaskSwitchContext+0xb4>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057a0:	4b26      	ldr	r3, [pc, #152]	; (800583c <vTaskSwitchContext+0xb8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e010      	b.n	80057ca <vTaskSwitchContext+0x46>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10a      	bne.n	80057c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	607b      	str	r3, [r7, #4]
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <vTaskSwitchContext+0x3e>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	491d      	ldr	r1, [pc, #116]	; (8005840 <vTaskSwitchContext+0xbc>)
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0e4      	beq.n	80057a8 <vTaskSwitchContext+0x24>
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4a15      	ldr	r2, [pc, #84]	; (8005840 <vTaskSwitchContext+0xbc>)
 80057ea:	4413      	add	r3, r2
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	605a      	str	r2, [r3, #4]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	3308      	adds	r3, #8
 8005800:	429a      	cmp	r2, r3
 8005802:	d104      	bne.n	800580e <vTaskSwitchContext+0x8a>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4a0b      	ldr	r2, [pc, #44]	; (8005844 <vTaskSwitchContext+0xc0>)
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	4a08      	ldr	r2, [pc, #32]	; (800583c <vTaskSwitchContext+0xb8>)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800581e:	4b09      	ldr	r3, [pc, #36]	; (8005844 <vTaskSwitchContext+0xc0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3354      	adds	r3, #84	; 0x54
 8005824:	4a08      	ldr	r2, [pc, #32]	; (8005848 <vTaskSwitchContext+0xc4>)
 8005826:	6013      	str	r3, [r2, #0]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	20000eb8 	.word	0x20000eb8
 8005838:	20000ea4 	.word	0x20000ea4
 800583c:	20000e98 	.word	0x20000e98
 8005840:	200009c0 	.word	0x200009c0
 8005844:	200009bc 	.word	0x200009bc
 8005848:	20000014 	.word	0x20000014

0800584c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	60fb      	str	r3, [r7, #12]
}
 800586e:	bf00      	nop
 8005870:	e7fe      	b.n	8005870 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005872:	4b07      	ldr	r3, [pc, #28]	; (8005890 <vTaskPlaceOnEventList+0x44>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3318      	adds	r3, #24
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fe fe6b 	bl	8004556 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005880:	2101      	movs	r1, #1
 8005882:	6838      	ldr	r0, [r7, #0]
 8005884:	f000 fa86 	bl	8005d94 <prvAddCurrentTaskToDelayedList>
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	200009bc 	.word	0x200009bc

08005894 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	617b      	str	r3, [r7, #20]
}
 80058b8:	bf00      	nop
 80058ba:	e7fe      	b.n	80058ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058bc:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3318      	adds	r3, #24
 80058c2:	4619      	mov	r1, r3
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7fe fe22 	bl	800450e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80058d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f000 fa5b 	bl	8005d94 <prvAddCurrentTaskToDelayedList>
	}
 80058de:	bf00      	nop
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	200009bc 	.word	0x200009bc

080058ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	60fb      	str	r3, [r7, #12]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	3318      	adds	r3, #24
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe fe53 	bl	80045c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005922:	4b1e      	ldr	r3, [pc, #120]	; (800599c <xTaskRemoveFromEventList+0xb0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d11d      	bne.n	8005966 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	3304      	adds	r3, #4
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fe4a 	bl	80045c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <xTaskRemoveFromEventList+0xb4>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d903      	bls.n	8005948 <xTaskRemoveFromEventList+0x5c>
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <xTaskRemoveFromEventList+0xb4>)
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <xTaskRemoveFromEventList+0xb8>)
 8005956:	441a      	add	r2, r3
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	4610      	mov	r0, r2
 8005960:	f7fe fdd5 	bl	800450e <vListInsertEnd>
 8005964:	e005      	b.n	8005972 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	3318      	adds	r3, #24
 800596a:	4619      	mov	r1, r3
 800596c:	480e      	ldr	r0, [pc, #56]	; (80059a8 <xTaskRemoveFromEventList+0xbc>)
 800596e:	f7fe fdce 	bl	800450e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <xTaskRemoveFromEventList+0xc0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	429a      	cmp	r2, r3
 800597e:	d905      	bls.n	800598c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005980:	2301      	movs	r3, #1
 8005982:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <xTaskRemoveFromEventList+0xc4>)
 8005986:	2201      	movs	r2, #1
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e001      	b.n	8005990 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005990:	697b      	ldr	r3, [r7, #20]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000eb8 	.word	0x20000eb8
 80059a0:	20000e98 	.word	0x20000e98
 80059a4:	200009c0 	.word	0x200009c0
 80059a8:	20000e50 	.word	0x20000e50
 80059ac:	200009bc 	.word	0x200009bc
 80059b0:	20000ea4 	.word	0x20000ea4

080059b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059bc:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <vTaskInternalSetTimeOutState+0x24>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059c4:	4b05      	ldr	r3, [pc, #20]	; (80059dc <vTaskInternalSetTimeOutState+0x28>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	605a      	str	r2, [r3, #4]
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	20000ea8 	.word	0x20000ea8
 80059dc:	20000e94 	.word	0x20000e94

080059e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	613b      	str	r3, [r7, #16]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	60fb      	str	r3, [r7, #12]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a22:	f000 fe47 	bl	80066b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <xTaskCheckForTimeOut+0xbc>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a3e:	d102      	bne.n	8005a46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	e023      	b.n	8005a8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <xTaskCheckForTimeOut+0xc0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d007      	beq.n	8005a62 <xTaskCheckForTimeOut+0x82>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d302      	bcc.n	8005a62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	e015      	b.n	8005a8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d20b      	bcs.n	8005a84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	1ad2      	subs	r2, r2, r3
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff ff9b 	bl	80059b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	e004      	b.n	8005a8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a8e:	f000 fe41 	bl	8006714 <vPortExitCritical>

	return xReturn;
 8005a92:	69fb      	ldr	r3, [r7, #28]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	20000e94 	.word	0x20000e94
 8005aa0:	20000ea8 	.word	0x20000ea8

08005aa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005aa8:	4b03      	ldr	r3, [pc, #12]	; (8005ab8 <vTaskMissedYield+0x14>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
}
 8005aae:	bf00      	nop
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	20000ea4 	.word	0x20000ea4

08005abc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ac4:	f000 f852 	bl	8005b6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ac8:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <prvIdleTask+0x28>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d9f9      	bls.n	8005ac4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ad0:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <prvIdleTask+0x2c>)
 8005ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ae0:	e7f0      	b.n	8005ac4 <prvIdleTask+0x8>
 8005ae2:	bf00      	nop
 8005ae4:	200009c0 	.word	0x200009c0
 8005ae8:	e000ed04 	.word	0xe000ed04

08005aec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005af2:	2300      	movs	r3, #0
 8005af4:	607b      	str	r3, [r7, #4]
 8005af6:	e00c      	b.n	8005b12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4a12      	ldr	r2, [pc, #72]	; (8005b4c <prvInitialiseTaskLists+0x60>)
 8005b04:	4413      	add	r3, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fe fcd4 	bl	80044b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	607b      	str	r3, [r7, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b37      	cmp	r3, #55	; 0x37
 8005b16:	d9ef      	bls.n	8005af8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b18:	480d      	ldr	r0, [pc, #52]	; (8005b50 <prvInitialiseTaskLists+0x64>)
 8005b1a:	f7fe fccb 	bl	80044b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b1e:	480d      	ldr	r0, [pc, #52]	; (8005b54 <prvInitialiseTaskLists+0x68>)
 8005b20:	f7fe fcc8 	bl	80044b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b24:	480c      	ldr	r0, [pc, #48]	; (8005b58 <prvInitialiseTaskLists+0x6c>)
 8005b26:	f7fe fcc5 	bl	80044b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b2a:	480c      	ldr	r0, [pc, #48]	; (8005b5c <prvInitialiseTaskLists+0x70>)
 8005b2c:	f7fe fcc2 	bl	80044b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b30:	480b      	ldr	r0, [pc, #44]	; (8005b60 <prvInitialiseTaskLists+0x74>)
 8005b32:	f7fe fcbf 	bl	80044b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b36:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <prvInitialiseTaskLists+0x78>)
 8005b38:	4a05      	ldr	r2, [pc, #20]	; (8005b50 <prvInitialiseTaskLists+0x64>)
 8005b3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <prvInitialiseTaskLists+0x7c>)
 8005b3e:	4a05      	ldr	r2, [pc, #20]	; (8005b54 <prvInitialiseTaskLists+0x68>)
 8005b40:	601a      	str	r2, [r3, #0]
}
 8005b42:	bf00      	nop
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	200009c0 	.word	0x200009c0
 8005b50:	20000e20 	.word	0x20000e20
 8005b54:	20000e34 	.word	0x20000e34
 8005b58:	20000e50 	.word	0x20000e50
 8005b5c:	20000e64 	.word	0x20000e64
 8005b60:	20000e7c 	.word	0x20000e7c
 8005b64:	20000e48 	.word	0x20000e48
 8005b68:	20000e4c 	.word	0x20000e4c

08005b6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b72:	e019      	b.n	8005ba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b74:	f000 fd9e 	bl	80066b4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b78:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <prvCheckTasksWaitingTermination+0x50>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3304      	adds	r3, #4
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fe fd1f 	bl	80045c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	; (8005bc0 <prvCheckTasksWaitingTermination+0x54>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	4a0b      	ldr	r2, [pc, #44]	; (8005bc0 <prvCheckTasksWaitingTermination+0x54>)
 8005b92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <prvCheckTasksWaitingTermination+0x58>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	4a0a      	ldr	r2, [pc, #40]	; (8005bc4 <prvCheckTasksWaitingTermination+0x58>)
 8005b9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b9e:	f000 fdb9 	bl	8006714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f810 	bl	8005bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <prvCheckTasksWaitingTermination+0x58>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e1      	bne.n	8005b74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000e64 	.word	0x20000e64
 8005bc0:	20000e90 	.word	0x20000e90
 8005bc4:	20000e78 	.word	0x20000e78

08005bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3354      	adds	r3, #84	; 0x54
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 f8b3 	bl	8006d40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d108      	bne.n	8005bf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 ff49 	bl	8006a80 <vPortFree>
				vPortFree( pxTCB );
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 ff46 	bl	8006a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bf4:	e018      	b.n	8005c28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d103      	bne.n	8005c08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 ff3d 	bl	8006a80 <vPortFree>
	}
 8005c06:	e00f      	b.n	8005c28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d00a      	beq.n	8005c28 <prvDeleteTCB+0x60>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	60fb      	str	r3, [r7, #12]
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <prvDeleteTCB+0x5e>
	}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c36:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <prvResetNextTaskUnblockTime+0x44>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <prvResetNextTaskUnblockTime+0x14>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <prvResetNextTaskUnblockTime+0x16>
 8005c44:	2300      	movs	r3, #0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d004      	beq.n	8005c54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <prvResetNextTaskUnblockTime+0x48>)
 8005c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c52:	e008      	b.n	8005c66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <prvResetNextTaskUnblockTime+0x44>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	4a05      	ldr	r2, [pc, #20]	; (8005c78 <prvResetNextTaskUnblockTime+0x48>)
 8005c64:	6013      	str	r3, [r2, #0]
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	20000e48 	.word	0x20000e48
 8005c78:	20000eb0 	.word	0x20000eb0

08005c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c82:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <xTaskGetSchedulerState+0x34>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	607b      	str	r3, [r7, #4]
 8005c8e:	e008      	b.n	8005ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <xTaskGetSchedulerState+0x38>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	607b      	str	r3, [r7, #4]
 8005c9c:	e001      	b.n	8005ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ca2:	687b      	ldr	r3, [r7, #4]
	}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20000e9c 	.word	0x20000e9c
 8005cb4:	20000eb8 	.word	0x20000eb8

08005cb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d056      	beq.n	8005d7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cce:	4b2e      	ldr	r3, [pc, #184]	; (8005d88 <xTaskPriorityDisinherit+0xd0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d00a      	beq.n	8005cee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	60fb      	str	r3, [r7, #12]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	60bb      	str	r3, [r7, #8]
}
 8005d08:	bf00      	nop
 8005d0a:	e7fe      	b.n	8005d0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d10:	1e5a      	subs	r2, r3, #1
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d02c      	beq.n	8005d7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d128      	bne.n	8005d7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe fc4a 	bl	80045c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4c:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <xTaskPriorityDisinherit+0xd4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d903      	bls.n	8005d5c <xTaskPriorityDisinherit+0xa4>
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	4a0c      	ldr	r2, [pc, #48]	; (8005d8c <xTaskPriorityDisinherit+0xd4>)
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <xTaskPriorityDisinherit+0xd8>)
 8005d6a:	441a      	add	r2, r3
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7fe fbcb 	bl	800450e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d7c:	697b      	ldr	r3, [r7, #20]
	}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	200009bc 	.word	0x200009bc
 8005d8c:	20000e98 	.word	0x20000e98
 8005d90:	200009c0 	.word	0x200009c0

08005d94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d9e:	4b21      	ldr	r3, [pc, #132]	; (8005e24 <prvAddCurrentTaskToDelayedList+0x90>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005da4:	4b20      	ldr	r3, [pc, #128]	; (8005e28 <prvAddCurrentTaskToDelayedList+0x94>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fe fc0c 	bl	80045c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db6:	d10a      	bne.n	8005dce <prvAddCurrentTaskToDelayedList+0x3a>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dbe:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4819      	ldr	r0, [pc, #100]	; (8005e2c <prvAddCurrentTaskToDelayedList+0x98>)
 8005dc8:	f7fe fba1 	bl	800450e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dcc:	e026      	b.n	8005e1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dd6:	4b14      	ldr	r3, [pc, #80]	; (8005e28 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d209      	bcs.n	8005dfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005de6:	4b12      	ldr	r3, [pc, #72]	; (8005e30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b0f      	ldr	r3, [pc, #60]	; (8005e28 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f7fe fbaf 	bl	8004556 <vListInsert>
}
 8005df8:	e010      	b.n	8005e1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dfa:	4b0e      	ldr	r3, [pc, #56]	; (8005e34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f7fe fba5 	bl	8004556 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d202      	bcs.n	8005e1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e16:	4a08      	ldr	r2, [pc, #32]	; (8005e38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	6013      	str	r3, [r2, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000e94 	.word	0x20000e94
 8005e28:	200009bc 	.word	0x200009bc
 8005e2c:	20000e7c 	.word	0x20000e7c
 8005e30:	20000e4c 	.word	0x20000e4c
 8005e34:	20000e48 	.word	0x20000e48
 8005e38:	20000eb0 	.word	0x20000eb0

08005e3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e46:	f000 facb 	bl	80063e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e4a:	4b1c      	ldr	r3, [pc, #112]	; (8005ebc <xTimerCreateTimerTask+0x80>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d021      	beq.n	8005e96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e5a:	1d3a      	adds	r2, r7, #4
 8005e5c:	f107 0108 	add.w	r1, r7, #8
 8005e60:	f107 030c 	add.w	r3, r7, #12
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe fb0b 	bl	8004480 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	9202      	str	r2, [sp, #8]
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	2302      	movs	r3, #2
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	460a      	mov	r2, r1
 8005e7c:	4910      	ldr	r1, [pc, #64]	; (8005ec0 <xTimerCreateTimerTask+0x84>)
 8005e7e:	4811      	ldr	r0, [pc, #68]	; (8005ec4 <xTimerCreateTimerTask+0x88>)
 8005e80:	f7ff f8b2 	bl	8004fe8 <xTaskCreateStatic>
 8005e84:	4603      	mov	r3, r0
 8005e86:	4a10      	ldr	r2, [pc, #64]	; (8005ec8 <xTimerCreateTimerTask+0x8c>)
 8005e88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <xTimerCreateTimerTask+0x8c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e92:	2301      	movs	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	613b      	str	r3, [r7, #16]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005eb2:	697b      	ldr	r3, [r7, #20]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000eec 	.word	0x20000eec
 8005ec0:	08006efc 	.word	0x08006efc
 8005ec4:	08005fe9 	.word	0x08005fe9
 8005ec8:	20000ef0 	.word	0x20000ef0

08005ecc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	; 0x28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	623b      	str	r3, [r7, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005efa:	4b1a      	ldr	r3, [pc, #104]	; (8005f64 <xTimerGenericCommand+0x98>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d02a      	beq.n	8005f58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b05      	cmp	r3, #5
 8005f12:	dc18      	bgt.n	8005f46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f14:	f7ff feb2 	bl	8005c7c <xTaskGetSchedulerState>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d109      	bne.n	8005f32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f1e:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <xTimerGenericCommand+0x98>)
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	f107 0110 	add.w	r1, r7, #16
 8005f26:	2300      	movs	r3, #0
 8005f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f2a:	f7fe fc79 	bl	8004820 <xQueueGenericSend>
 8005f2e:	6278      	str	r0, [r7, #36]	; 0x24
 8005f30:	e012      	b.n	8005f58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <xTimerGenericCommand+0x98>)
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	f107 0110 	add.w	r1, r7, #16
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f7fe fc6f 	bl	8004820 <xQueueGenericSend>
 8005f42:	6278      	str	r0, [r7, #36]	; 0x24
 8005f44:	e008      	b.n	8005f58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f46:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <xTimerGenericCommand+0x98>)
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	f107 0110 	add.w	r1, r7, #16
 8005f4e:	2300      	movs	r3, #0
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	f7fe fd63 	bl	8004a1c <xQueueGenericSendFromISR>
 8005f56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3728      	adds	r7, #40	; 0x28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000eec 	.word	0x20000eec

08005f68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f72:	4b1c      	ldr	r3, [pc, #112]	; (8005fe4 <prvProcessExpiredTimer+0x7c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe fb21 	bl	80045c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d122      	bne.n	8005fd4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	18d1      	adds	r1, r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	6978      	ldr	r0, [r7, #20]
 8005f9c:	f000 f8c8 	bl	8006130 <prvInsertTimerInActiveList>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	2300      	movs	r3, #0
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	6978      	ldr	r0, [r7, #20]
 8005fb2:	f7ff ff8b 	bl	8005ecc <xTimerGenericCommand>
 8005fb6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60fb      	str	r3, [r7, #12]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	6978      	ldr	r0, [r7, #20]
 8005fda:	4798      	blx	r3
}
 8005fdc:	bf00      	nop
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20000ee4 	.word	0x20000ee4

08005fe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ff0:	f107 0308 	add.w	r3, r7, #8
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 f857 	bl	80060a8 <prvGetNextExpireTime>
 8005ffa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4619      	mov	r1, r3
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f803 	bl	800600c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006006:	f000 f8d5 	bl	80061b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800600a:	e7f1      	b.n	8005ff0 <prvTimerTask+0x8>

0800600c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006016:	f7ff fa3b 	bl	8005490 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f866 	bl	80060f0 <prvSampleTimeNow>
 8006024:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d130      	bne.n	800608e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <prvProcessTimerOrBlockTask+0x3c>
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	429a      	cmp	r2, r3
 8006038:	d806      	bhi.n	8006048 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800603a:	f7ff fa37 	bl	80054ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800603e:	68f9      	ldr	r1, [r7, #12]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff ff91 	bl	8005f68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006046:	e024      	b.n	8006092 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800604e:	4b13      	ldr	r3, [pc, #76]	; (800609c <prvProcessTimerOrBlockTask+0x90>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	bf0c      	ite	eq
 8006058:	2301      	moveq	r3, #1
 800605a:	2300      	movne	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <prvProcessTimerOrBlockTask+0x94>)
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	4619      	mov	r1, r3
 800606e:	f7fe ff87 	bl	8004f80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006072:	f7ff fa1b 	bl	80054ac <xTaskResumeAll>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800607c:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <prvProcessTimerOrBlockTask+0x98>)
 800607e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	f3bf 8f6f 	isb	sy
}
 800608c:	e001      	b.n	8006092 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800608e:	f7ff fa0d 	bl	80054ac <xTaskResumeAll>
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000ee8 	.word	0x20000ee8
 80060a0:	20000eec 	.word	0x20000eec
 80060a4:	e000ed04 	.word	0xe000ed04

080060a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060b0:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <prvGetNextExpireTime+0x44>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bf0c      	ite	eq
 80060ba:	2301      	moveq	r3, #1
 80060bc:	2300      	movne	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d105      	bne.n	80060da <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060ce:	4b07      	ldr	r3, [pc, #28]	; (80060ec <prvGetNextExpireTime+0x44>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	e001      	b.n	80060de <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060de:	68fb      	ldr	r3, [r7, #12]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	20000ee4 	.word	0x20000ee4

080060f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060f8:	f7ff fa76 	bl	80055e8 <xTaskGetTickCount>
 80060fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060fe:	4b0b      	ldr	r3, [pc, #44]	; (800612c <prvSampleTimeNow+0x3c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	429a      	cmp	r2, r3
 8006106:	d205      	bcs.n	8006114 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006108:	f000 f908 	bl	800631c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e002      	b.n	800611a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800611a:	4a04      	ldr	r2, [pc, #16]	; (800612c <prvSampleTimeNow+0x3c>)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006120:	68fb      	ldr	r3, [r7, #12]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000ef4 	.word	0x20000ef4

08006130 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	d812      	bhi.n	800617c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	429a      	cmp	r2, r3
 8006162:	d302      	bcc.n	800616a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006164:	2301      	movs	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	e01b      	b.n	80061a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800616a:	4b10      	ldr	r3, [pc, #64]	; (80061ac <prvInsertTimerInActiveList+0x7c>)
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3304      	adds	r3, #4
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f7fe f9ee 	bl	8004556 <vListInsert>
 800617a:	e012      	b.n	80061a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d206      	bcs.n	8006192 <prvInsertTimerInActiveList+0x62>
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d302      	bcc.n	8006192 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800618c:	2301      	movs	r3, #1
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	e007      	b.n	80061a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006192:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <prvInsertTimerInActiveList+0x80>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3304      	adds	r3, #4
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f7fe f9da 	bl	8004556 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061a2:	697b      	ldr	r3, [r7, #20]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000ee8 	.word	0x20000ee8
 80061b0:	20000ee4 	.word	0x20000ee4

080061b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08e      	sub	sp, #56	; 0x38
 80061b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ba:	e09d      	b.n	80062f8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	da18      	bge.n	80061f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061c2:	1d3b      	adds	r3, r7, #4
 80061c4:	3304      	adds	r3, #4
 80061c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	61fb      	str	r3, [r7, #28]
}
 80061e0:	bf00      	nop
 80061e2:	e7fe      	b.n	80061e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061ea:	6850      	ldr	r0, [r2, #4]
 80061ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061ee:	6892      	ldr	r2, [r2, #8]
 80061f0:	4611      	mov	r1, r2
 80061f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	db7d      	blt.n	80062f6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d004      	beq.n	8006210 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	3304      	adds	r3, #4
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe f9dc 	bl	80045c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006210:	463b      	mov	r3, r7
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff ff6c 	bl	80060f0 <prvSampleTimeNow>
 8006218:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b09      	cmp	r3, #9
 800621e:	d86b      	bhi.n	80062f8 <prvProcessReceivedCommands+0x144>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <prvProcessReceivedCommands+0x74>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	08006251 	.word	0x08006251
 800622c:	08006251 	.word	0x08006251
 8006230:	08006251 	.word	0x08006251
 8006234:	080062f9 	.word	0x080062f9
 8006238:	080062ad 	.word	0x080062ad
 800623c:	080062e5 	.word	0x080062e5
 8006240:	08006251 	.word	0x08006251
 8006244:	08006251 	.word	0x08006251
 8006248:	080062f9 	.word	0x080062f9
 800624c:	080062ad 	.word	0x080062ad
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	18d1      	adds	r1, r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800625e:	f7ff ff67 	bl	8006130 <prvInsertTimerInActiveList>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d047      	beq.n	80062f8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800626e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d13f      	bne.n	80062f8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	441a      	add	r2, r3
 8006280:	2300      	movs	r3, #0
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	2300      	movs	r3, #0
 8006286:	2100      	movs	r1, #0
 8006288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800628a:	f7ff fe1f 	bl	8005ecc <xTimerGenericCommand>
 800628e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d130      	bne.n	80062f8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	61bb      	str	r3, [r7, #24]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	617b      	str	r3, [r7, #20]
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	18d1      	adds	r1, r2, r3
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062de:	f7ff ff27 	bl	8006130 <prvInsertTimerInActiveList>
					break;
 80062e2:	e009      	b.n	80062f8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80062ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f0:	f000 fbc6 	bl	8006a80 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062f4:	e000      	b.n	80062f8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80062f6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062f8:	4b07      	ldr	r3, [pc, #28]	; (8006318 <prvProcessReceivedCommands+0x164>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	1d39      	adds	r1, r7, #4
 80062fe:	2200      	movs	r2, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f7fe fc23 	bl	8004b4c <xQueueReceive>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	f47f af57 	bne.w	80061bc <prvProcessReceivedCommands+0x8>
	}
}
 800630e:	bf00      	nop
 8006310:	bf00      	nop
 8006312:	3730      	adds	r7, #48	; 0x30
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20000eec 	.word	0x20000eec

0800631c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006322:	e045      	b.n	80063b0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006324:	4b2c      	ldr	r3, [pc, #176]	; (80063d8 <prvSwitchTimerLists+0xbc>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800632e:	4b2a      	ldr	r3, [pc, #168]	; (80063d8 <prvSwitchTimerLists+0xbc>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3304      	adds	r3, #4
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe f943 	bl	80045c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d12e      	bne.n	80063b0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4413      	add	r3, r2
 800635a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	429a      	cmp	r2, r3
 8006362:	d90e      	bls.n	8006382 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006370:	4b19      	ldr	r3, [pc, #100]	; (80063d8 <prvSwitchTimerLists+0xbc>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3304      	adds	r3, #4
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f7fe f8eb 	bl	8004556 <vListInsert>
 8006380:	e016      	b.n	80063b0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006382:	2300      	movs	r3, #0
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	2300      	movs	r3, #0
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	2100      	movs	r1, #0
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7ff fd9d 	bl	8005ecc <xTimerGenericCommand>
 8006392:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10a      	bne.n	80063b0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	603b      	str	r3, [r7, #0]
}
 80063ac:	bf00      	nop
 80063ae:	e7fe      	b.n	80063ae <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <prvSwitchTimerLists+0xbc>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1b4      	bne.n	8006324 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063ba:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <prvSwitchTimerLists+0xbc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063c0:	4b06      	ldr	r3, [pc, #24]	; (80063dc <prvSwitchTimerLists+0xc0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a04      	ldr	r2, [pc, #16]	; (80063d8 <prvSwitchTimerLists+0xbc>)
 80063c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063c8:	4a04      	ldr	r2, [pc, #16]	; (80063dc <prvSwitchTimerLists+0xc0>)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	6013      	str	r3, [r2, #0]
}
 80063ce:	bf00      	nop
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000ee4 	.word	0x20000ee4
 80063dc:	20000ee8 	.word	0x20000ee8

080063e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063e6:	f000 f965 	bl	80066b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063ea:	4b15      	ldr	r3, [pc, #84]	; (8006440 <prvCheckForValidListAndQueue+0x60>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d120      	bne.n	8006434 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063f2:	4814      	ldr	r0, [pc, #80]	; (8006444 <prvCheckForValidListAndQueue+0x64>)
 80063f4:	f7fe f85e 	bl	80044b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063f8:	4813      	ldr	r0, [pc, #76]	; (8006448 <prvCheckForValidListAndQueue+0x68>)
 80063fa:	f7fe f85b 	bl	80044b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <prvCheckForValidListAndQueue+0x6c>)
 8006400:	4a10      	ldr	r2, [pc, #64]	; (8006444 <prvCheckForValidListAndQueue+0x64>)
 8006402:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006404:	4b12      	ldr	r3, [pc, #72]	; (8006450 <prvCheckForValidListAndQueue+0x70>)
 8006406:	4a10      	ldr	r2, [pc, #64]	; (8006448 <prvCheckForValidListAndQueue+0x68>)
 8006408:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800640a:	2300      	movs	r3, #0
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	4b11      	ldr	r3, [pc, #68]	; (8006454 <prvCheckForValidListAndQueue+0x74>)
 8006410:	4a11      	ldr	r2, [pc, #68]	; (8006458 <prvCheckForValidListAndQueue+0x78>)
 8006412:	2110      	movs	r1, #16
 8006414:	200a      	movs	r0, #10
 8006416:	f7fe f969 	bl	80046ec <xQueueGenericCreateStatic>
 800641a:	4603      	mov	r3, r0
 800641c:	4a08      	ldr	r2, [pc, #32]	; (8006440 <prvCheckForValidListAndQueue+0x60>)
 800641e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <prvCheckForValidListAndQueue+0x60>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006428:	4b05      	ldr	r3, [pc, #20]	; (8006440 <prvCheckForValidListAndQueue+0x60>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	490b      	ldr	r1, [pc, #44]	; (800645c <prvCheckForValidListAndQueue+0x7c>)
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fd7c 	bl	8004f2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006434:	f000 f96e 	bl	8006714 <vPortExitCritical>
}
 8006438:	bf00      	nop
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000eec 	.word	0x20000eec
 8006444:	20000ebc 	.word	0x20000ebc
 8006448:	20000ed0 	.word	0x20000ed0
 800644c:	20000ee4 	.word	0x20000ee4
 8006450:	20000ee8 	.word	0x20000ee8
 8006454:	20000f98 	.word	0x20000f98
 8006458:	20000ef8 	.word	0x20000ef8
 800645c:	08006f04 	.word	0x08006f04

08006460 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3b04      	subs	r3, #4
 8006470:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006478:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3b04      	subs	r3, #4
 800647e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f023 0201 	bic.w	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3b04      	subs	r3, #4
 800648e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006490:	4a0c      	ldr	r2, [pc, #48]	; (80064c4 <pxPortInitialiseStack+0x64>)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3b14      	subs	r3, #20
 800649a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3b04      	subs	r3, #4
 80064a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f06f 0202 	mvn.w	r2, #2
 80064ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3b20      	subs	r3, #32
 80064b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064b6:	68fb      	ldr	r3, [r7, #12]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	080064c9 	.word	0x080064c9

080064c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064d2:	4b12      	ldr	r3, [pc, #72]	; (800651c <prvTaskExitError+0x54>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064da:	d00a      	beq.n	80064f2 <prvTaskExitError+0x2a>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	60fb      	str	r3, [r7, #12]
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <prvTaskExitError+0x28>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	60bb      	str	r3, [r7, #8]
}
 8006504:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006506:	bf00      	nop
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0fc      	beq.n	8006508 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800650e:	bf00      	nop
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	20000010 	.word	0x20000010

08006520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006520:	4b07      	ldr	r3, [pc, #28]	; (8006540 <pxCurrentTCBConst2>)
 8006522:	6819      	ldr	r1, [r3, #0]
 8006524:	6808      	ldr	r0, [r1, #0]
 8006526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	f380 8809 	msr	PSP, r0
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f380 8811 	msr	BASEPRI, r0
 800653a:	4770      	bx	lr
 800653c:	f3af 8000 	nop.w

08006540 <pxCurrentTCBConst2>:
 8006540:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop

08006548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006548:	4808      	ldr	r0, [pc, #32]	; (800656c <prvPortStartFirstTask+0x24>)
 800654a:	6800      	ldr	r0, [r0, #0]
 800654c:	6800      	ldr	r0, [r0, #0]
 800654e:	f380 8808 	msr	MSP, r0
 8006552:	f04f 0000 	mov.w	r0, #0
 8006556:	f380 8814 	msr	CONTROL, r0
 800655a:	b662      	cpsie	i
 800655c:	b661      	cpsie	f
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	df00      	svc	0
 8006568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800656a:	bf00      	nop
 800656c:	e000ed08 	.word	0xe000ed08

08006570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006576:	4b46      	ldr	r3, [pc, #280]	; (8006690 <xPortStartScheduler+0x120>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a46      	ldr	r2, [pc, #280]	; (8006694 <xPortStartScheduler+0x124>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d10a      	bne.n	8006596 <xPortStartScheduler+0x26>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	613b      	str	r3, [r7, #16]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006596:	4b3e      	ldr	r3, [pc, #248]	; (8006690 <xPortStartScheduler+0x120>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a3f      	ldr	r2, [pc, #252]	; (8006698 <xPortStartScheduler+0x128>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10a      	bne.n	80065b6 <xPortStartScheduler+0x46>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	60fb      	str	r3, [r7, #12]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065b6:	4b39      	ldr	r3, [pc, #228]	; (800669c <xPortStartScheduler+0x12c>)
 80065b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	22ff      	movs	r2, #255	; 0xff
 80065c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	4b31      	ldr	r3, [pc, #196]	; (80066a0 <xPortStartScheduler+0x130>)
 80065dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065de:	4b31      	ldr	r3, [pc, #196]	; (80066a4 <xPortStartScheduler+0x134>)
 80065e0:	2207      	movs	r2, #7
 80065e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065e4:	e009      	b.n	80065fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065e6:	4b2f      	ldr	r3, [pc, #188]	; (80066a4 <xPortStartScheduler+0x134>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	4a2d      	ldr	r2, [pc, #180]	; (80066a4 <xPortStartScheduler+0x134>)
 80065ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006602:	2b80      	cmp	r3, #128	; 0x80
 8006604:	d0ef      	beq.n	80065e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006606:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <xPortStartScheduler+0x134>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f1c3 0307 	rsb	r3, r3, #7
 800660e:	2b04      	cmp	r3, #4
 8006610:	d00a      	beq.n	8006628 <xPortStartScheduler+0xb8>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	60bb      	str	r3, [r7, #8]
}
 8006624:	bf00      	nop
 8006626:	e7fe      	b.n	8006626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006628:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <xPortStartScheduler+0x134>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <xPortStartScheduler+0x134>)
 8006630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <xPortStartScheduler+0x134>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800663a:	4a1a      	ldr	r2, [pc, #104]	; (80066a4 <xPortStartScheduler+0x134>)
 800663c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	b2da      	uxtb	r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006646:	4b18      	ldr	r3, [pc, #96]	; (80066a8 <xPortStartScheduler+0x138>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <xPortStartScheduler+0x138>)
 800664c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006652:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <xPortStartScheduler+0x138>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a14      	ldr	r2, [pc, #80]	; (80066a8 <xPortStartScheduler+0x138>)
 8006658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800665c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800665e:	f000 f8dd 	bl	800681c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <xPortStartScheduler+0x13c>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006668:	f000 f8fc 	bl	8006864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800666c:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <xPortStartScheduler+0x140>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a0f      	ldr	r2, [pc, #60]	; (80066b0 <xPortStartScheduler+0x140>)
 8006672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006678:	f7ff ff66 	bl	8006548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800667c:	f7ff f882 	bl	8005784 <vTaskSwitchContext>
	prvTaskExitError();
 8006680:	f7ff ff22 	bl	80064c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	e000ed00 	.word	0xe000ed00
 8006694:	410fc271 	.word	0x410fc271
 8006698:	410fc270 	.word	0x410fc270
 800669c:	e000e400 	.word	0xe000e400
 80066a0:	20000fe8 	.word	0x20000fe8
 80066a4:	20000fec 	.word	0x20000fec
 80066a8:	e000ed20 	.word	0xe000ed20
 80066ac:	20000010 	.word	0x20000010
 80066b0:	e000ef34 	.word	0xe000ef34

080066b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	607b      	str	r3, [r7, #4]
}
 80066cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066ce:	4b0f      	ldr	r3, [pc, #60]	; (800670c <vPortEnterCritical+0x58>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3301      	adds	r3, #1
 80066d4:	4a0d      	ldr	r2, [pc, #52]	; (800670c <vPortEnterCritical+0x58>)
 80066d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <vPortEnterCritical+0x58>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d10f      	bne.n	8006700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <vPortEnterCritical+0x5c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <vPortEnterCritical+0x4c>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	603b      	str	r3, [r7, #0]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <vPortEnterCritical+0x4a>
	}
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000010 	.word	0x20000010
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800671a:	4b12      	ldr	r3, [pc, #72]	; (8006764 <vPortExitCritical+0x50>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <vPortExitCritical+0x24>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	607b      	str	r3, [r7, #4]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <vPortExitCritical+0x50>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3b01      	subs	r3, #1
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <vPortExitCritical+0x50>)
 8006740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006742:	4b08      	ldr	r3, [pc, #32]	; (8006764 <vPortExitCritical+0x50>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d105      	bne.n	8006756 <vPortExitCritical+0x42>
 800674a:	2300      	movs	r3, #0
 800674c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	f383 8811 	msr	BASEPRI, r3
}
 8006754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000010 	.word	0x20000010
	...

08006770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006770:	f3ef 8009 	mrs	r0, PSP
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <pxCurrentTCBConst>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	f01e 0f10 	tst.w	lr, #16
 8006780:	bf08      	it	eq
 8006782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678a:	6010      	str	r0, [r2, #0]
 800678c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006794:	f380 8811 	msr	BASEPRI, r0
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f7fe fff0 	bl	8005784 <vTaskSwitchContext>
 80067a4:	f04f 0000 	mov.w	r0, #0
 80067a8:	f380 8811 	msr	BASEPRI, r0
 80067ac:	bc09      	pop	{r0, r3}
 80067ae:	6819      	ldr	r1, [r3, #0]
 80067b0:	6808      	ldr	r0, [r1, #0]
 80067b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b6:	f01e 0f10 	tst.w	lr, #16
 80067ba:	bf08      	it	eq
 80067bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067c0:	f380 8809 	msr	PSP, r0
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	f3af 8000 	nop.w

080067d0 <pxCurrentTCBConst>:
 80067d0:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop

080067d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
}
 80067f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067f2:	f7fe ff09 	bl	8005608 <xTaskIncrementTick>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067fc:	4b06      	ldr	r3, [pc, #24]	; (8006818 <SysTick_Handler+0x40>)
 80067fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	2300      	movs	r3, #0
 8006806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f383 8811 	msr	BASEPRI, r3
}
 800680e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <vPortSetupTimerInterrupt+0x34>)
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006826:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <vPortSetupTimerInterrupt+0x38>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800682c:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <vPortSetupTimerInterrupt+0x3c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a0a      	ldr	r2, [pc, #40]	; (800685c <vPortSetupTimerInterrupt+0x40>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	099b      	lsrs	r3, r3, #6
 8006838:	4a09      	ldr	r2, [pc, #36]	; (8006860 <vPortSetupTimerInterrupt+0x44>)
 800683a:	3b01      	subs	r3, #1
 800683c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800683e:	4b04      	ldr	r3, [pc, #16]	; (8006850 <vPortSetupTimerInterrupt+0x34>)
 8006840:	2207      	movs	r2, #7
 8006842:	601a      	str	r2, [r3, #0]
}
 8006844:	bf00      	nop
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	e000e010 	.word	0xe000e010
 8006854:	e000e018 	.word	0xe000e018
 8006858:	20000004 	.word	0x20000004
 800685c:	10624dd3 	.word	0x10624dd3
 8006860:	e000e014 	.word	0xe000e014

08006864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006874 <vPortEnableVFP+0x10>
 8006868:	6801      	ldr	r1, [r0, #0]
 800686a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800686e:	6001      	str	r1, [r0, #0]
 8006870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006872:	bf00      	nop
 8006874:	e000ed88 	.word	0xe000ed88

08006878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800687e:	f3ef 8305 	mrs	r3, IPSR
 8006882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b0f      	cmp	r3, #15
 8006888:	d914      	bls.n	80068b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800688a:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <vPortValidateInterruptPriority+0x70>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006894:	4b15      	ldr	r3, [pc, #84]	; (80068ec <vPortValidateInterruptPriority+0x74>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	7afa      	ldrb	r2, [r7, #11]
 800689a:	429a      	cmp	r2, r3
 800689c:	d20a      	bcs.n	80068b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	607b      	str	r3, [r7, #4]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068b4:	4b0e      	ldr	r3, [pc, #56]	; (80068f0 <vPortValidateInterruptPriority+0x78>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068bc:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <vPortValidateInterruptPriority+0x7c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d90a      	bls.n	80068da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	603b      	str	r3, [r7, #0]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <vPortValidateInterruptPriority+0x60>
	}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	e000e3f0 	.word	0xe000e3f0
 80068ec:	20000fe8 	.word	0x20000fe8
 80068f0:	e000ed0c 	.word	0xe000ed0c
 80068f4:	20000fec 	.word	0x20000fec

080068f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006904:	f7fe fdc4 	bl	8005490 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006908:	4b58      	ldr	r3, [pc, #352]	; (8006a6c <pvPortMalloc+0x174>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006910:	f000 f910 	bl	8006b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006914:	4b56      	ldr	r3, [pc, #344]	; (8006a70 <pvPortMalloc+0x178>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	f040 808e 	bne.w	8006a3e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01d      	beq.n	8006964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006928:	2208      	movs	r2, #8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	2b00      	cmp	r3, #0
 8006938:	d014      	beq.n	8006964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f023 0307 	bic.w	r3, r3, #7
 8006940:	3308      	adds	r3, #8
 8006942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <pvPortMalloc+0x6c>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	617b      	str	r3, [r7, #20]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d069      	beq.n	8006a3e <pvPortMalloc+0x146>
 800696a:	4b42      	ldr	r3, [pc, #264]	; (8006a74 <pvPortMalloc+0x17c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d864      	bhi.n	8006a3e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006974:	4b40      	ldr	r3, [pc, #256]	; (8006a78 <pvPortMalloc+0x180>)
 8006976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006978:	4b3f      	ldr	r3, [pc, #252]	; (8006a78 <pvPortMalloc+0x180>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800697e:	e004      	b.n	800698a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d903      	bls.n	800699c <pvPortMalloc+0xa4>
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1f1      	bne.n	8006980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800699c:	4b33      	ldr	r3, [pc, #204]	; (8006a6c <pvPortMalloc+0x174>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d04b      	beq.n	8006a3e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2208      	movs	r2, #8
 80069ac:	4413      	add	r3, r2
 80069ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	2308      	movs	r3, #8
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d91f      	bls.n	8006a08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <pvPortMalloc+0xf8>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	613b      	str	r3, [r7, #16]
}
 80069ec:	bf00      	nop
 80069ee:	e7fe      	b.n	80069ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a02:	69b8      	ldr	r0, [r7, #24]
 8006a04:	f000 f8f8 	bl	8006bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <pvPortMalloc+0x17c>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	4a18      	ldr	r2, [pc, #96]	; (8006a74 <pvPortMalloc+0x17c>)
 8006a14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a16:	4b17      	ldr	r3, [pc, #92]	; (8006a74 <pvPortMalloc+0x17c>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b18      	ldr	r3, [pc, #96]	; (8006a7c <pvPortMalloc+0x184>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d203      	bcs.n	8006a2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a22:	4b14      	ldr	r3, [pc, #80]	; (8006a74 <pvPortMalloc+0x17c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <pvPortMalloc+0x184>)
 8006a28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <pvPortMalloc+0x178>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	431a      	orrs	r2, r3
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a3e:	f7fe fd35 	bl	80054ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <pvPortMalloc+0x16a>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	60fb      	str	r3, [r7, #12]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <pvPortMalloc+0x168>
	return pvReturn;
 8006a62:	69fb      	ldr	r3, [r7, #28]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3728      	adds	r7, #40	; 0x28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20001bf8 	.word	0x20001bf8
 8006a70:	20001c04 	.word	0x20001c04
 8006a74:	20001bfc 	.word	0x20001bfc
 8006a78:	20001bf0 	.word	0x20001bf0
 8006a7c:	20001c00 	.word	0x20001c00

08006a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d048      	beq.n	8006b24 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a92:	2308      	movs	r3, #8
 8006a94:	425b      	negs	r3, r3
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	4b21      	ldr	r3, [pc, #132]	; (8006b2c <vPortFree+0xac>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <vPortFree+0x44>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	60fb      	str	r3, [r7, #12]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00a      	beq.n	8006ae2 <vPortFree+0x62>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60bb      	str	r3, [r7, #8]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	4b11      	ldr	r3, [pc, #68]	; (8006b2c <vPortFree+0xac>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d019      	beq.n	8006b24 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d115      	bne.n	8006b24 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <vPortFree+0xac>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	43db      	mvns	r3, r3
 8006b02:	401a      	ands	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b08:	f7fe fcc2 	bl	8005490 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <vPortFree+0xb0>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4413      	add	r3, r2
 8006b16:	4a06      	ldr	r2, [pc, #24]	; (8006b30 <vPortFree+0xb0>)
 8006b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b1a:	6938      	ldr	r0, [r7, #16]
 8006b1c:	f000 f86c 	bl	8006bf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b20:	f7fe fcc4 	bl	80054ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b24:	bf00      	nop
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20001c04 	.word	0x20001c04
 8006b30:	20001bfc 	.word	0x20001bfc

08006b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b40:	4b27      	ldr	r3, [pc, #156]	; (8006be0 <prvHeapInit+0xac>)
 8006b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00c      	beq.n	8006b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3307      	adds	r3, #7
 8006b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0307 	bic.w	r3, r3, #7
 8006b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	4a1f      	ldr	r2, [pc, #124]	; (8006be0 <prvHeapInit+0xac>)
 8006b64:	4413      	add	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b6c:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <prvHeapInit+0xb0>)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b72:	4b1c      	ldr	r3, [pc, #112]	; (8006be4 <prvHeapInit+0xb0>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b80:	2208      	movs	r2, #8
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0307 	bic.w	r3, r3, #7
 8006b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <prvHeapInit+0xb4>)
 8006b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <prvHeapInit+0xb4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b9e:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <prvHeapInit+0xb4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <prvHeapInit+0xb4>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <prvHeapInit+0xb8>)
 8006bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <prvHeapInit+0xbc>)
 8006bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <prvHeapInit+0xc0>)
 8006bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bd2:	601a      	str	r2, [r3, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	20000ff0 	.word	0x20000ff0
 8006be4:	20001bf0 	.word	0x20001bf0
 8006be8:	20001bf8 	.word	0x20001bf8
 8006bec:	20001c00 	.word	0x20001c00
 8006bf0:	20001bfc 	.word	0x20001bfc
 8006bf4:	20001c04 	.word	0x20001c04

08006bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c00:	4b28      	ldr	r3, [pc, #160]	; (8006ca4 <prvInsertBlockIntoFreeList+0xac>)
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e002      	b.n	8006c0c <prvInsertBlockIntoFreeList+0x14>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d8f7      	bhi.n	8006c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4413      	add	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d108      	bne.n	8006c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	441a      	add	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	441a      	add	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d118      	bne.n	8006c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d00d      	beq.n	8006c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e008      	b.n	8006c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c76:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e003      	b.n	8006c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d002      	beq.n	8006c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20001bf0 	.word	0x20001bf0
 8006ca8:	20001bf8 	.word	0x20001bf8

08006cac <__libc_init_array>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	4d0d      	ldr	r5, [pc, #52]	; (8006ce4 <__libc_init_array+0x38>)
 8006cb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ce8 <__libc_init_array+0x3c>)
 8006cb2:	1b64      	subs	r4, r4, r5
 8006cb4:	10a4      	asrs	r4, r4, #2
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	42a6      	cmp	r6, r4
 8006cba:	d109      	bne.n	8006cd0 <__libc_init_array+0x24>
 8006cbc:	4d0b      	ldr	r5, [pc, #44]	; (8006cec <__libc_init_array+0x40>)
 8006cbe:	4c0c      	ldr	r4, [pc, #48]	; (8006cf0 <__libc_init_array+0x44>)
 8006cc0:	f000 f8f2 	bl	8006ea8 <_init>
 8006cc4:	1b64      	subs	r4, r4, r5
 8006cc6:	10a4      	asrs	r4, r4, #2
 8006cc8:	2600      	movs	r6, #0
 8006cca:	42a6      	cmp	r6, r4
 8006ccc:	d105      	bne.n	8006cda <__libc_init_array+0x2e>
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd4:	4798      	blx	r3
 8006cd6:	3601      	adds	r6, #1
 8006cd8:	e7ee      	b.n	8006cb8 <__libc_init_array+0xc>
 8006cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cde:	4798      	blx	r3
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	e7f2      	b.n	8006cca <__libc_init_array+0x1e>
 8006ce4:	08007020 	.word	0x08007020
 8006ce8:	08007020 	.word	0x08007020
 8006cec:	08007020 	.word	0x08007020
 8006cf0:	08007024 	.word	0x08007024

08006cf4 <__retarget_lock_acquire_recursive>:
 8006cf4:	4770      	bx	lr

08006cf6 <__retarget_lock_release_recursive>:
 8006cf6:	4770      	bx	lr

08006cf8 <memcpy>:
 8006cf8:	440a      	add	r2, r1
 8006cfa:	4291      	cmp	r1, r2
 8006cfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d00:	d100      	bne.n	8006d04 <memcpy+0xc>
 8006d02:	4770      	bx	lr
 8006d04:	b510      	push	{r4, lr}
 8006d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d0e:	4291      	cmp	r1, r2
 8006d10:	d1f9      	bne.n	8006d06 <memcpy+0xe>
 8006d12:	bd10      	pop	{r4, pc}

08006d14 <memset>:
 8006d14:	4402      	add	r2, r0
 8006d16:	4603      	mov	r3, r0
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d100      	bne.n	8006d1e <memset+0xa>
 8006d1c:	4770      	bx	lr
 8006d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d22:	e7f9      	b.n	8006d18 <memset+0x4>

08006d24 <cleanup_glue>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	460c      	mov	r4, r1
 8006d28:	6809      	ldr	r1, [r1, #0]
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	b109      	cbz	r1, 8006d32 <cleanup_glue+0xe>
 8006d2e:	f7ff fff9 	bl	8006d24 <cleanup_glue>
 8006d32:	4621      	mov	r1, r4
 8006d34:	4628      	mov	r0, r5
 8006d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d3a:	f000 b869 	b.w	8006e10 <_free_r>
	...

08006d40 <_reclaim_reent>:
 8006d40:	4b2c      	ldr	r3, [pc, #176]	; (8006df4 <_reclaim_reent+0xb4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4283      	cmp	r3, r0
 8006d46:	b570      	push	{r4, r5, r6, lr}
 8006d48:	4604      	mov	r4, r0
 8006d4a:	d051      	beq.n	8006df0 <_reclaim_reent+0xb0>
 8006d4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006d4e:	b143      	cbz	r3, 8006d62 <_reclaim_reent+0x22>
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d14a      	bne.n	8006dec <_reclaim_reent+0xac>
 8006d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d58:	6819      	ldr	r1, [r3, #0]
 8006d5a:	b111      	cbz	r1, 8006d62 <_reclaim_reent+0x22>
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 f857 	bl	8006e10 <_free_r>
 8006d62:	6961      	ldr	r1, [r4, #20]
 8006d64:	b111      	cbz	r1, 8006d6c <_reclaim_reent+0x2c>
 8006d66:	4620      	mov	r0, r4
 8006d68:	f000 f852 	bl	8006e10 <_free_r>
 8006d6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d6e:	b111      	cbz	r1, 8006d76 <_reclaim_reent+0x36>
 8006d70:	4620      	mov	r0, r4
 8006d72:	f000 f84d 	bl	8006e10 <_free_r>
 8006d76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d78:	b111      	cbz	r1, 8006d80 <_reclaim_reent+0x40>
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 f848 	bl	8006e10 <_free_r>
 8006d80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006d82:	b111      	cbz	r1, 8006d8a <_reclaim_reent+0x4a>
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 f843 	bl	8006e10 <_free_r>
 8006d8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006d8c:	b111      	cbz	r1, 8006d94 <_reclaim_reent+0x54>
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f000 f83e 	bl	8006e10 <_free_r>
 8006d94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006d96:	b111      	cbz	r1, 8006d9e <_reclaim_reent+0x5e>
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 f839 	bl	8006e10 <_free_r>
 8006d9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006da0:	b111      	cbz	r1, 8006da8 <_reclaim_reent+0x68>
 8006da2:	4620      	mov	r0, r4
 8006da4:	f000 f834 	bl	8006e10 <_free_r>
 8006da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006daa:	b111      	cbz	r1, 8006db2 <_reclaim_reent+0x72>
 8006dac:	4620      	mov	r0, r4
 8006dae:	f000 f82f 	bl	8006e10 <_free_r>
 8006db2:	69a3      	ldr	r3, [r4, #24]
 8006db4:	b1e3      	cbz	r3, 8006df0 <_reclaim_reent+0xb0>
 8006db6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006db8:	4620      	mov	r0, r4
 8006dba:	4798      	blx	r3
 8006dbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006dbe:	b1b9      	cbz	r1, 8006df0 <_reclaim_reent+0xb0>
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dc6:	f7ff bfad 	b.w	8006d24 <cleanup_glue>
 8006dca:	5949      	ldr	r1, [r1, r5]
 8006dcc:	b941      	cbnz	r1, 8006de0 <_reclaim_reent+0xa0>
 8006dce:	3504      	adds	r5, #4
 8006dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dd2:	2d80      	cmp	r5, #128	; 0x80
 8006dd4:	68d9      	ldr	r1, [r3, #12]
 8006dd6:	d1f8      	bne.n	8006dca <_reclaim_reent+0x8a>
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 f819 	bl	8006e10 <_free_r>
 8006dde:	e7ba      	b.n	8006d56 <_reclaim_reent+0x16>
 8006de0:	680e      	ldr	r6, [r1, #0]
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 f814 	bl	8006e10 <_free_r>
 8006de8:	4631      	mov	r1, r6
 8006dea:	e7ef      	b.n	8006dcc <_reclaim_reent+0x8c>
 8006dec:	2500      	movs	r5, #0
 8006dee:	e7ef      	b.n	8006dd0 <_reclaim_reent+0x90>
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
 8006df2:	bf00      	nop
 8006df4:	20000014 	.word	0x20000014

08006df8 <__malloc_lock>:
 8006df8:	4801      	ldr	r0, [pc, #4]	; (8006e00 <__malloc_lock+0x8>)
 8006dfa:	f7ff bf7b 	b.w	8006cf4 <__retarget_lock_acquire_recursive>
 8006dfe:	bf00      	nop
 8006e00:	20001c08 	.word	0x20001c08

08006e04 <__malloc_unlock>:
 8006e04:	4801      	ldr	r0, [pc, #4]	; (8006e0c <__malloc_unlock+0x8>)
 8006e06:	f7ff bf76 	b.w	8006cf6 <__retarget_lock_release_recursive>
 8006e0a:	bf00      	nop
 8006e0c:	20001c08 	.word	0x20001c08

08006e10 <_free_r>:
 8006e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e12:	2900      	cmp	r1, #0
 8006e14:	d044      	beq.n	8006ea0 <_free_r+0x90>
 8006e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e1a:	9001      	str	r0, [sp, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e22:	bfb8      	it	lt
 8006e24:	18e4      	addlt	r4, r4, r3
 8006e26:	f7ff ffe7 	bl	8006df8 <__malloc_lock>
 8006e2a:	4a1e      	ldr	r2, [pc, #120]	; (8006ea4 <_free_r+0x94>)
 8006e2c:	9801      	ldr	r0, [sp, #4]
 8006e2e:	6813      	ldr	r3, [r2, #0]
 8006e30:	b933      	cbnz	r3, 8006e40 <_free_r+0x30>
 8006e32:	6063      	str	r3, [r4, #4]
 8006e34:	6014      	str	r4, [r2, #0]
 8006e36:	b003      	add	sp, #12
 8006e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e3c:	f7ff bfe2 	b.w	8006e04 <__malloc_unlock>
 8006e40:	42a3      	cmp	r3, r4
 8006e42:	d908      	bls.n	8006e56 <_free_r+0x46>
 8006e44:	6825      	ldr	r5, [r4, #0]
 8006e46:	1961      	adds	r1, r4, r5
 8006e48:	428b      	cmp	r3, r1
 8006e4a:	bf01      	itttt	eq
 8006e4c:	6819      	ldreq	r1, [r3, #0]
 8006e4e:	685b      	ldreq	r3, [r3, #4]
 8006e50:	1949      	addeq	r1, r1, r5
 8006e52:	6021      	streq	r1, [r4, #0]
 8006e54:	e7ed      	b.n	8006e32 <_free_r+0x22>
 8006e56:	461a      	mov	r2, r3
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	b10b      	cbz	r3, 8006e60 <_free_r+0x50>
 8006e5c:	42a3      	cmp	r3, r4
 8006e5e:	d9fa      	bls.n	8006e56 <_free_r+0x46>
 8006e60:	6811      	ldr	r1, [r2, #0]
 8006e62:	1855      	adds	r5, r2, r1
 8006e64:	42a5      	cmp	r5, r4
 8006e66:	d10b      	bne.n	8006e80 <_free_r+0x70>
 8006e68:	6824      	ldr	r4, [r4, #0]
 8006e6a:	4421      	add	r1, r4
 8006e6c:	1854      	adds	r4, r2, r1
 8006e6e:	42a3      	cmp	r3, r4
 8006e70:	6011      	str	r1, [r2, #0]
 8006e72:	d1e0      	bne.n	8006e36 <_free_r+0x26>
 8006e74:	681c      	ldr	r4, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	6053      	str	r3, [r2, #4]
 8006e7a:	4421      	add	r1, r4
 8006e7c:	6011      	str	r1, [r2, #0]
 8006e7e:	e7da      	b.n	8006e36 <_free_r+0x26>
 8006e80:	d902      	bls.n	8006e88 <_free_r+0x78>
 8006e82:	230c      	movs	r3, #12
 8006e84:	6003      	str	r3, [r0, #0]
 8006e86:	e7d6      	b.n	8006e36 <_free_r+0x26>
 8006e88:	6825      	ldr	r5, [r4, #0]
 8006e8a:	1961      	adds	r1, r4, r5
 8006e8c:	428b      	cmp	r3, r1
 8006e8e:	bf04      	itt	eq
 8006e90:	6819      	ldreq	r1, [r3, #0]
 8006e92:	685b      	ldreq	r3, [r3, #4]
 8006e94:	6063      	str	r3, [r4, #4]
 8006e96:	bf04      	itt	eq
 8006e98:	1949      	addeq	r1, r1, r5
 8006e9a:	6021      	streq	r1, [r4, #0]
 8006e9c:	6054      	str	r4, [r2, #4]
 8006e9e:	e7ca      	b.n	8006e36 <_free_r+0x26>
 8006ea0:	b003      	add	sp, #12
 8006ea2:	bd30      	pop	{r4, r5, pc}
 8006ea4:	20001c0c 	.word	0x20001c0c

08006ea8 <_init>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	bf00      	nop
 8006eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eae:	bc08      	pop	{r3}
 8006eb0:	469e      	mov	lr, r3
 8006eb2:	4770      	bx	lr

08006eb4 <_fini>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	bf00      	nop
 8006eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eba:	bc08      	pop	{r3}
 8006ebc:	469e      	mov	lr, r3
 8006ebe:	4770      	bx	lr
